// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yespo_protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "yespo_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace yespo {

namespace {

const ::google::protobuf::Descriptor* UserAgent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAgent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppHeartbeatReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppHeartbeatReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppHeartbeatRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppHeartbeatRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppRepetitionLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppRepetitionLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppCalleeNotifyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCalleeNotifyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppCallReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCallReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppPhotoMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppPhotoMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppCallStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCallStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppCallTerminateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppCallTerminateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppVideoSendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppVideoSendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AppVideoRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AppVideoRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccessSvrHeartbeatFailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccessSvrHeartbeatFailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSvrLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSvrLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSvrLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSvrLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSvrLogoutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSvrLogoutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSvrLogoutRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSvrLogoutRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrAdduserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrAdduserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrAdduserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrAdduserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrDeluserReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrDeluserReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrDeluserRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrDeluserRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrStatusQueryReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrStatusQueryReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrStatusItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrStatusItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrStatusQueryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrStatusQueryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusSvrUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusSvrUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrDistributeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrDistributeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrDistributeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrDistributeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrCallCancelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrCallCancelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrCallCancelRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrCallCancelRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrPartnerStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrPartnerStatusItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrPartnerStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrCheckExpireReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrCheckExpireReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstPeerStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstPeerStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstPeerStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstPeerStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstListCallReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstListCallReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstListCallRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstListCallRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstCallStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstCallStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstCallStatusRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstCallStatusRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrVideoSendReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrVideoSendReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrVideoSendRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrVideoSendRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrVideoRecvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrVideoRecvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrVideoRecvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrVideoRecvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstCallStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstCallStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrAstCallStateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrAstCallStateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrInsufficientReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrInsufficientReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomsvrInsufficientRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomsvrInsufficientRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingSvrTimerBillingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingSvrTimerBillingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingSvrStartBillingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingSvrStartBillingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingSvrStartBillingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingSvrStartBillingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingSvrFinishBillingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingSvrFinishBillingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BillingSvrFinishBillingRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BillingSvrFinishBillingRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmiSvrHangupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmiSvrHangupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AmiSvrHangupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AmiSvrHangupRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BillingStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AstPeerStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AstCallStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoSendStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* VideoRecvResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AstCallRole_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AstCallState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RspCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_yespo_5fprotocol_2eproto() {
  protobuf_AddDesc_yespo_5fprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "yespo_protocol.proto");
  GOOGLE_CHECK(file != NULL);
  UserAgent_descriptor_ = file->message_type(0);
  static const int UserAgent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, os_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, client_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, carrier_operator_),
  };
  UserAgent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserAgent_descriptor_,
      UserAgent::default_instance_,
      UserAgent_offsets_,
      -1,
      -1,
      -1,
      sizeof(UserAgent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAgent, _is_default_instance_));
  Header_descriptor_ = file->message_type(1);
  static const int Header_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, timestamp_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      -1,
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _is_default_instance_));
  RspMsg_descriptor_ = file->message_type(2);
  static const int RspMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, rsp_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, rsp_msg_),
  };
  RspMsg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RspMsg_descriptor_,
      RspMsg::default_instance_,
      RspMsg_offsets_,
      -1,
      -1,
      -1,
      sizeof(RspMsg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspMsg, _is_default_instance_));
  AppHeartbeatReq_descriptor_ = file->message_type(3);
  static const int AppHeartbeatReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatReq, timestamp_),
  };
  AppHeartbeatReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppHeartbeatReq_descriptor_,
      AppHeartbeatReq::default_instance_,
      AppHeartbeatReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppHeartbeatReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatReq, _is_default_instance_));
  AppHeartbeatRsp_descriptor_ = file->message_type(4);
  static const int AppHeartbeatRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatRsp, timestamp_),
  };
  AppHeartbeatRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppHeartbeatRsp_descriptor_,
      AppHeartbeatRsp::default_instance_,
      AppHeartbeatRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppHeartbeatRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppHeartbeatRsp, _is_default_instance_));
  AppRepetitionLogin_descriptor_ = file->message_type(5);
  static const int AppRepetitionLogin_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, accesssvr_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, accesssvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, accesssvr_sock_),
  };
  AppRepetitionLogin_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppRepetitionLogin_descriptor_,
      AppRepetitionLogin::default_instance_,
      AppRepetitionLogin_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppRepetitionLogin),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppRepetitionLogin, _is_default_instance_));
  AppCalleeNotifyReq_descriptor_ = file->message_type(6);
  static const int AppCalleeNotifyReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, room_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, callee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, source_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, target_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, call_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, cdr_id_),
  };
  AppCalleeNotifyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppCalleeNotifyReq_descriptor_,
      AppCalleeNotifyReq::default_instance_,
      AppCalleeNotifyReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppCalleeNotifyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCalleeNotifyReq, _is_default_instance_));
  AppCallReadyReq_descriptor_ = file->message_type(7);
  static const int AppCallReadyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallReadyReq, user_id_),
  };
  AppCallReadyReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppCallReadyReq_descriptor_,
      AppCallReadyReq::default_instance_,
      AppCallReadyReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppCallReadyReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallReadyReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallReadyReq, _is_default_instance_));
  AppPhotoMsgReq_descriptor_ = file->message_type(8);
  static const int AppPhotoMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPhotoMsgReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPhotoMsgReq, msg_),
  };
  AppPhotoMsgReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppPhotoMsgReq_descriptor_,
      AppPhotoMsgReq::default_instance_,
      AppPhotoMsgReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppPhotoMsgReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPhotoMsgReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppPhotoMsgReq, _is_default_instance_));
  AppCallStatusReq_descriptor_ = file->message_type(9);
  static const int AppCallStatusReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallStatusReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallStatusReq, call_status_),
  };
  AppCallStatusReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppCallStatusReq_descriptor_,
      AppCallStatusReq::default_instance_,
      AppCallStatusReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppCallStatusReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallStatusReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallStatusReq, _is_default_instance_));
  AppCallTerminateReq_descriptor_ = file->message_type(10);
  static const int AppCallTerminateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallTerminateReq, user_id_),
  };
  AppCallTerminateReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppCallTerminateReq_descriptor_,
      AppCallTerminateReq::default_instance_,
      AppCallTerminateReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppCallTerminateReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallTerminateReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppCallTerminateReq, _is_default_instance_));
  AppVideoSendReq_descriptor_ = file->message_type(11);
  static const int AppVideoSendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoSendReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoSendReq, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoSendReq, video_status_),
  };
  AppVideoSendReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppVideoSendReq_descriptor_,
      AppVideoSendReq::default_instance_,
      AppVideoSendReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppVideoSendReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoSendReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoSendReq, _is_default_instance_));
  AppVideoRecvReq_descriptor_ = file->message_type(12);
  static const int AppVideoRecvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoRecvReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoRecvReq, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoRecvReq, result_),
  };
  AppVideoRecvReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AppVideoRecvReq_descriptor_,
      AppVideoRecvReq::default_instance_,
      AppVideoRecvReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AppVideoRecvReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoRecvReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppVideoRecvReq, _is_default_instance_));
  AccessSvrHeartbeatFailReq_descriptor_ = file->message_type(13);
  static const int AccessSvrHeartbeatFailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessSvrHeartbeatFailReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessSvrHeartbeatFailReq, socket_),
  };
  AccessSvrHeartbeatFailReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AccessSvrHeartbeatFailReq_descriptor_,
      AccessSvrHeartbeatFailReq::default_instance_,
      AccessSvrHeartbeatFailReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AccessSvrHeartbeatFailReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessSvrHeartbeatFailReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccessSvrHeartbeatFailReq, _is_default_instance_));
  LoginSvrLoginReq_descriptor_ = file->message_type(14);
  static const int LoginSvrLoginReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, accesssvr_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, accesssvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, accesssvr_sock_),
  };
  LoginSvrLoginReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginSvrLoginReq_descriptor_,
      LoginSvrLoginReq::default_instance_,
      LoginSvrLoginReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginSvrLoginReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginReq, _is_default_instance_));
  LoginSvrLoginRsp_descriptor_ = file->message_type(15);
  static const int LoginSvrLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginRsp, rsp_msg_),
  };
  LoginSvrLoginRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginSvrLoginRsp_descriptor_,
      LoginSvrLoginRsp::default_instance_,
      LoginSvrLoginRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginSvrLoginRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLoginRsp, _is_default_instance_));
  LoginSvrLogoutReq_descriptor_ = file->message_type(16);
  static const int LoginSvrLogoutReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutReq, user_id_),
  };
  LoginSvrLogoutReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginSvrLogoutReq_descriptor_,
      LoginSvrLogoutReq::default_instance_,
      LoginSvrLogoutReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginSvrLogoutReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutReq, _is_default_instance_));
  LoginSvrLogoutRsp_descriptor_ = file->message_type(17);
  static const int LoginSvrLogoutRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutRsp, rsp_msg_),
  };
  LoginSvrLogoutRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LoginSvrLogoutRsp_descriptor_,
      LoginSvrLogoutRsp::default_instance_,
      LoginSvrLogoutRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(LoginSvrLogoutRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSvrLogoutRsp, _is_default_instance_));
  StatusSvrAdduserReq_descriptor_ = file->message_type(18);
  static const int StatusSvrAdduserReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, accesssvr_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, accesssvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, socket_),
  };
  StatusSvrAdduserReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrAdduserReq_descriptor_,
      StatusSvrAdduserReq::default_instance_,
      StatusSvrAdduserReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrAdduserReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserReq, _is_default_instance_));
  StatusSvrAdduserRsp_descriptor_ = file->message_type(19);
  static const int StatusSvrAdduserRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, accesssvr_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, accesssvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, socket_),
  };
  StatusSvrAdduserRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrAdduserRsp_descriptor_,
      StatusSvrAdduserRsp::default_instance_,
      StatusSvrAdduserRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrAdduserRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrAdduserRsp, _is_default_instance_));
  StatusSvrDeluserReq_descriptor_ = file->message_type(20);
  static const int StatusSvrDeluserReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserReq, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserReq, socket_),
  };
  StatusSvrDeluserReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrDeluserReq_descriptor_,
      StatusSvrDeluserReq::default_instance_,
      StatusSvrDeluserReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrDeluserReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserReq, _is_default_instance_));
  StatusSvrDeluserRsp_descriptor_ = file->message_type(21);
  static const int StatusSvrDeluserRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserRsp, rsp_msg_),
  };
  StatusSvrDeluserRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrDeluserRsp_descriptor_,
      StatusSvrDeluserRsp::default_instance_,
      StatusSvrDeluserRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrDeluserRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrDeluserRsp, _is_default_instance_));
  StatusSvrStatusQueryReq_descriptor_ = file->message_type(22);
  static const int StatusSvrStatusQueryReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryReq, user_id_),
  };
  StatusSvrStatusQueryReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrStatusQueryReq_descriptor_,
      StatusSvrStatusQueryReq::default_instance_,
      StatusSvrStatusQueryReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrStatusQueryReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryReq, _is_default_instance_));
  StatusSvrStatusItem_descriptor_ = file->message_type(23);
  static const int StatusSvrStatusItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusItem, status_),
  };
  StatusSvrStatusItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrStatusItem_descriptor_,
      StatusSvrStatusItem::default_instance_,
      StatusSvrStatusItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrStatusItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusItem, _is_default_instance_));
  StatusSvrStatusQueryRsp_descriptor_ = file->message_type(24);
  static const int StatusSvrStatusQueryRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryRsp, status_item_),
  };
  StatusSvrStatusQueryRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrStatusQueryRsp_descriptor_,
      StatusSvrStatusQueryRsp::default_instance_,
      StatusSvrStatusQueryRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrStatusQueryRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrStatusQueryRsp, _is_default_instance_));
  StatusSvrUserInfoReq_descriptor_ = file->message_type(25);
  static const int StatusSvrUserInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoReq, user_id_),
  };
  StatusSvrUserInfoReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrUserInfoReq_descriptor_,
      StatusSvrUserInfoReq::default_instance_,
      StatusSvrUserInfoReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrUserInfoReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoReq, _is_default_instance_));
  StatusSvrUserInfoRsp_descriptor_ = file->message_type(26);
  static const int StatusSvrUserInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, user_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, device_token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, accesssvr_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, accesssvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, socket_),
  };
  StatusSvrUserInfoRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StatusSvrUserInfoRsp_descriptor_,
      StatusSvrUserInfoRsp::default_instance_,
      StatusSvrUserInfoRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(StatusSvrUserInfoRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusSvrUserInfoRsp, _is_default_instance_));
  RoomsvrDistributeReq_descriptor_ = file->message_type(27);
  static const int RoomsvrDistributeReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, callee_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, source_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, target_language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, call_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, call_country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, country_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, parent_cdr_id_),
  };
  RoomsvrDistributeReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrDistributeReq_descriptor_,
      RoomsvrDistributeReq::default_instance_,
      RoomsvrDistributeReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrDistributeReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeReq, _is_default_instance_));
  RoomsvrDistributeRsp_descriptor_ = file->message_type(28);
  static const int RoomsvrDistributeRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, room_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, cdr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, record_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, parent_cdr_id_),
  };
  RoomsvrDistributeRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrDistributeRsp_descriptor_,
      RoomsvrDistributeRsp::default_instance_,
      RoomsvrDistributeRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrDistributeRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrDistributeRsp, _is_default_instance_));
  RoomsvrCallCancelReq_descriptor_ = file->message_type(29);
  static const int RoomsvrCallCancelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelReq, partner_id_),
  };
  RoomsvrCallCancelReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrCallCancelReq_descriptor_,
      RoomsvrCallCancelReq::default_instance_,
      RoomsvrCallCancelReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrCallCancelReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelReq, _is_default_instance_));
  RoomsvrCallCancelRsp_descriptor_ = file->message_type(30);
  static const int RoomsvrCallCancelRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelRsp, rsp_msg_),
  };
  RoomsvrCallCancelRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrCallCancelRsp_descriptor_,
      RoomsvrCallCancelRsp::default_instance_,
      RoomsvrCallCancelRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrCallCancelRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCallCancelRsp, _is_default_instance_));
  RoomsvrPartnerStatusReq_descriptor_ = file->message_type(31);
  static const int RoomsvrPartnerStatusReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusReq, partner_id_),
  };
  RoomsvrPartnerStatusReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrPartnerStatusReq_descriptor_,
      RoomsvrPartnerStatusReq::default_instance_,
      RoomsvrPartnerStatusReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrPartnerStatusReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusReq, _is_default_instance_));
  RoomsvrPartnerStatusItem_descriptor_ = file->message_type(32);
  static const int RoomsvrPartnerStatusItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusItem, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusItem, online_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusItem, call_status_),
  };
  RoomsvrPartnerStatusItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrPartnerStatusItem_descriptor_,
      RoomsvrPartnerStatusItem::default_instance_,
      RoomsvrPartnerStatusItem_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrPartnerStatusItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusItem, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusItem, _is_default_instance_));
  RoomsvrPartnerStatusRsp_descriptor_ = file->message_type(33);
  static const int RoomsvrPartnerStatusRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusRsp, rsp_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusRsp, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusRsp, status_item_),
  };
  RoomsvrPartnerStatusRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrPartnerStatusRsp_descriptor_,
      RoomsvrPartnerStatusRsp::default_instance_,
      RoomsvrPartnerStatusRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrPartnerStatusRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrPartnerStatusRsp, _is_default_instance_));
  RoomsvrCheckExpireReq_descriptor_ = file->message_type(34);
  static const int RoomsvrCheckExpireReq_offsets_[1] = {
  };
  RoomsvrCheckExpireReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrCheckExpireReq_descriptor_,
      RoomsvrCheckExpireReq::default_instance_,
      RoomsvrCheckExpireReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrCheckExpireReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCheckExpireReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrCheckExpireReq, _is_default_instance_));
  RoomsvrAstPeerStatusReq_descriptor_ = file->message_type(35);
  static const int RoomsvrAstPeerStatusReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusReq, peer_status_),
  };
  RoomsvrAstPeerStatusReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstPeerStatusReq_descriptor_,
      RoomsvrAstPeerStatusReq::default_instance_,
      RoomsvrAstPeerStatusReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstPeerStatusReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusReq, _is_default_instance_));
  RoomsvrAstPeerStatusRsp_descriptor_ = file->message_type(36);
  static const int RoomsvrAstPeerStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusRsp, rsp_msg_),
  };
  RoomsvrAstPeerStatusRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstPeerStatusRsp_descriptor_,
      RoomsvrAstPeerStatusRsp::default_instance_,
      RoomsvrAstPeerStatusRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstPeerStatusRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstPeerStatusRsp, _is_default_instance_));
  RoomsvrAstListCallReq_descriptor_ = file->message_type(37);
  static const int RoomsvrAstListCallReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallReq, ast_pub_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallReq, ast_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallReq, user_ids_),
  };
  RoomsvrAstListCallReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstListCallReq_descriptor_,
      RoomsvrAstListCallReq::default_instance_,
      RoomsvrAstListCallReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstListCallReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallReq, _is_default_instance_));
  RoomsvrAstListCallRsp_descriptor_ = file->message_type(38);
  static const int RoomsvrAstListCallRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallRsp, rsp_msg_),
  };
  RoomsvrAstListCallRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstListCallRsp_descriptor_,
      RoomsvrAstListCallRsp::default_instance_,
      RoomsvrAstListCallRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstListCallRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstListCallRsp, _is_default_instance_));
  RoomsvrAstCallStatusReq_descriptor_ = file->message_type(39);
  static const int RoomsvrAstCallStatusReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, ast_call_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, cdr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, amisvr_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, amisvr_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, caller_channel_),
  };
  RoomsvrAstCallStatusReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstCallStatusReq_descriptor_,
      RoomsvrAstCallStatusReq::default_instance_,
      RoomsvrAstCallStatusReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstCallStatusReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusReq, _is_default_instance_));
  RoomsvrAstCallStatusRsp_descriptor_ = file->message_type(40);
  static const int RoomsvrAstCallStatusRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusRsp, rsp_msg_),
  };
  RoomsvrAstCallStatusRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstCallStatusRsp_descriptor_,
      RoomsvrAstCallStatusRsp::default_instance_,
      RoomsvrAstCallStatusRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstCallStatusRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStatusRsp, _is_default_instance_));
  RoomsvrVideoSendReq_descriptor_ = file->message_type(41);
  static const int RoomsvrVideoSendReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendReq, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendReq, video_status_),
  };
  RoomsvrVideoSendReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrVideoSendReq_descriptor_,
      RoomsvrVideoSendReq::default_instance_,
      RoomsvrVideoSendReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrVideoSendReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendReq, _is_default_instance_));
  RoomsvrVideoSendRsp_descriptor_ = file->message_type(42);
  static const int RoomsvrVideoSendRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendRsp, rsp_msg_),
  };
  RoomsvrVideoSendRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrVideoSendRsp_descriptor_,
      RoomsvrVideoSendRsp::default_instance_,
      RoomsvrVideoSendRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrVideoSendRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoSendRsp, _is_default_instance_));
  RoomsvrVideoRecvReq_descriptor_ = file->message_type(43);
  static const int RoomsvrVideoRecvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvReq, partner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvReq, result_),
  };
  RoomsvrVideoRecvReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrVideoRecvReq_descriptor_,
      RoomsvrVideoRecvReq::default_instance_,
      RoomsvrVideoRecvReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrVideoRecvReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvReq, _is_default_instance_));
  RoomsvrVideoRecvRsp_descriptor_ = file->message_type(44);
  static const int RoomsvrVideoRecvRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvRsp, rsp_msg_),
  };
  RoomsvrVideoRecvRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrVideoRecvRsp_descriptor_,
      RoomsvrVideoRecvRsp::default_instance_,
      RoomsvrVideoRecvRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrVideoRecvRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrVideoRecvRsp, _is_default_instance_));
  RoomsvrAstCallStateReq_descriptor_ = file->message_type(45);
  static const int RoomsvrAstCallStateReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, ringing_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, cdr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, reason_),
  };
  RoomsvrAstCallStateReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstCallStateReq_descriptor_,
      RoomsvrAstCallStateReq::default_instance_,
      RoomsvrAstCallStateReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstCallStateReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateReq, _is_default_instance_));
  RoomsvrAstCallStateRsp_descriptor_ = file->message_type(46);
  static const int RoomsvrAstCallStateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateRsp, rsp_msg_),
  };
  RoomsvrAstCallStateRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrAstCallStateRsp_descriptor_,
      RoomsvrAstCallStateRsp::default_instance_,
      RoomsvrAstCallStateRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrAstCallStateRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrAstCallStateRsp, _is_default_instance_));
  RoomsvrInsufficientReq_descriptor_ = file->message_type(47);
  static const int RoomsvrInsufficientReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, cdr_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, caller_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, caller_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, partner_id_),
  };
  RoomsvrInsufficientReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrInsufficientReq_descriptor_,
      RoomsvrInsufficientReq::default_instance_,
      RoomsvrInsufficientReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrInsufficientReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientReq, _is_default_instance_));
  RoomsvrInsufficientRsp_descriptor_ = file->message_type(48);
  static const int RoomsvrInsufficientRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientRsp, rsp_msg_),
  };
  RoomsvrInsufficientRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RoomsvrInsufficientRsp_descriptor_,
      RoomsvrInsufficientRsp::default_instance_,
      RoomsvrInsufficientRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(RoomsvrInsufficientRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomsvrInsufficientRsp, _is_default_instance_));
  BillingSvrTimerBillingReq_descriptor_ = file->message_type(49);
  static const int BillingSvrTimerBillingReq_offsets_[1] = {
  };
  BillingSvrTimerBillingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BillingSvrTimerBillingReq_descriptor_,
      BillingSvrTimerBillingReq::default_instance_,
      BillingSvrTimerBillingReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BillingSvrTimerBillingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrTimerBillingReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrTimerBillingReq, _is_default_instance_));
  BillingSvrStartBillingReq_descriptor_ = file->message_type(50);
  static const int BillingSvrStartBillingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingReq, cdr_id_),
  };
  BillingSvrStartBillingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BillingSvrStartBillingReq_descriptor_,
      BillingSvrStartBillingReq::default_instance_,
      BillingSvrStartBillingReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BillingSvrStartBillingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingReq, _is_default_instance_));
  BillingSvrStartBillingRsp_descriptor_ = file->message_type(51);
  static const int BillingSvrStartBillingRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingRsp, rsp_msg_),
  };
  BillingSvrStartBillingRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BillingSvrStartBillingRsp_descriptor_,
      BillingSvrStartBillingRsp::default_instance_,
      BillingSvrStartBillingRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(BillingSvrStartBillingRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrStartBillingRsp, _is_default_instance_));
  BillingSvrFinishBillingReq_descriptor_ = file->message_type(52);
  static const int BillingSvrFinishBillingReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingReq, cdr_id_),
  };
  BillingSvrFinishBillingReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BillingSvrFinishBillingReq_descriptor_,
      BillingSvrFinishBillingReq::default_instance_,
      BillingSvrFinishBillingReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(BillingSvrFinishBillingReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingReq, _is_default_instance_));
  BillingSvrFinishBillingRsp_descriptor_ = file->message_type(53);
  static const int BillingSvrFinishBillingRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingRsp, rsp_msg_),
  };
  BillingSvrFinishBillingRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BillingSvrFinishBillingRsp_descriptor_,
      BillingSvrFinishBillingRsp::default_instance_,
      BillingSvrFinishBillingRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(BillingSvrFinishBillingRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BillingSvrFinishBillingRsp, _is_default_instance_));
  AmiSvrHangupReq_descriptor_ = file->message_type(54);
  static const int AmiSvrHangupReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupReq, caller_channel_),
  };
  AmiSvrHangupReq_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AmiSvrHangupReq_descriptor_,
      AmiSvrHangupReq::default_instance_,
      AmiSvrHangupReq_offsets_,
      -1,
      -1,
      -1,
      sizeof(AmiSvrHangupReq),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupReq, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupReq, _is_default_instance_));
  AmiSvrHangupRsp_descriptor_ = file->message_type(55);
  static const int AmiSvrHangupRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupRsp, rsp_msg_),
  };
  AmiSvrHangupRsp_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AmiSvrHangupRsp_descriptor_,
      AmiSvrHangupRsp::default_instance_,
      AmiSvrHangupRsp_offsets_,
      -1,
      -1,
      -1,
      sizeof(AmiSvrHangupRsp),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupRsp, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AmiSvrHangupRsp, _is_default_instance_));
  NodeType_descriptor_ = file->enum_type(0);
  MsgType_descriptor_ = file->enum_type(1);
  UserType_descriptor_ = file->enum_type(2);
  OnlineStatus_descriptor_ = file->enum_type(3);
  RoomStatus_descriptor_ = file->enum_type(4);
  BillingStatus_descriptor_ = file->enum_type(5);
  AstPeerStatus_descriptor_ = file->enum_type(6);
  AstCallStatus_descriptor_ = file->enum_type(7);
  VideoSendStatus_descriptor_ = file->enum_type(8);
  VideoRecvResult_descriptor_ = file->enum_type(9);
  AstCallRole_descriptor_ = file->enum_type(10);
  AstCallState_descriptor_ = file->enum_type(11);
  RspCode_descriptor_ = file->enum_type(12);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_yespo_5fprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserAgent_descriptor_, &UserAgent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RspMsg_descriptor_, &RspMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppHeartbeatReq_descriptor_, &AppHeartbeatReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppHeartbeatRsp_descriptor_, &AppHeartbeatRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppRepetitionLogin_descriptor_, &AppRepetitionLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppCalleeNotifyReq_descriptor_, &AppCalleeNotifyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppCallReadyReq_descriptor_, &AppCallReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppPhotoMsgReq_descriptor_, &AppPhotoMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppCallStatusReq_descriptor_, &AppCallStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppCallTerminateReq_descriptor_, &AppCallTerminateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppVideoSendReq_descriptor_, &AppVideoSendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AppVideoRecvReq_descriptor_, &AppVideoRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AccessSvrHeartbeatFailReq_descriptor_, &AccessSvrHeartbeatFailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginSvrLoginReq_descriptor_, &LoginSvrLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginSvrLoginRsp_descriptor_, &LoginSvrLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginSvrLogoutReq_descriptor_, &LoginSvrLogoutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LoginSvrLogoutRsp_descriptor_, &LoginSvrLogoutRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrAdduserReq_descriptor_, &StatusSvrAdduserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrAdduserRsp_descriptor_, &StatusSvrAdduserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrDeluserReq_descriptor_, &StatusSvrDeluserReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrDeluserRsp_descriptor_, &StatusSvrDeluserRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrStatusQueryReq_descriptor_, &StatusSvrStatusQueryReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrStatusItem_descriptor_, &StatusSvrStatusItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrStatusQueryRsp_descriptor_, &StatusSvrStatusQueryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrUserInfoReq_descriptor_, &StatusSvrUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StatusSvrUserInfoRsp_descriptor_, &StatusSvrUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrDistributeReq_descriptor_, &RoomsvrDistributeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrDistributeRsp_descriptor_, &RoomsvrDistributeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrCallCancelReq_descriptor_, &RoomsvrCallCancelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrCallCancelRsp_descriptor_, &RoomsvrCallCancelRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrPartnerStatusReq_descriptor_, &RoomsvrPartnerStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrPartnerStatusItem_descriptor_, &RoomsvrPartnerStatusItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrPartnerStatusRsp_descriptor_, &RoomsvrPartnerStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrCheckExpireReq_descriptor_, &RoomsvrCheckExpireReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstPeerStatusReq_descriptor_, &RoomsvrAstPeerStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstPeerStatusRsp_descriptor_, &RoomsvrAstPeerStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstListCallReq_descriptor_, &RoomsvrAstListCallReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstListCallRsp_descriptor_, &RoomsvrAstListCallRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstCallStatusReq_descriptor_, &RoomsvrAstCallStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstCallStatusRsp_descriptor_, &RoomsvrAstCallStatusRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrVideoSendReq_descriptor_, &RoomsvrVideoSendReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrVideoSendRsp_descriptor_, &RoomsvrVideoSendRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrVideoRecvReq_descriptor_, &RoomsvrVideoRecvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrVideoRecvRsp_descriptor_, &RoomsvrVideoRecvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstCallStateReq_descriptor_, &RoomsvrAstCallStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrAstCallStateRsp_descriptor_, &RoomsvrAstCallStateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrInsufficientReq_descriptor_, &RoomsvrInsufficientReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RoomsvrInsufficientRsp_descriptor_, &RoomsvrInsufficientRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BillingSvrTimerBillingReq_descriptor_, &BillingSvrTimerBillingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BillingSvrStartBillingReq_descriptor_, &BillingSvrStartBillingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BillingSvrStartBillingRsp_descriptor_, &BillingSvrStartBillingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BillingSvrFinishBillingReq_descriptor_, &BillingSvrFinishBillingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BillingSvrFinishBillingRsp_descriptor_, &BillingSvrFinishBillingRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AmiSvrHangupReq_descriptor_, &AmiSvrHangupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AmiSvrHangupRsp_descriptor_, &AmiSvrHangupRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_yespo_5fprotocol_2eproto() {
  delete UserAgent::default_instance_;
  delete UserAgent_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete RspMsg::default_instance_;
  delete RspMsg_reflection_;
  delete AppHeartbeatReq::default_instance_;
  delete AppHeartbeatReq_reflection_;
  delete AppHeartbeatRsp::default_instance_;
  delete AppHeartbeatRsp_reflection_;
  delete AppRepetitionLogin::default_instance_;
  delete AppRepetitionLogin_reflection_;
  delete AppCalleeNotifyReq::default_instance_;
  delete AppCalleeNotifyReq_reflection_;
  delete AppCallReadyReq::default_instance_;
  delete AppCallReadyReq_reflection_;
  delete AppPhotoMsgReq::default_instance_;
  delete AppPhotoMsgReq_reflection_;
  delete AppCallStatusReq::default_instance_;
  delete AppCallStatusReq_reflection_;
  delete AppCallTerminateReq::default_instance_;
  delete AppCallTerminateReq_reflection_;
  delete AppVideoSendReq::default_instance_;
  delete AppVideoSendReq_reflection_;
  delete AppVideoRecvReq::default_instance_;
  delete AppVideoRecvReq_reflection_;
  delete AccessSvrHeartbeatFailReq::default_instance_;
  delete AccessSvrHeartbeatFailReq_reflection_;
  delete LoginSvrLoginReq::default_instance_;
  delete LoginSvrLoginReq_reflection_;
  delete LoginSvrLoginRsp::default_instance_;
  delete LoginSvrLoginRsp_reflection_;
  delete LoginSvrLogoutReq::default_instance_;
  delete LoginSvrLogoutReq_reflection_;
  delete LoginSvrLogoutRsp::default_instance_;
  delete LoginSvrLogoutRsp_reflection_;
  delete StatusSvrAdduserReq::default_instance_;
  delete StatusSvrAdduserReq_reflection_;
  delete StatusSvrAdduserRsp::default_instance_;
  delete StatusSvrAdduserRsp_reflection_;
  delete StatusSvrDeluserReq::default_instance_;
  delete StatusSvrDeluserReq_reflection_;
  delete StatusSvrDeluserRsp::default_instance_;
  delete StatusSvrDeluserRsp_reflection_;
  delete StatusSvrStatusQueryReq::default_instance_;
  delete StatusSvrStatusQueryReq_reflection_;
  delete StatusSvrStatusItem::default_instance_;
  delete StatusSvrStatusItem_reflection_;
  delete StatusSvrStatusQueryRsp::default_instance_;
  delete StatusSvrStatusQueryRsp_reflection_;
  delete StatusSvrUserInfoReq::default_instance_;
  delete StatusSvrUserInfoReq_reflection_;
  delete StatusSvrUserInfoRsp::default_instance_;
  delete StatusSvrUserInfoRsp_reflection_;
  delete RoomsvrDistributeReq::default_instance_;
  delete RoomsvrDistributeReq_reflection_;
  delete RoomsvrDistributeRsp::default_instance_;
  delete RoomsvrDistributeRsp_reflection_;
  delete RoomsvrCallCancelReq::default_instance_;
  delete RoomsvrCallCancelReq_reflection_;
  delete RoomsvrCallCancelRsp::default_instance_;
  delete RoomsvrCallCancelRsp_reflection_;
  delete RoomsvrPartnerStatusReq::default_instance_;
  delete RoomsvrPartnerStatusReq_reflection_;
  delete RoomsvrPartnerStatusItem::default_instance_;
  delete RoomsvrPartnerStatusItem_reflection_;
  delete RoomsvrPartnerStatusRsp::default_instance_;
  delete RoomsvrPartnerStatusRsp_reflection_;
  delete RoomsvrCheckExpireReq::default_instance_;
  delete RoomsvrCheckExpireReq_reflection_;
  delete RoomsvrAstPeerStatusReq::default_instance_;
  delete RoomsvrAstPeerStatusReq_reflection_;
  delete RoomsvrAstPeerStatusRsp::default_instance_;
  delete RoomsvrAstPeerStatusRsp_reflection_;
  delete RoomsvrAstListCallReq::default_instance_;
  delete RoomsvrAstListCallReq_reflection_;
  delete RoomsvrAstListCallRsp::default_instance_;
  delete RoomsvrAstListCallRsp_reflection_;
  delete RoomsvrAstCallStatusReq::default_instance_;
  delete RoomsvrAstCallStatusReq_reflection_;
  delete RoomsvrAstCallStatusRsp::default_instance_;
  delete RoomsvrAstCallStatusRsp_reflection_;
  delete RoomsvrVideoSendReq::default_instance_;
  delete RoomsvrVideoSendReq_reflection_;
  delete RoomsvrVideoSendRsp::default_instance_;
  delete RoomsvrVideoSendRsp_reflection_;
  delete RoomsvrVideoRecvReq::default_instance_;
  delete RoomsvrVideoRecvReq_reflection_;
  delete RoomsvrVideoRecvRsp::default_instance_;
  delete RoomsvrVideoRecvRsp_reflection_;
  delete RoomsvrAstCallStateReq::default_instance_;
  delete RoomsvrAstCallStateReq_reflection_;
  delete RoomsvrAstCallStateRsp::default_instance_;
  delete RoomsvrAstCallStateRsp_reflection_;
  delete RoomsvrInsufficientReq::default_instance_;
  delete RoomsvrInsufficientReq_reflection_;
  delete RoomsvrInsufficientRsp::default_instance_;
  delete RoomsvrInsufficientRsp_reflection_;
  delete BillingSvrTimerBillingReq::default_instance_;
  delete BillingSvrTimerBillingReq_reflection_;
  delete BillingSvrStartBillingReq::default_instance_;
  delete BillingSvrStartBillingReq_reflection_;
  delete BillingSvrStartBillingRsp::default_instance_;
  delete BillingSvrStartBillingRsp_reflection_;
  delete BillingSvrFinishBillingReq::default_instance_;
  delete BillingSvrFinishBillingReq_reflection_;
  delete BillingSvrFinishBillingRsp::default_instance_;
  delete BillingSvrFinishBillingRsp_reflection_;
  delete AmiSvrHangupReq::default_instance_;
  delete AmiSvrHangupReq_reflection_;
  delete AmiSvrHangupRsp::default_instance_;
  delete AmiSvrHangupRsp_reflection_;
}

void protobuf_AddDesc_yespo_5fprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024yespo_protocol.proto\022\005yespo\"i\n\tUserAge"
    "nt\022\017\n\007os_type\030\001 \001(\t\022\016\n\006os_ver\030\002 \001(\t\022\r\n\005m"
    "odel\030\003 \001(\t\022\022\n\nclient_ver\030\004 \001(\t\022\030\n\020carrie"
    "r_operator\030\005 \001(\t\"t\n\006Header\022\020\n\010msg_type\030\001"
    " \001(\005\022\016\n\006msg_id\030\002 \001(\004\022\017\n\007user_id\030\003 \001(\004\022$\n"
    "\nuser_agent\030\004 \001(\0132\020.yespo.UserAgent\022\021\n\tt"
    "imestamp\030\005 \001(\004\"+\n\006RspMsg\022\020\n\010rsp_code\030\001 \001"
    "(\005\022\017\n\007rsp_msg\030\002 \001(\t\"$\n\017AppHeartbeatReq\022\021"
    "\n\ttimestamp\030\001 \001(\005\"D\n\017AppHeartbeatRsp\022\036\n\007"
    "rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\022\021\n\ttimestam"
    "p\030\002 \001(\005\"\224\001\n\022AppRepetitionLogin\022\017\n\007user_i"
    "d\030\001 \001(\004\022\021\n\tuser_type\030\002 \001(\r\022\024\n\014device_tok"
    "en\030\003 \001(\t\022\024\n\014accesssvr_ip\030\004 \001(\t\022\026\n\016access"
    "svr_port\030\005 \001(\r\022\026\n\016accesssvr_sock\030\006 \001(\r\"\271"
    "\001\n\022AppCalleeNotifyReq\022\017\n\007user_id\030\001 \001(\004\022\024"
    "\n\014room_address\030\002 \001(\t\022\024\n\014device_token\030\003 \001"
    "(\t\022\021\n\tcallee_id\030\004 \001(\004\022\027\n\017source_language"
    "\030\005 \001(\t\022\027\n\017target_language\030\006 \001(\t\022\021\n\tcall_"
    "mode\030\007 \001(\t\022\016\n\006cdr_id\030\010 \001(\t\"\"\n\017AppCallRea"
    "dyReq\022\017\n\007user_id\030\001 \001(\004\".\n\016AppPhotoMsgReq"
    "\022\017\n\007user_id\030\001 \001(\004\022\013\n\003msg\030\002 \001(\t\"8\n\020AppCal"
    "lStatusReq\022\017\n\007user_id\030\001 \001(\004\022\023\n\013call_stat"
    "us\030\002 \001(\r\"&\n\023AppCallTerminateReq\022\017\n\007user_"
    "id\030\001 \001(\004\"L\n\017AppVideoSendReq\022\017\n\007user_id\030\001"
    " \001(\004\022\022\n\npartner_id\030\002 \001(\004\022\024\n\014video_status"
    "\030\003 \001(\r\"F\n\017AppVideoRecvReq\022\017\n\007user_id\030\001 \001"
    "(\004\022\022\n\npartner_id\030\002 \001(\004\022\016\n\006result\030\003 \001(\r\"7"
    "\n\031AccessSvrHeartbeatFailReq\022\n\n\002ip\030\001 \001(\t\022"
    "\016\n\006socket\030\002 \001(\r\"\241\001\n\020LoginSvrLoginReq\022\017\n\007"
    "user_id\030\001 \001(\004\022\021\n\tuser_type\030\002 \001(\r\022\r\n\005toke"
    "n\030\003 \001(\t\022\024\n\014device_token\030\004 \001(\t\022\024\n\014accesss"
    "vr_ip\030\005 \001(\t\022\026\n\016accesssvr_port\030\006 \001(\r\022\026\n\016a"
    "ccesssvr_sock\030\007 \001(\r\"2\n\020LoginSvrLoginRsp\022"
    "\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\"$\n\021Login"
    "SvrLogoutReq\022\017\n\007user_id\030\001 \001(\004\"3\n\021LoginSv"
    "rLogoutRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspM"
    "sg\"\215\001\n\023StatusSvrAdduserReq\022\017\n\007user_id\030\001 "
    "\001(\004\022\021\n\tuser_type\030\002 \001(\r\022\024\n\014device_token\030\003"
    " \001(\t\022\024\n\014accesssvr_ip\030\004 \001(\t\022\026\n\016accesssvr_"
    "port\030\005 \001(\r\022\016\n\006socket\030\006 \001(\r\"\255\001\n\023StatusSvr"
    "AdduserRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspM"
    "sg\022\017\n\007user_id\030\002 \001(\004\022\021\n\tuser_type\030\003 \001(\r\022\024"
    "\n\014device_token\030\004 \001(\t\022\024\n\014accesssvr_ip\030\005 \001"
    "(\t\022\026\n\016accesssvr_port\030\006 \001(\r\022\016\n\006socket\030\007 \001"
    "(\r\"B\n\023StatusSvrDeluserReq\022\017\n\007user_id\030\001 \001"
    "(\004\022\n\n\002ip\030\002 \001(\t\022\016\n\006socket\030\003 \001(\005\"5\n\023Status"
    "SvrDeluserRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.R"
    "spMsg\"*\n\027StatusSvrStatusQueryReq\022\017\n\007user"
    "_id\030\001 \003(\004\"6\n\023StatusSvrStatusItem\022\017\n\007user"
    "_id\030\001 \001(\004\022\016\n\006status\030\002 \001(\005\"j\n\027StatusSvrSt"
    "atusQueryRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.Rs"
    "pMsg\022/\n\013status_item\030\002 \003(\0132\032.yespo.Status"
    "SvrStatusItem\"\'\n\024StatusSvrUserInfoReq\022\017\n"
    "\007user_id\030\001 \001(\004\"\256\001\n\024StatusSvrUserInfoRsp\022"
    "\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\022\017\n\007user_"
    "id\030\002 \001(\004\022\021\n\tuser_type\030\003 \001(\r\022\024\n\014device_to"
    "ken\030\004 \001(\t\022\024\n\014accesssvr_ip\030\005 \001(\t\022\026\n\016acces"
    "ssvr_port\030\006 \001(\r\022\016\n\006socket\030\007 \001(\r\"\326\001\n\024Room"
    "svrDistributeReq\022\017\n\007user_id\030\001 \001(\004\022\022\n\npar"
    "tner_id\030\002 \001(\004\022\021\n\tcallee_id\030\003 \001(\004\022\027\n\017sour"
    "ce_language\030\004 \001(\t\022\027\n\017target_language\030\005 \001"
    "(\t\022\021\n\tcall_mode\030\006 \001(\t\022\024\n\014call_country\030\007 "
    "\001(\t\022\024\n\014country_code\030\010 \001(\t\022\025\n\rparent_cdr_"
    "id\030\t \001(\t\"\231\001\n\024RoomsvrDistributeRsp\022\036\n\007rsp"
    "_msg\030\001 \001(\0132\r.yespo.RspMsg\022\017\n\007user_id\030\002 \001"
    "(\004\022\024\n\014room_address\030\003 \001(\t\022\016\n\006cdr_id\030\004 \001(\t"
    "\022\023\n\013record_path\030\005 \001(\t\022\025\n\rparent_cdr_id\030\006"
    " \001(\t\";\n\024RoomsvrCallCancelReq\022\017\n\007user_id\030"
    "\001 \001(\004\022\022\n\npartner_id\030\002 \001(\004\"6\n\024RoomsvrCall"
    "CancelRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspMs"
    "g\">\n\027RoomsvrPartnerStatusReq\022\017\n\007user_id\030"
    "\001 \001(\004\022\022\n\npartner_id\030\002 \003(\004\"Z\n\030RoomsvrPart"
    "nerStatusItem\022\022\n\npartner_id\030\001 \001(\004\022\025\n\ronl"
    "ine_status\030\002 \001(\005\022\023\n\013call_status\030\003 \001(\005\"\200\001"
    "\n\027RoomsvrPartnerStatusRsp\022\036\n\007rsp_msg\030\001 \001"
    "(\0132\r.yespo.RspMsg\022\017\n\007user_id\030\002 \001(\004\0224\n\013st"
    "atus_item\030\003 \003(\0132\037.yespo.RoomsvrPartnerSt"
    "atusItem\"\027\n\025RoomsvrCheckExpireReq\"\?\n\027Roo"
    "msvrAstPeerStatusReq\022\017\n\007user_id\030\001 \001(\004\022\023\n"
    "\013peer_status\030\002 \001(\005\"9\n\027RoomsvrAstPeerStat"
    "usRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\"Q\n"
    "\025RoomsvrAstListCallReq\022\024\n\014ast_pub_addr\030\001"
    " \001(\t\022\020\n\010ast_addr\030\002 \001(\t\022\020\n\010user_ids\030\003 \003(\004"
    "\"7\n\025RoomsvrAstListCallRsp\022\036\n\007rsp_msg\030\001 \001"
    "(\0132\r.yespo.RspMsg\"\225\001\n\027RoomsvrAstCallStat"
    "usReq\022\017\n\007user_id\030\001 \001(\004\022\027\n\017ast_call_statu"
    "s\030\002 \001(\r\022\016\n\006cdr_id\030\003 \001(\t\022\023\n\013amisvr_addr\030\004"
    " \001(\t\022\023\n\013amisvr_port\030\005 \001(\r\022\026\n\016caller_chan"
    "nel\030\006 \001(\t\"9\n\027RoomsvrAstCallStatusRsp\022\036\n\007"
    "rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\"P\n\023RoomsvrV"
    "ideoSendReq\022\017\n\007user_id\030\001 \001(\004\022\022\n\npartner_"
    "id\030\002 \001(\004\022\024\n\014video_status\030\003 \001(\r\"5\n\023Roomsv"
    "rVideoSendRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.R"
    "spMsg\"J\n\023RoomsvrVideoRecvReq\022\017\n\007user_id\030"
    "\001 \001(\004\022\022\n\npartner_id\030\002 \001(\004\022\016\n\006result\030\003 \001("
    "\r\"5\n\023RoomsvrVideoRecvRsp\022\036\n\007rsp_msg\030\001 \001("
    "\0132\r.yespo.RspMsg\"k\n\026RoomsvrAstCallStateR"
    "eq\022\014\n\004role\030\001 \001(\r\022\r\n\005state\030\002 \001(\r\022\024\n\014ringi"
    "ng_time\030\003 \001(\r\022\016\n\006cdr_id\030\004 \001(\t\022\016\n\006reason\030"
    "\005 \001(\t\"8\n\026RoomsvrAstCallStateRsp\022\036\n\007rsp_m"
    "sg\030\001 \001(\0132\r.yespo.RspMsg\"g\n\026RoomsvrInsuff"
    "icientReq\022\016\n\006cdr_id\030\001 \001(\t\022\026\n\016caller_chan"
    "nel\030\002 \001(\t\022\021\n\tcaller_id\030\003 \001(\004\022\022\n\npartner_"
    "id\030\004 \001(\004\"8\n\026RoomsvrInsufficientRsp\022\036\n\007rs"
    "p_msg\030\001 \001(\0132\r.yespo.RspMsg\"\033\n\031BillingSvr"
    "TimerBillingReq\"+\n\031BillingSvrStartBillin"
    "gReq\022\016\n\006cdr_id\030\001 \001(\t\";\n\031BillingSvrStartB"
    "illingRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.RspMs"
    "g\",\n\032BillingSvrFinishBillingReq\022\016\n\006cdr_i"
    "d\030\001 \001(\t\"<\n\032BillingSvrFinishBillingRsp\022\036\n"
    "\007rsp_msg\030\001 \001(\0132\r.yespo.RspMsg\")\n\017AmiSvrH"
    "angupReq\022\026\n\016caller_channel\030\001 \001(\t\"1\n\017AmiS"
    "vrHangupRsp\022\036\n\007rsp_msg\030\001 \001(\0132\r.yespo.Rsp"
    "Msg*\203\002\n\010NodeType\022\021\n\rNODE_TYPE_MIN\020\000\022\021\n\rN"
    "ODE_TYPE_APP\020\001\022\027\n\023NODE_TYPE_ACCESSSVR\020\002\022"
    "\026\n\022NODE_TYPE_LOGINSVR\020\003\022\027\n\023NODE_TYPE_STA"
    "TUSSVR\020\004\022\025\n\021NODE_TYPE_PUSHSVR\020\005\022\025\n\021NODE_"
    "TYPE_ROOMSVR\020\006\022\026\n\022NODE_TYPE_MEDIASVR\020\007\022\030"
    "\n\024NODE_TYPE_BILLINGSVR\020\010\022\024\n\020NODE_TYPE_AM"
    "ISVR\020\t\022\021\n\rNODE_TYPE_MAX\020\n*\307\023\n\007MsgType\022\020\n"
    "\014MSG_TYPE_MIN\020\000\022\032\n\025MSG_TYPE_APP_TYPE_MIN"
    "\020\200\002\022\037\n\032MSG_TYPE_APP_HEARTBEAT_REQ\020\201\002\022\037\n\032"
    "MSG_TYPE_APP_HEARTBEAT_RSP\020\202\002\022&\n!MSG_TYP"
    "E_APP_REPETITION_LOGIN_REQ\020\203\002\022#\n\036MSG_TYP"
    "E_APP_CALLEE_NOTIFY_REQ\020\205\002\022 \n\033MSG_TYPE_A"
    "PP_CALL_READY_REQ\020\207\002\022\037\n\032MSG_TYPE_APP_PHO"
    "TO_MSG_REQ\020\211\002\022!\n\034MSG_TYPE_APP_CALL_STATU"
    "S_REQ\020\213\002\022$\n\037MSG_TYPE_APP_CALL_TERMINATE_"
    "REQ\020\215\002\022 \n\033MSG_TYPE_APP_VIDEO_SEND_REQ\020\217\002"
    "\022 \n\033MSG_TYPE_APP_VIDEO_RECV_REQ\020\221\002\022\032\n\025MS"
    "G_TYPE_APP_TYPE_MAX\020\377\003\022 \n\033MSG_TYPE_ACCES"
    "SSVR_TYPE_MIN\020\200\004\022*\n%MSG_TYPE_ACCESSSVR_H"
    "EARTBEAT_FAIL_REQ\020\203\004\022 \n\033MSG_TYPE_ACCESSS"
    "VR_TYPE_MAX\020\377\005\022\037\n\032MSG_TYPE_LOGINSVR_TYPE"
    "_MIN\020\200\006\022 \n\033MSG_TYPE_LOGINSVR_LOGIN_REQ\020\201"
    "\006\022 \n\033MSG_TYPE_LOGINSVR_LOGIN_RSP\020\202\006\022!\n\034M"
    "SG_TYPE_LOGINSVR_LOGOUT_REQ\020\203\006\022!\n\034MSG_TY"
    "PE_LOGINSVR_LOGOUT_RSP\020\204\006\022\037\n\032MSG_TYPE_LO"
    "GINSVR_TYPE_MAX\020\377\007\022 \n\033MSG_TYPE_STATUSSVR"
    "_TYPE_MIN\020\200\010\022#\n\036MSG_TYPE_STATUSSVR_ADDUS"
    "ER_REQ\020\201\010\022#\n\036MSG_TYPE_STATUSSVR_ADDUSER_"
    "RSP\020\202\010\022#\n\036MSG_TYPE_STATUSSVR_DELUSER_REQ"
    "\020\203\010\022#\n\036MSG_TYPE_STATUSSVR_DELUSER_RSP\020\204\010"
    "\022\"\n\035MSG_TYPE_STATUSSVR_STATUS_REQ\020\205\010\022\"\n\035"
    "MSG_TYPE_STATUSSVR_STATUS_RSP\020\206\010\022$\n\037MSG_"
    "TYPE_STATUSSVR_USERINFO_REQ\020\207\010\022$\n\037MSG_TY"
    "PE_STATUSSVR_USERINFO_RSP\020\210\010\022 \n\033MSG_TYPE"
    "_STATUSSVR_TYPE_MAX\020\377\t\022\036\n\031MSG_TYPE_PUSHS"
    "VR_TYPE_MIN\020\200\n\022\036\n\031MSG_TYPE_PUSHSVR_TYPE_"
    "MAX\020\377\013\022\036\n\031MSG_TYPE_ROOMSVR_TYPE_MIN\020\200\014\022$"
    "\n\037MSG_TYPE_ROOMSVR_DISTRIBUTE_REQ\020\201\014\022$\n\037"
    "MSG_TYPE_ROOMSVR_DISTRIBUTE_RSP\020\202\014\022%\n MS"
    "G_TYPE_ROOMSVR_CALL_CANCEL_REQ\020\203\014\022%\n MSG"
    "_TYPE_ROOMSVR_CALL_CANCEL_RSP\020\204\014\022(\n#MSG_"
    "TYPE_ROOMSVR_PARTNER_STATUS_REQ\020\205\014\022(\n#MS"
    "G_TYPE_ROOMSVR_PARTNER_STATUS_RSP\020\206\014\022&\n!"
    "MSG_TYPE_ROOMSVR_CHECK_EXPIRE_REQ\020\207\014\022(\n#"
    "MSG_TYPE_ROOMSVR_AST_PEERSTATUS_REQ\020\211\014\022("
    "\n#MSG_TYPE_ROOMSVR_AST_PEERSTATUS_RSP\020\212\014"
    "\022\'\n\"MSG_TYPE_ROOMSVR_AST_LIST_CALL_REQ\020\213"
    "\014\022\'\n\"MSG_TYPE_ROOMSVR_AST_LIST_CALL_RSP\020"
    "\214\014\022)\n$MSG_TYPE_ROOMSVR_AST_CALL_STATUS_R"
    "EQ\020\215\014\022)\n$MSG_TYPE_ROOMSVR_AST_CALL_STATU"
    "S_RSP\020\216\014\022$\n\037MSG_TYPE_ROOMSVR_VIDEO_SEND_"
    "REQ\020\221\014\022$\n\037MSG_TYPE_ROOMSVR_VIDEO_SEND_RS"
    "P\020\222\014\022$\n\037MSG_TYPE_ROOMSVR_VIDEO_RECV_REQ\020"
    "\223\014\022$\n\037MSG_TYPE_ROOMSVR_VIDEO_RECV_RSP\020\224\014"
    "\022(\n#MSG_TYPE_ROOMSVR_AST_CALL_STATE_REQ\020"
    "\225\014\022(\n#MSG_TYPE_ROOMSVR_AST_CALL_STATE_RS"
    "P\020\226\014\022&\n!MSG_TYPE_ROOMSVR_INSUFFICIENT_RE"
    "Q\020\227\014\022&\n!MSG_TYPE_ROOMSVR_INSUFFICIENT_RS"
    "P\020\230\014\022\036\n\031MSG_TYPE_ROOMSVR_TYPE_MAX\020\377\r\022!\n\034"
    "MSG_TYPE_BILLINGSVR_TYPE_MIN\020\200\020\022)\n$MSG_T"
    "YPE_BILLINGSVR_TIMERBILLING_REQ\020\203\020\022)\n$MS"
    "G_TYPE_BILLINGSVR_STARTBILLING_REQ\020\205\020\022)\n"
    "$MSG_TYPE_BILLINGSVR_STARTBILLING_RSP\020\206\020"
    "\022*\n%MSG_TYPE_BILLINGSVR_FINISHBILLING_RE"
    "Q\020\207\020\022*\n%MSG_TYPE_BILLINGSVR_FINISHBILLIN"
    "G_RSP\020\210\020\022!\n\034MSG_TYPE_BILLINGSVR_TYPE_MAX"
    "\020\377\021\022\035\n\030MSG_TYPE_AMISVR_TYPE_MIN\020\200\022\022\037\n\032MS"
    "G_TYPE_AMISVR_HANGUP_REQ\020\201\022\022\037\n\032MSG_TYPE_"
    "AMISVR_HANGUP_RSP\020\202\022\022\035\n\030MSG_TYPE_AMISVR_"
    "TYPE_MAX\020\377\023*u\n\010UserType\022\025\n\021USER_TYPE_UNK"
    "NOWN\020\000\022\025\n\021USER_TYPE_ANDROID\020\001\022\021\n\rUSER_TY"
    "PE_IOS\020\002\022\025\n\021USER_TYPE_WINDOWS\020\003\022\021\n\rUSER_"
    "TYPE_MAC\020\004*C\n\014OnlineStatus\022\031\n\025ONLINE_STA"
    "TUS_OFFLINE\020\000\022\030\n\024ONLINE_STATUS_ONLINE\020\001*"
    "\204\002\n\nRoomStatus\022\031\n\025ROOM_STATUS_NOT_EXIST\020"
    "\000\022\027\n\023ROOM_STATUS_CREATED\020\001\022!\n\035ROOM_STATU"
    "S_CALLER_REGISTERED\020\002\022\"\n\036ROOM_STATUS_PAR"
    "TNER_REGISTERED\020\003\022\036\n\032ROOM_STATUS_ALL_REG"
    "ISTERED\020\004\022!\n\035ROOM_STATUS_CALLER_START_CA"
    "LL\020\005\022\036\n\032ROOM_STATUS_CALL_CONNECTED\020\006\022\030\n\024"
    "ROOM_STATUS_FINISHED\020\007*F\n\rBillingStatus\022"
    "\030\n\024BILLING_STATUS_START\020\000\022\033\n\027BILLING_STA"
    "TUS_FINISHED\020\001*\217\001\n\rAstPeerStatus\022\033\n\027AST_"
    "PEER_STATUS_UNKNOWN\020\000\022\036\n\032AST_PEER_STATUS"
    "_REGISTERED\020\001\022 \n\034AST_PEER_STATUS_UNREGIS"
    "TERED\020\002\022\037\n\033AST_PEER_STATUS_UNREACHABLE\020\003"
    "*\252\001\n\rAstCallStatus\022\033\n\027AST_CALL_STATUS_UN"
    "KNOWN\020\000\022\037\n\033AST_CALL_STATUS_CALLPARTNER\020\001"
    "\022\036\n\032AST_CALL_STATUS_CALLCALLEE\020\002\022\035\n\031AST_"
    "CALL_STATUS_CONNECTED\020\003\022\034\n\030AST_CALL_STAT"
    "US_FINISHED\020\004*Z\n\017VideoSendStatus\022\030\n\024VIDE"
    "O_STATUS_UNKNOWN\020\000\022\025\n\021VIDEO_STATUS_OPEN\020"
    "\001\022\026\n\022VIDEO_STATUS_CLOSE\020\002*]\n\017VideoRecvRe"
    "sult\022\030\n\024VIDEO_RESULT_UNKNOWN\020\000\022\027\n\023VIDEO_"
    "RESULT_ACCEPT\020\001\022\027\n\023VIDEO_RESULT_REJECT\020\002"
    "*]\n\013AstCallRole\022\031\n\025AST_CALL_ROLE_UNKNOWN"
    "\020\000\022\031\n\025AST_CALL_ROLE_PARTNER\020\001\022\030\n\024AST_CAL"
    "L_ROLE_CALLEE\020\002*z\n\014AstCallState\022\032\n\026AST_C"
    "ALL_STATE_UNKNOWN\020\000\022\033\n\027AST_CALL_STATE_AN"
    "SWERED\020\001\022\031\n\025AST_CALL_STATE_FAILED\020\002\022\026\n\022A"
    "ST_CALL_STATE_END\020\003*\227\013\n\007RspCode\022\020\n\014RSP_C"
    "ODE_MIN\020\000\022\032\n\026RSP_CODE_CONN_TIMEDOUT\020\001\022\024\n"
    "\020RSP_CODE_APP_MIN\020e\022\025\n\020RSP_CODE_APP_MAX\020"
    "\307\001\022\033\n\026RSP_CODE_ACCESSSVR_MIN\020\311\001\022%\n RSP_C"
    "ODE_ACCESSSVR_USER_NOTEXIST\020\312\001\022\033\n\026RSP_CO"
    "DE_ACCESSSVR_MAX\020\253\002\022\032\n\025RSP_CODE_LOGINSVR"
    "_MIN\020\255\002\022$\n\037RSP_CODE_LOGINSVR_INVALID_TOK"
    "EN\020\256\002\022)\n$RSP_CODE_LOGINSVR_OPERATION_TIM"
    "EDOUT\020\257\002\022\032\n\025RSP_CODE_LOGINSVR_MAX\020\217\003\022\033\n\026"
    "RSP_CODE_STATUSSVR_MIN\020\221\003\022%\n RSP_CODE_ST"
    "ATUSSVR_ADDUSER_EXIST\020\222\003\022(\n#RSP_CODE_STA"
    "TUSSVR_DELUSER_NOTEXIST\020\223\003\022%\n RSP_CODE_S"
    "TATUSSVR_USER_NOTEXIST\020\224\003\022\033\n\026RSP_CODE_ST"
    "ATUSSVR_MAX\020\363\003\022\031\n\024RSP_CODE_PUSHSVR_MIN\020\365"
    "\003\022\031\n\024RSP_CODE_PUSHSVR_MAX\020\327\004\022\031\n\024RSP_CODE"
    "_ROOMSVR_MIN\020\331\004\022$\n\037RSP_CODE_ROOMSVR_NONE"
    "_AVAILABLE\020\332\004\022)\n$RSP_CODE_ROOMSVR_PARTNE"
    "R_UNAVAILABLE\020\333\004\022%\n RSP_CODE_ROOMSVR_INV"
    "ALID_REQUEST\020\334\004\022(\n#RSP_CODE_ROOMSVR_NO_C"
    "ALL_PROCESSING\020\335\004\022$\n\037RSP_CODE_ROOMSVR_DA"
    "TABASE_ERROR\020\336\004\022$\n\037RSP_CODE_ROOMSVR_DBUP"
    "DATE_ERROR\020\337\004\022(\n#RSP_CODE_ROOMSVR_PUSHSV"
    "R_COMM_ERROR\020\340\004\022(\n#RSP_CODE_ROOMSVR_USER"
    "SVR_COMM_ERROR\020\341\004\022*\n%RSP_CODE_ROOMSVR_ST"
    "ATUSSVR_COMM_ERROR\020\342\004\022$\n\037RSP_CODE_ROOMSV"
    "R_INVALID_CDR_ID\020\343\004\022-\n(RSP_CODE_ROOMSVR_"
    "MEDIASERVER_UNAVAILABLE\020\344\004\022\'\n\"RSP_CODE_R"
    "OOMSVR_TOO_MANY_PARTNERS\020\345\004\022%\n RSP_CODE_"
    "ROOMSVR_PARTNER_OFFLINE\020\346\004\022\'\n\"RSP_CODE_R"
    "OOMSVR_ROOM_NON_EXISTENT\020\347\004\022+\n&RSP_CODE_"
    "ROOMSVR_BILLINGSVR_COMM_ERROR\020\350\004\022\031\n\024RSP_"
    "CODE_ROOMSVR_MAX\020\273\005\022\034\n\027RSP_CODE_BILLINGS"
    "VR_MIN\020\241\006\022)\n$RSP_CODE_BILLINGSVR_CALLING"
    "_NONEXIST\020\242\006\022\033\n\026RSP_CODE_BILLINGVR_MAX\020\203"
    "\007\022\030\n\023RSP_CODE_AMISVR_MIN\020\205\007\022\'\n\"RSP_CODE_"
    "AMISVR_ROOMSVR_COMM_ERROR\020\206\007\022\027\n\022RSP_CODE"
    "_AMIVR_MAX\020\347\007B\023\n\trar.yespo\242\002\005YESPOb\006prot"
    "o3", 10002);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "yespo_protocol.proto", &protobuf_RegisterTypes);
  UserAgent::default_instance_ = new UserAgent();
  Header::default_instance_ = new Header();
  RspMsg::default_instance_ = new RspMsg();
  AppHeartbeatReq::default_instance_ = new AppHeartbeatReq();
  AppHeartbeatRsp::default_instance_ = new AppHeartbeatRsp();
  AppRepetitionLogin::default_instance_ = new AppRepetitionLogin();
  AppCalleeNotifyReq::default_instance_ = new AppCalleeNotifyReq();
  AppCallReadyReq::default_instance_ = new AppCallReadyReq();
  AppPhotoMsgReq::default_instance_ = new AppPhotoMsgReq();
  AppCallStatusReq::default_instance_ = new AppCallStatusReq();
  AppCallTerminateReq::default_instance_ = new AppCallTerminateReq();
  AppVideoSendReq::default_instance_ = new AppVideoSendReq();
  AppVideoRecvReq::default_instance_ = new AppVideoRecvReq();
  AccessSvrHeartbeatFailReq::default_instance_ = new AccessSvrHeartbeatFailReq();
  LoginSvrLoginReq::default_instance_ = new LoginSvrLoginReq();
  LoginSvrLoginRsp::default_instance_ = new LoginSvrLoginRsp();
  LoginSvrLogoutReq::default_instance_ = new LoginSvrLogoutReq();
  LoginSvrLogoutRsp::default_instance_ = new LoginSvrLogoutRsp();
  StatusSvrAdduserReq::default_instance_ = new StatusSvrAdduserReq();
  StatusSvrAdduserRsp::default_instance_ = new StatusSvrAdduserRsp();
  StatusSvrDeluserReq::default_instance_ = new StatusSvrDeluserReq();
  StatusSvrDeluserRsp::default_instance_ = new StatusSvrDeluserRsp();
  StatusSvrStatusQueryReq::default_instance_ = new StatusSvrStatusQueryReq();
  StatusSvrStatusItem::default_instance_ = new StatusSvrStatusItem();
  StatusSvrStatusQueryRsp::default_instance_ = new StatusSvrStatusQueryRsp();
  StatusSvrUserInfoReq::default_instance_ = new StatusSvrUserInfoReq();
  StatusSvrUserInfoRsp::default_instance_ = new StatusSvrUserInfoRsp();
  RoomsvrDistributeReq::default_instance_ = new RoomsvrDistributeReq();
  RoomsvrDistributeRsp::default_instance_ = new RoomsvrDistributeRsp();
  RoomsvrCallCancelReq::default_instance_ = new RoomsvrCallCancelReq();
  RoomsvrCallCancelRsp::default_instance_ = new RoomsvrCallCancelRsp();
  RoomsvrPartnerStatusReq::default_instance_ = new RoomsvrPartnerStatusReq();
  RoomsvrPartnerStatusItem::default_instance_ = new RoomsvrPartnerStatusItem();
  RoomsvrPartnerStatusRsp::default_instance_ = new RoomsvrPartnerStatusRsp();
  RoomsvrCheckExpireReq::default_instance_ = new RoomsvrCheckExpireReq();
  RoomsvrAstPeerStatusReq::default_instance_ = new RoomsvrAstPeerStatusReq();
  RoomsvrAstPeerStatusRsp::default_instance_ = new RoomsvrAstPeerStatusRsp();
  RoomsvrAstListCallReq::default_instance_ = new RoomsvrAstListCallReq();
  RoomsvrAstListCallRsp::default_instance_ = new RoomsvrAstListCallRsp();
  RoomsvrAstCallStatusReq::default_instance_ = new RoomsvrAstCallStatusReq();
  RoomsvrAstCallStatusRsp::default_instance_ = new RoomsvrAstCallStatusRsp();
  RoomsvrVideoSendReq::default_instance_ = new RoomsvrVideoSendReq();
  RoomsvrVideoSendRsp::default_instance_ = new RoomsvrVideoSendRsp();
  RoomsvrVideoRecvReq::default_instance_ = new RoomsvrVideoRecvReq();
  RoomsvrVideoRecvRsp::default_instance_ = new RoomsvrVideoRecvRsp();
  RoomsvrAstCallStateReq::default_instance_ = new RoomsvrAstCallStateReq();
  RoomsvrAstCallStateRsp::default_instance_ = new RoomsvrAstCallStateRsp();
  RoomsvrInsufficientReq::default_instance_ = new RoomsvrInsufficientReq();
  RoomsvrInsufficientRsp::default_instance_ = new RoomsvrInsufficientRsp();
  BillingSvrTimerBillingReq::default_instance_ = new BillingSvrTimerBillingReq();
  BillingSvrStartBillingReq::default_instance_ = new BillingSvrStartBillingReq();
  BillingSvrStartBillingRsp::default_instance_ = new BillingSvrStartBillingRsp();
  BillingSvrFinishBillingReq::default_instance_ = new BillingSvrFinishBillingReq();
  BillingSvrFinishBillingRsp::default_instance_ = new BillingSvrFinishBillingRsp();
  AmiSvrHangupReq::default_instance_ = new AmiSvrHangupReq();
  AmiSvrHangupRsp::default_instance_ = new AmiSvrHangupRsp();
  UserAgent::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  RspMsg::default_instance_->InitAsDefaultInstance();
  AppHeartbeatReq::default_instance_->InitAsDefaultInstance();
  AppHeartbeatRsp::default_instance_->InitAsDefaultInstance();
  AppRepetitionLogin::default_instance_->InitAsDefaultInstance();
  AppCalleeNotifyReq::default_instance_->InitAsDefaultInstance();
  AppCallReadyReq::default_instance_->InitAsDefaultInstance();
  AppPhotoMsgReq::default_instance_->InitAsDefaultInstance();
  AppCallStatusReq::default_instance_->InitAsDefaultInstance();
  AppCallTerminateReq::default_instance_->InitAsDefaultInstance();
  AppVideoSendReq::default_instance_->InitAsDefaultInstance();
  AppVideoRecvReq::default_instance_->InitAsDefaultInstance();
  AccessSvrHeartbeatFailReq::default_instance_->InitAsDefaultInstance();
  LoginSvrLoginReq::default_instance_->InitAsDefaultInstance();
  LoginSvrLoginRsp::default_instance_->InitAsDefaultInstance();
  LoginSvrLogoutReq::default_instance_->InitAsDefaultInstance();
  LoginSvrLogoutRsp::default_instance_->InitAsDefaultInstance();
  StatusSvrAdduserReq::default_instance_->InitAsDefaultInstance();
  StatusSvrAdduserRsp::default_instance_->InitAsDefaultInstance();
  StatusSvrDeluserReq::default_instance_->InitAsDefaultInstance();
  StatusSvrDeluserRsp::default_instance_->InitAsDefaultInstance();
  StatusSvrStatusQueryReq::default_instance_->InitAsDefaultInstance();
  StatusSvrStatusItem::default_instance_->InitAsDefaultInstance();
  StatusSvrStatusQueryRsp::default_instance_->InitAsDefaultInstance();
  StatusSvrUserInfoReq::default_instance_->InitAsDefaultInstance();
  StatusSvrUserInfoRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrDistributeReq::default_instance_->InitAsDefaultInstance();
  RoomsvrDistributeRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrCallCancelReq::default_instance_->InitAsDefaultInstance();
  RoomsvrCallCancelRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrPartnerStatusReq::default_instance_->InitAsDefaultInstance();
  RoomsvrPartnerStatusItem::default_instance_->InitAsDefaultInstance();
  RoomsvrPartnerStatusRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrCheckExpireReq::default_instance_->InitAsDefaultInstance();
  RoomsvrAstPeerStatusReq::default_instance_->InitAsDefaultInstance();
  RoomsvrAstPeerStatusRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrAstListCallReq::default_instance_->InitAsDefaultInstance();
  RoomsvrAstListCallRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrAstCallStatusReq::default_instance_->InitAsDefaultInstance();
  RoomsvrAstCallStatusRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrVideoSendReq::default_instance_->InitAsDefaultInstance();
  RoomsvrVideoSendRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrVideoRecvReq::default_instance_->InitAsDefaultInstance();
  RoomsvrVideoRecvRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrAstCallStateReq::default_instance_->InitAsDefaultInstance();
  RoomsvrAstCallStateRsp::default_instance_->InitAsDefaultInstance();
  RoomsvrInsufficientReq::default_instance_->InitAsDefaultInstance();
  RoomsvrInsufficientRsp::default_instance_->InitAsDefaultInstance();
  BillingSvrTimerBillingReq::default_instance_->InitAsDefaultInstance();
  BillingSvrStartBillingReq::default_instance_->InitAsDefaultInstance();
  BillingSvrStartBillingRsp::default_instance_->InitAsDefaultInstance();
  BillingSvrFinishBillingReq::default_instance_->InitAsDefaultInstance();
  BillingSvrFinishBillingRsp::default_instance_->InitAsDefaultInstance();
  AmiSvrHangupReq::default_instance_->InitAsDefaultInstance();
  AmiSvrHangupRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_yespo_5fprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_yespo_5fprotocol_2eproto {
  StaticDescriptorInitializer_yespo_5fprotocol_2eproto() {
    protobuf_AddDesc_yespo_5fprotocol_2eproto();
  }
} static_descriptor_initializer_yespo_5fprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeType_descriptor_;
}
bool NodeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgType_descriptor_;
}
bool MsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 256:
    case 257:
    case 258:
    case 259:
    case 261:
    case 263:
    case 265:
    case 267:
    case 269:
    case 271:
    case 273:
    case 511:
    case 512:
    case 515:
    case 767:
    case 768:
    case 769:
    case 770:
    case 771:
    case 772:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1279:
    case 1280:
    case 1535:
    case 1536:
    case 1537:
    case 1538:
    case 1539:
    case 1540:
    case 1541:
    case 1542:
    case 1543:
    case 1545:
    case 1546:
    case 1547:
    case 1548:
    case 1549:
    case 1550:
    case 1553:
    case 1554:
    case 1555:
    case 1556:
    case 1557:
    case 1558:
    case 1559:
    case 1560:
    case 1791:
    case 2048:
    case 2051:
    case 2053:
    case 2054:
    case 2055:
    case 2056:
    case 2303:
    case 2304:
    case 2305:
    case 2306:
    case 2559:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserType_descriptor_;
}
bool UserType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OnlineStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineStatus_descriptor_;
}
bool OnlineStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoomStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomStatus_descriptor_;
}
bool RoomStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* BillingStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingStatus_descriptor_;
}
bool BillingStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AstPeerStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstPeerStatus_descriptor_;
}
bool AstPeerStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AstCallStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstCallStatus_descriptor_;
}
bool AstCallStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoSendStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoSendStatus_descriptor_;
}
bool VideoSendStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* VideoRecvResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoRecvResult_descriptor_;
}
bool VideoRecvResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AstCallRole_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstCallRole_descriptor_;
}
bool AstCallRole_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AstCallState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstCallState_descriptor_;
}
bool AstCallState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RspCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspCode_descriptor_;
}
bool RspCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 101:
    case 199:
    case 201:
    case 202:
    case 299:
    case 301:
    case 302:
    case 303:
    case 399:
    case 401:
    case 402:
    case 403:
    case 404:
    case 499:
    case 501:
    case 599:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 610:
    case 611:
    case 612:
    case 613:
    case 614:
    case 615:
    case 616:
    case 699:
    case 801:
    case 802:
    case 899:
    case 901:
    case 902:
    case 999:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int UserAgent::kOsTypeFieldNumber;
const int UserAgent::kOsVerFieldNumber;
const int UserAgent::kModelFieldNumber;
const int UserAgent::kClientVerFieldNumber;
const int UserAgent::kCarrierOperatorFieldNumber;
#endif  // !_MSC_VER

UserAgent::UserAgent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.UserAgent)
}

void UserAgent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

UserAgent::UserAgent(const UserAgent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.UserAgent)
}

void UserAgent::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  os_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_operator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UserAgent::~UserAgent() {
  // @@protoc_insertion_point(destructor:yespo.UserAgent)
  SharedDtor();
}

void UserAgent::SharedDtor() {
  os_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_operator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UserAgent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAgent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAgent_descriptor_;
}

const UserAgent& UserAgent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

UserAgent* UserAgent::default_instance_ = NULL;

UserAgent* UserAgent::New(::google::protobuf::Arena* arena) const {
  UserAgent* n = new UserAgent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserAgent::Clear() {
  os_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrier_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool UserAgent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.UserAgent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string os_type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_type().data(), this->os_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.UserAgent.os_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_os_ver;
        break;
      }

      // optional string os_ver = 2;
      case 2: {
        if (tag == 18) {
         parse_os_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_ver().data(), this->os_ver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.UserAgent.os_ver"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.UserAgent.model"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_client_ver;
        break;
      }

      // optional string client_ver = 4;
      case 4: {
        if (tag == 34) {
         parse_client_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_ver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_ver().data(), this->client_ver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.UserAgent.client_ver"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_carrier_operator;
        break;
      }

      // optional string carrier_operator = 5;
      case 5: {
        if (tag == 42) {
         parse_carrier_operator:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrier_operator()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->carrier_operator().data(), this->carrier_operator().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.UserAgent.carrier_operator"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.UserAgent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.UserAgent)
  return false;
#undef DO_
}

void UserAgent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.UserAgent)
  // optional string os_type = 1;
  if (this->os_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.os_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->os_type(), output);
  }

  // optional string os_ver = 2;
  if (this->os_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.os_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->os_ver(), output);
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string client_ver = 4;
  if (this->client_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.client_ver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client_ver(), output);
  }

  // optional string carrier_operator = 5;
  if (this->carrier_operator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.carrier_operator");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->carrier_operator(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.UserAgent)
}

::google::protobuf::uint8* UserAgent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.UserAgent)
  // optional string os_type = 1;
  if (this->os_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_type().data(), this->os_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.os_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->os_type(), target);
  }

  // optional string os_ver = 2;
  if (this->os_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_ver().data(), this->os_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.os_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->os_ver(), target);
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string client_ver = 4;
  if (this->client_ver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_ver().data(), this->client_ver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.client_ver");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_ver(), target);
  }

  // optional string carrier_operator = 5;
  if (this->carrier_operator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->carrier_operator().data(), this->carrier_operator().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.UserAgent.carrier_operator");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->carrier_operator(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.UserAgent)
  return target;
}

int UserAgent::ByteSize() const {
  int total_size = 0;

  // optional string os_type = 1;
  if (this->os_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_type());
  }

  // optional string os_ver = 2;
  if (this->os_ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_ver());
  }

  // optional string model = 3;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // optional string client_ver = 4;
  if (this->client_ver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_ver());
  }

  // optional string carrier_operator = 5;
  if (this->carrier_operator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->carrier_operator());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAgent::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserAgent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserAgent>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAgent::MergeFrom(const UserAgent& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.os_type().size() > 0) {

    os_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_type_);
  }
  if (from.os_ver().size() > 0) {

    os_ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_ver_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.client_ver().size() > 0) {

    client_ver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_ver_);
  }
  if (from.carrier_operator().size() > 0) {

    carrier_operator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.carrier_operator_);
  }
}

void UserAgent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAgent::CopyFrom(const UserAgent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAgent::IsInitialized() const {

  return true;
}

void UserAgent::Swap(UserAgent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserAgent::InternalSwap(UserAgent* other) {
  os_type_.Swap(&other->os_type_);
  os_ver_.Swap(&other->os_ver_);
  model_.Swap(&other->model_);
  client_ver_.Swap(&other->client_ver_);
  carrier_operator_.Swap(&other->carrier_operator_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserAgent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAgent_descriptor_;
  metadata.reflection = UserAgent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserAgent

// optional string os_type = 1;
void UserAgent::clear_os_type() {
  os_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserAgent::os_type() const {
  // @@protoc_insertion_point(field_get:yespo.UserAgent.os_type)
  return os_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_os_type(const ::std::string& value) {
  
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.UserAgent.os_type)
}
 void UserAgent::set_os_type(const char* value) {
  
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.UserAgent.os_type)
}
 void UserAgent::set_os_type(const char* value, size_t size) {
  
  os_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.UserAgent.os_type)
}
 ::std::string* UserAgent::mutable_os_type() {
  
  // @@protoc_insertion_point(field_mutable:yespo.UserAgent.os_type)
  return os_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserAgent::release_os_type() {
  
  return os_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_allocated_os_type(::std::string* os_type) {
  if (os_type != NULL) {
    
  } else {
    
  }
  os_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_type);
  // @@protoc_insertion_point(field_set_allocated:yespo.UserAgent.os_type)
}

// optional string os_ver = 2;
void UserAgent::clear_os_ver() {
  os_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserAgent::os_ver() const {
  // @@protoc_insertion_point(field_get:yespo.UserAgent.os_ver)
  return os_ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_os_ver(const ::std::string& value) {
  
  os_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.UserAgent.os_ver)
}
 void UserAgent::set_os_ver(const char* value) {
  
  os_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.UserAgent.os_ver)
}
 void UserAgent::set_os_ver(const char* value, size_t size) {
  
  os_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.UserAgent.os_ver)
}
 ::std::string* UserAgent::mutable_os_ver() {
  
  // @@protoc_insertion_point(field_mutable:yespo.UserAgent.os_ver)
  return os_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserAgent::release_os_ver() {
  
  return os_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_allocated_os_ver(::std::string* os_ver) {
  if (os_ver != NULL) {
    
  } else {
    
  }
  os_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_ver);
  // @@protoc_insertion_point(field_set_allocated:yespo.UserAgent.os_ver)
}

// optional string model = 3;
void UserAgent::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserAgent::model() const {
  // @@protoc_insertion_point(field_get:yespo.UserAgent.model)
  return model_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.UserAgent.model)
}
 void UserAgent::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.UserAgent.model)
}
 void UserAgent::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.UserAgent.model)
}
 ::std::string* UserAgent::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:yespo.UserAgent.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserAgent::release_model() {
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:yespo.UserAgent.model)
}

// optional string client_ver = 4;
void UserAgent::clear_client_ver() {
  client_ver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserAgent::client_ver() const {
  // @@protoc_insertion_point(field_get:yespo.UserAgent.client_ver)
  return client_ver_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_client_ver(const ::std::string& value) {
  
  client_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.UserAgent.client_ver)
}
 void UserAgent::set_client_ver(const char* value) {
  
  client_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.UserAgent.client_ver)
}
 void UserAgent::set_client_ver(const char* value, size_t size) {
  
  client_ver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.UserAgent.client_ver)
}
 ::std::string* UserAgent::mutable_client_ver() {
  
  // @@protoc_insertion_point(field_mutable:yespo.UserAgent.client_ver)
  return client_ver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserAgent::release_client_ver() {
  
  return client_ver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_allocated_client_ver(::std::string* client_ver) {
  if (client_ver != NULL) {
    
  } else {
    
  }
  client_ver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_ver);
  // @@protoc_insertion_point(field_set_allocated:yespo.UserAgent.client_ver)
}

// optional string carrier_operator = 5;
void UserAgent::clear_carrier_operator() {
  carrier_operator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& UserAgent::carrier_operator() const {
  // @@protoc_insertion_point(field_get:yespo.UserAgent.carrier_operator)
  return carrier_operator_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_carrier_operator(const ::std::string& value) {
  
  carrier_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.UserAgent.carrier_operator)
}
 void UserAgent::set_carrier_operator(const char* value) {
  
  carrier_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.UserAgent.carrier_operator)
}
 void UserAgent::set_carrier_operator(const char* value, size_t size) {
  
  carrier_operator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.UserAgent.carrier_operator)
}
 ::std::string* UserAgent::mutable_carrier_operator() {
  
  // @@protoc_insertion_point(field_mutable:yespo.UserAgent.carrier_operator)
  return carrier_operator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UserAgent::release_carrier_operator() {
  
  return carrier_operator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UserAgent::set_allocated_carrier_operator(::std::string* carrier_operator) {
  if (carrier_operator != NULL) {
    
  } else {
    
  }
  carrier_operator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), carrier_operator);
  // @@protoc_insertion_point(field_set_allocated:yespo.UserAgent.carrier_operator)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Header::kMsgTypeFieldNumber;
const int Header::kMsgIdFieldNumber;
const int Header::kUserIdFieldNumber;
const int Header::kUserAgentFieldNumber;
const int Header::kTimestampFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.Header)
}

void Header::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  user_agent_ = const_cast< ::yespo::UserAgent*>(&::yespo::UserAgent::default_instance());
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.Header)
}

void Header::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  msg_type_ = 0;
  msg_id_ = GOOGLE_ULONGLONG(0);
  user_id_ = GOOGLE_ULONGLONG(0);
  user_agent_ = NULL;
  timestamp_ = GOOGLE_ULONGLONG(0);
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:yespo.Header)
  SharedDtor();
}

void Header::SharedDtor() {
  if (this != default_instance_) {
    delete user_agent_;
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(msg_id_, user_id_);
  ZR_(timestamp_, msg_type_);
  if (GetArenaNoVirtual() == NULL && user_agent_ != NULL) delete user_agent_;
  user_agent_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 msg_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_msg_id;
        break;
      }

      // optional uint64 msg_id = 2;
      case 2: {
        if (tag == 16) {
         parse_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msg_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 3;
      case 3: {
        if (tag == 24) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user_agent;
        break;
      }

      // optional .yespo.UserAgent user_agent = 4;
      case 4: {
        if (tag == 34) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // optional uint64 timestamp = 5;
      case 5: {
        if (tag == 40) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.Header)
  // optional int32 msg_type = 1;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_type(), output);
  }

  // optional uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msg_id(), output);
  }

  // optional uint64 user_id = 3;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->user_id(), output);
  }

  // optional .yespo.UserAgent user_agent = 4;
  if (this->has_user_agent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->user_agent_, output);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.Header)
  // optional int32 msg_type = 1;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_type(), target);
  }

  // optional uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msg_id(), target);
  }

  // optional uint64 user_id = 3;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->user_id(), target);
  }

  // optional .yespo.UserAgent user_agent = 4;
  if (this->has_user_agent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, *this->user_agent_, target);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.Header)
  return target;
}

int Header::ByteSize() const {
  int total_size = 0;

  // optional int32 msg_type = 1;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // optional uint64 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->msg_id());
  }

  // optional uint64 user_id = 3;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional .yespo.UserAgent user_agent = 4;
  if (this->has_user_agent()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_agent_);
  }

  // optional uint64 timestamp = 5;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.has_user_agent()) {
    mutable_user_agent()->::yespo::UserAgent::MergeFrom(from.user_agent());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {

  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  std::swap(msg_type_, other->msg_type_);
  std::swap(msg_id_, other->msg_id_);
  std::swap(user_id_, other->user_id_);
  std::swap(user_agent_, other->user_agent_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// optional int32 msg_type = 1;
void Header::clear_msg_type() {
  msg_type_ = 0;
}
 ::google::protobuf::int32 Header::msg_type() const {
  // @@protoc_insertion_point(field_get:yespo.Header.msg_type)
  return msg_type_;
}
 void Header::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.Header.msg_type)
}

// optional uint64 msg_id = 2;
void Header::clear_msg_id() {
  msg_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Header::msg_id() const {
  // @@protoc_insertion_point(field_get:yespo.Header.msg_id)
  return msg_id_;
}
 void Header::set_msg_id(::google::protobuf::uint64 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.Header.msg_id)
}

// optional uint64 user_id = 3;
void Header::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Header::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.Header.user_id)
  return user_id_;
}
 void Header::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.Header.user_id)
}

// optional .yespo.UserAgent user_agent = 4;
bool Header::has_user_agent() const {
  return !_is_default_instance_ && user_agent_ != NULL;
}
void Header::clear_user_agent() {
  if (GetArenaNoVirtual() == NULL && user_agent_ != NULL) delete user_agent_;
  user_agent_ = NULL;
}
const ::yespo::UserAgent& Header::user_agent() const {
  // @@protoc_insertion_point(field_get:yespo.Header.user_agent)
  return user_agent_ != NULL ? *user_agent_ : *default_instance_->user_agent_;
}
::yespo::UserAgent* Header::mutable_user_agent() {
  
  if (user_agent_ == NULL) {
    user_agent_ = new ::yespo::UserAgent;
  }
  // @@protoc_insertion_point(field_mutable:yespo.Header.user_agent)
  return user_agent_;
}
::yespo::UserAgent* Header::release_user_agent() {
  
  ::yespo::UserAgent* temp = user_agent_;
  user_agent_ = NULL;
  return temp;
}
void Header::set_allocated_user_agent(::yespo::UserAgent* user_agent) {
  delete user_agent_;
  user_agent_ = user_agent;
  if (user_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.Header.user_agent)
}

// optional uint64 timestamp = 5;
void Header::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Header::timestamp() const {
  // @@protoc_insertion_point(field_get:yespo.Header.timestamp)
  return timestamp_;
}
 void Header::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:yespo.Header.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RspMsg::kRspCodeFieldNumber;
const int RspMsg::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RspMsg::RspMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RspMsg)
}

void RspMsg::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RspMsg::RspMsg(const RspMsg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RspMsg)
}

void RspMsg::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_code_ = 0;
  rsp_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RspMsg::~RspMsg() {
  // @@protoc_insertion_point(destructor:yespo.RspMsg)
  SharedDtor();
}

void RspMsg::SharedDtor() {
  rsp_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RspMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspMsg_descriptor_;
}

const RspMsg& RspMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RspMsg* RspMsg::default_instance_ = NULL;

RspMsg* RspMsg::New(::google::protobuf::Arena* arena) const {
  RspMsg* n = new RspMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RspMsg::Clear() {
  rsp_code_ = 0;
  rsp_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RspMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RspMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rsp_code = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsp_code_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_rsp_msg;
        break;
      }

      // optional string rsp_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_rsp_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rsp_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->rsp_msg().data(), this->rsp_msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RspMsg.rsp_msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RspMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RspMsg)
  return false;
#undef DO_
}

void RspMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RspMsg)
  // optional int32 rsp_code = 1;
  if (this->rsp_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rsp_code(), output);
  }

  // optional string rsp_msg = 2;
  if (this->rsp_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp_msg().data(), this->rsp_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RspMsg.rsp_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->rsp_msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RspMsg)
}

::google::protobuf::uint8* RspMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RspMsg)
  // optional int32 rsp_code = 1;
  if (this->rsp_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rsp_code(), target);
  }

  // optional string rsp_msg = 2;
  if (this->rsp_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->rsp_msg().data(), this->rsp_msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RspMsg.rsp_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rsp_msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RspMsg)
  return target;
}

int RspMsg::ByteSize() const {
  int total_size = 0;

  // optional int32 rsp_code = 1;
  if (this->rsp_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rsp_code());
  }

  // optional string rsp_msg = 2;
  if (this->rsp_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->rsp_msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspMsg::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RspMsg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RspMsg>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspMsg::MergeFrom(const RspMsg& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.rsp_code() != 0) {
    set_rsp_code(from.rsp_code());
  }
  if (from.rsp_msg().size() > 0) {

    rsp_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rsp_msg_);
  }
}

void RspMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspMsg::CopyFrom(const RspMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspMsg::IsInitialized() const {

  return true;
}

void RspMsg::Swap(RspMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RspMsg::InternalSwap(RspMsg* other) {
  std::swap(rsp_code_, other->rsp_code_);
  rsp_msg_.Swap(&other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RspMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspMsg_descriptor_;
  metadata.reflection = RspMsg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RspMsg

// optional int32 rsp_code = 1;
void RspMsg::clear_rsp_code() {
  rsp_code_ = 0;
}
 ::google::protobuf::int32 RspMsg::rsp_code() const {
  // @@protoc_insertion_point(field_get:yespo.RspMsg.rsp_code)
  return rsp_code_;
}
 void RspMsg::set_rsp_code(::google::protobuf::int32 value) {
  
  rsp_code_ = value;
  // @@protoc_insertion_point(field_set:yespo.RspMsg.rsp_code)
}

// optional string rsp_msg = 2;
void RspMsg::clear_rsp_msg() {
  rsp_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RspMsg::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RspMsg.rsp_msg)
  return rsp_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RspMsg::set_rsp_msg(const ::std::string& value) {
  
  rsp_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RspMsg.rsp_msg)
}
 void RspMsg::set_rsp_msg(const char* value) {
  
  rsp_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RspMsg.rsp_msg)
}
 void RspMsg::set_rsp_msg(const char* value, size_t size) {
  
  rsp_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RspMsg.rsp_msg)
}
 ::std::string* RspMsg::mutable_rsp_msg() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RspMsg.rsp_msg)
  return rsp_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RspMsg::release_rsp_msg() {
  
  return rsp_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RspMsg::set_allocated_rsp_msg(::std::string* rsp_msg) {
  if (rsp_msg != NULL) {
    
  } else {
    
  }
  rsp_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_msg);
  // @@protoc_insertion_point(field_set_allocated:yespo.RspMsg.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppHeartbeatReq::kTimestampFieldNumber;
#endif  // !_MSC_VER

AppHeartbeatReq::AppHeartbeatReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppHeartbeatReq)
}

void AppHeartbeatReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppHeartbeatReq::AppHeartbeatReq(const AppHeartbeatReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppHeartbeatReq)
}

void AppHeartbeatReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  timestamp_ = 0;
}

AppHeartbeatReq::~AppHeartbeatReq() {
  // @@protoc_insertion_point(destructor:yespo.AppHeartbeatReq)
  SharedDtor();
}

void AppHeartbeatReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppHeartbeatReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppHeartbeatReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppHeartbeatReq_descriptor_;
}

const AppHeartbeatReq& AppHeartbeatReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppHeartbeatReq* AppHeartbeatReq::default_instance_ = NULL;

AppHeartbeatReq* AppHeartbeatReq::New(::google::protobuf::Arena* arena) const {
  AppHeartbeatReq* n = new AppHeartbeatReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppHeartbeatReq::Clear() {
  timestamp_ = 0;
}

bool AppHeartbeatReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppHeartbeatReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 timestamp = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppHeartbeatReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppHeartbeatReq)
  return false;
#undef DO_
}

void AppHeartbeatReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppHeartbeatReq)
  // optional int32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppHeartbeatReq)
}

::google::protobuf::uint8* AppHeartbeatReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppHeartbeatReq)
  // optional int32 timestamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppHeartbeatReq)
  return target;
}

int AppHeartbeatReq::ByteSize() const {
  int total_size = 0;

  // optional int32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppHeartbeatReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppHeartbeatReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppHeartbeatReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppHeartbeatReq::MergeFrom(const AppHeartbeatReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AppHeartbeatReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppHeartbeatReq::CopyFrom(const AppHeartbeatReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppHeartbeatReq::IsInitialized() const {

  return true;
}

void AppHeartbeatReq::Swap(AppHeartbeatReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppHeartbeatReq::InternalSwap(AppHeartbeatReq* other) {
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppHeartbeatReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppHeartbeatReq_descriptor_;
  metadata.reflection = AppHeartbeatReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppHeartbeatReq

// optional int32 timestamp = 1;
void AppHeartbeatReq::clear_timestamp() {
  timestamp_ = 0;
}
 ::google::protobuf::int32 AppHeartbeatReq::timestamp() const {
  // @@protoc_insertion_point(field_get:yespo.AppHeartbeatReq.timestamp)
  return timestamp_;
}
 void AppHeartbeatReq::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppHeartbeatReq.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppHeartbeatRsp::kRspMsgFieldNumber;
const int AppHeartbeatRsp::kTimestampFieldNumber;
#endif  // !_MSC_VER

AppHeartbeatRsp::AppHeartbeatRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppHeartbeatRsp)
}

void AppHeartbeatRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

AppHeartbeatRsp::AppHeartbeatRsp(const AppHeartbeatRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppHeartbeatRsp)
}

void AppHeartbeatRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  timestamp_ = 0;
}

AppHeartbeatRsp::~AppHeartbeatRsp() {
  // @@protoc_insertion_point(destructor:yespo.AppHeartbeatRsp)
  SharedDtor();
}

void AppHeartbeatRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void AppHeartbeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppHeartbeatRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppHeartbeatRsp_descriptor_;
}

const AppHeartbeatRsp& AppHeartbeatRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppHeartbeatRsp* AppHeartbeatRsp::default_instance_ = NULL;

AppHeartbeatRsp* AppHeartbeatRsp::New(::google::protobuf::Arena* arena) const {
  AppHeartbeatRsp* n = new AppHeartbeatRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppHeartbeatRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  timestamp_ = 0;
}

bool AppHeartbeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppHeartbeatRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timestamp;
        break;
      }

      // optional int32 timestamp = 2;
      case 2: {
        if (tag == 16) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppHeartbeatRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppHeartbeatRsp)
  return false;
#undef DO_
}

void AppHeartbeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppHeartbeatRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // optional int32 timestamp = 2;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppHeartbeatRsp)
}

::google::protobuf::uint8* AppHeartbeatRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppHeartbeatRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // optional int32 timestamp = 2;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppHeartbeatRsp)
  return target;
}

int AppHeartbeatRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // optional int32 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppHeartbeatRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppHeartbeatRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppHeartbeatRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppHeartbeatRsp::MergeFrom(const AppHeartbeatRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void AppHeartbeatRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppHeartbeatRsp::CopyFrom(const AppHeartbeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppHeartbeatRsp::IsInitialized() const {

  return true;
}

void AppHeartbeatRsp::Swap(AppHeartbeatRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppHeartbeatRsp::InternalSwap(AppHeartbeatRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  std::swap(timestamp_, other->timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppHeartbeatRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppHeartbeatRsp_descriptor_;
  metadata.reflection = AppHeartbeatRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppHeartbeatRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool AppHeartbeatRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void AppHeartbeatRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& AppHeartbeatRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.AppHeartbeatRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* AppHeartbeatRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.AppHeartbeatRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* AppHeartbeatRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void AppHeartbeatRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.AppHeartbeatRsp.rsp_msg)
}

// optional int32 timestamp = 2;
void AppHeartbeatRsp::clear_timestamp() {
  timestamp_ = 0;
}
 ::google::protobuf::int32 AppHeartbeatRsp::timestamp() const {
  // @@protoc_insertion_point(field_get:yespo.AppHeartbeatRsp.timestamp)
  return timestamp_;
}
 void AppHeartbeatRsp::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppHeartbeatRsp.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppRepetitionLogin::kUserIdFieldNumber;
const int AppRepetitionLogin::kUserTypeFieldNumber;
const int AppRepetitionLogin::kDeviceTokenFieldNumber;
const int AppRepetitionLogin::kAccesssvrIpFieldNumber;
const int AppRepetitionLogin::kAccesssvrPortFieldNumber;
const int AppRepetitionLogin::kAccesssvrSockFieldNumber;
#endif  // !_MSC_VER

AppRepetitionLogin::AppRepetitionLogin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppRepetitionLogin)
}

void AppRepetitionLogin::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppRepetitionLogin::AppRepetitionLogin(const AppRepetitionLogin& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppRepetitionLogin)
}

void AppRepetitionLogin::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0u;
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_port_ = 0u;
  accesssvr_sock_ = 0u;
}

AppRepetitionLogin::~AppRepetitionLogin() {
  // @@protoc_insertion_point(destructor:yespo.AppRepetitionLogin)
  SharedDtor();
}

void AppRepetitionLogin::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AppRepetitionLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppRepetitionLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppRepetitionLogin_descriptor_;
}

const AppRepetitionLogin& AppRepetitionLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppRepetitionLogin* AppRepetitionLogin::default_instance_ = NULL;

AppRepetitionLogin* AppRepetitionLogin::New(::google::protobuf::Arena* arena) const {
  AppRepetitionLogin* n = new AppRepetitionLogin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppRepetitionLogin::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppRepetitionLogin*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_type_, accesssvr_port_);
  user_id_ = GOOGLE_ULONGLONG(0);
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_sock_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool AppRepetitionLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppRepetitionLogin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_type;
        break;
      }

      // optional uint32 user_type = 2;
      case 2: {
        if (tag == 16) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_token;
        break;
      }

      // optional string device_token = 3;
      case 3: {
        if (tag == 26) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppRepetitionLogin.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accesssvr_ip;
        break;
      }

      // optional string accesssvr_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_accesssvr_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssvr_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesssvr_ip().data(), this->accesssvr_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppRepetitionLogin.accesssvr_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accesssvr_port;
        break;
      }

      // optional uint32 accesssvr_port = 5;
      case 5: {
        if (tag == 40) {
         parse_accesssvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accesssvr_sock;
        break;
      }

      // optional uint32 accesssvr_sock = 6;
      case 6: {
        if (tag == 48) {
         parse_accesssvr_sock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_sock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppRepetitionLogin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppRepetitionLogin)
  return false;
#undef DO_
}

void AppRepetitionLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppRepetitionLogin)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_type(), output);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppRepetitionLogin.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_token(), output);
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppRepetitionLogin.accesssvr_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accesssvr_ip(), output);
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accesssvr_port(), output);
  }

  // optional uint32 accesssvr_sock = 6;
  if (this->accesssvr_sock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accesssvr_sock(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppRepetitionLogin)
}

::google::protobuf::uint8* AppRepetitionLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppRepetitionLogin)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_type(), target);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppRepetitionLogin.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_token(), target);
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppRepetitionLogin.accesssvr_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accesssvr_ip(), target);
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accesssvr_port(), target);
  }

  // optional uint32 accesssvr_sock = 6;
  if (this->accesssvr_sock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accesssvr_sock(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppRepetitionLogin)
  return target;
}

int AppRepetitionLogin::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesssvr_ip());
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_port());
  }

  // optional uint32 accesssvr_sock = 6;
  if (this->accesssvr_sock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_sock());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppRepetitionLogin::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppRepetitionLogin* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppRepetitionLogin>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppRepetitionLogin::MergeFrom(const AppRepetitionLogin& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.accesssvr_ip().size() > 0) {

    accesssvr_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesssvr_ip_);
  }
  if (from.accesssvr_port() != 0) {
    set_accesssvr_port(from.accesssvr_port());
  }
  if (from.accesssvr_sock() != 0) {
    set_accesssvr_sock(from.accesssvr_sock());
  }
}

void AppRepetitionLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppRepetitionLogin::CopyFrom(const AppRepetitionLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppRepetitionLogin::IsInitialized() const {

  return true;
}

void AppRepetitionLogin::Swap(AppRepetitionLogin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppRepetitionLogin::InternalSwap(AppRepetitionLogin* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  device_token_.Swap(&other->device_token_);
  accesssvr_ip_.Swap(&other->accesssvr_ip_);
  std::swap(accesssvr_port_, other->accesssvr_port_);
  std::swap(accesssvr_sock_, other->accesssvr_sock_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppRepetitionLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppRepetitionLogin_descriptor_;
  metadata.reflection = AppRepetitionLogin_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppRepetitionLogin

// optional uint64 user_id = 1;
void AppRepetitionLogin::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppRepetitionLogin::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.user_id)
  return user_id_;
}
 void AppRepetitionLogin::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.user_id)
}

// optional uint32 user_type = 2;
void AppRepetitionLogin::clear_user_type() {
  user_type_ = 0u;
}
 ::google::protobuf::uint32 AppRepetitionLogin::user_type() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.user_type)
  return user_type_;
}
 void AppRepetitionLogin::set_user_type(::google::protobuf::uint32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.user_type)
}

// optional string device_token = 3;
void AppRepetitionLogin::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppRepetitionLogin::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppRepetitionLogin::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.device_token)
}
 void AppRepetitionLogin::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppRepetitionLogin.device_token)
}
 void AppRepetitionLogin::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppRepetitionLogin.device_token)
}
 ::std::string* AppRepetitionLogin::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppRepetitionLogin.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppRepetitionLogin::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppRepetitionLogin::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppRepetitionLogin.device_token)
}

// optional string accesssvr_ip = 4;
void AppRepetitionLogin::clear_accesssvr_ip() {
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppRepetitionLogin::accesssvr_ip() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.accesssvr_ip)
  return accesssvr_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppRepetitionLogin::set_accesssvr_ip(const ::std::string& value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.accesssvr_ip)
}
 void AppRepetitionLogin::set_accesssvr_ip(const char* value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppRepetitionLogin.accesssvr_ip)
}
 void AppRepetitionLogin::set_accesssvr_ip(const char* value, size_t size) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppRepetitionLogin.accesssvr_ip)
}
 ::std::string* AppRepetitionLogin::mutable_accesssvr_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppRepetitionLogin.accesssvr_ip)
  return accesssvr_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppRepetitionLogin::release_accesssvr_ip() {
  
  return accesssvr_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppRepetitionLogin::set_allocated_accesssvr_ip(::std::string* accesssvr_ip) {
  if (accesssvr_ip != NULL) {
    
  } else {
    
  }
  accesssvr_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesssvr_ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppRepetitionLogin.accesssvr_ip)
}

// optional uint32 accesssvr_port = 5;
void AppRepetitionLogin::clear_accesssvr_port() {
  accesssvr_port_ = 0u;
}
 ::google::protobuf::uint32 AppRepetitionLogin::accesssvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.accesssvr_port)
  return accesssvr_port_;
}
 void AppRepetitionLogin::set_accesssvr_port(::google::protobuf::uint32 value) {
  
  accesssvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.accesssvr_port)
}

// optional uint32 accesssvr_sock = 6;
void AppRepetitionLogin::clear_accesssvr_sock() {
  accesssvr_sock_ = 0u;
}
 ::google::protobuf::uint32 AppRepetitionLogin::accesssvr_sock() const {
  // @@protoc_insertion_point(field_get:yespo.AppRepetitionLogin.accesssvr_sock)
  return accesssvr_sock_;
}
 void AppRepetitionLogin::set_accesssvr_sock(::google::protobuf::uint32 value) {
  
  accesssvr_sock_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppRepetitionLogin.accesssvr_sock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppCalleeNotifyReq::kUserIdFieldNumber;
const int AppCalleeNotifyReq::kRoomAddressFieldNumber;
const int AppCalleeNotifyReq::kDeviceTokenFieldNumber;
const int AppCalleeNotifyReq::kCalleeIdFieldNumber;
const int AppCalleeNotifyReq::kSourceLanguageFieldNumber;
const int AppCalleeNotifyReq::kTargetLanguageFieldNumber;
const int AppCalleeNotifyReq::kCallModeFieldNumber;
const int AppCalleeNotifyReq::kCdrIdFieldNumber;
#endif  // !_MSC_VER

AppCalleeNotifyReq::AppCalleeNotifyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppCalleeNotifyReq)
}

void AppCalleeNotifyReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppCalleeNotifyReq::AppCalleeNotifyReq(const AppCalleeNotifyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppCalleeNotifyReq)
}

void AppCalleeNotifyReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  room_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_id_ = GOOGLE_ULONGLONG(0);
  source_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AppCalleeNotifyReq::~AppCalleeNotifyReq() {
  // @@protoc_insertion_point(destructor:yespo.AppCalleeNotifyReq)
  SharedDtor();
}

void AppCalleeNotifyReq::SharedDtor() {
  room_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  source_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AppCalleeNotifyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCalleeNotifyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCalleeNotifyReq_descriptor_;
}

const AppCalleeNotifyReq& AppCalleeNotifyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppCalleeNotifyReq* AppCalleeNotifyReq::default_instance_ = NULL;

AppCalleeNotifyReq* AppCalleeNotifyReq::New(::google::protobuf::Arena* arena) const {
  AppCalleeNotifyReq* n = new AppCalleeNotifyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppCalleeNotifyReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  room_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  callee_id_ = GOOGLE_ULONGLONG(0);
  source_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AppCalleeNotifyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppCalleeNotifyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_room_address;
        break;
      }

      // optional string room_address = 2;
      case 2: {
        if (tag == 18) {
         parse_room_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_address().data(), this->room_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.room_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_token;
        break;
      }

      // optional string device_token = 3;
      case 3: {
        if (tag == 26) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_callee_id;
        break;
      }

      // optional uint64 callee_id = 4;
      case 4: {
        if (tag == 32) {
         parse_callee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &callee_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_source_language;
        break;
      }

      // optional string source_language = 5;
      case 5: {
        if (tag == 42) {
         parse_source_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_language().data(), this->source_language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.source_language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_target_language;
        break;
      }

      // optional string target_language = 6;
      case 6: {
        if (tag == 50) {
         parse_target_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_language().data(), this->target_language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.target_language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_call_mode;
        break;
      }

      // optional string call_mode = 7;
      case 7: {
        if (tag == 58) {
         parse_call_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_mode().data(), this->call_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.call_mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cdr_id;
        break;
      }

      // optional string cdr_id = 8;
      case 8: {
        if (tag == 66) {
         parse_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppCalleeNotifyReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppCalleeNotifyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppCalleeNotifyReq)
  return false;
#undef DO_
}

void AppCalleeNotifyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppCalleeNotifyReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string room_address = 2;
  if (this->room_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_address().data(), this->room_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.room_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->room_address(), output);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_token(), output);
  }

  // optional uint64 callee_id = 4;
  if (this->callee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->callee_id(), output);
  }

  // optional string source_language = 5;
  if (this->source_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), this->source_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.source_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->source_language(), output);
  }

  // optional string target_language = 6;
  if (this->target_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_language().data(), this->target_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.target_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->target_language(), output);
  }

  // optional string call_mode = 7;
  if (this->call_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_mode().data(), this->call_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.call_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->call_mode(), output);
  }

  // optional string cdr_id = 8;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cdr_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppCalleeNotifyReq)
}

::google::protobuf::uint8* AppCalleeNotifyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppCalleeNotifyReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string room_address = 2;
  if (this->room_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_address().data(), this->room_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.room_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->room_address(), target);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_token(), target);
  }

  // optional uint64 callee_id = 4;
  if (this->callee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->callee_id(), target);
  }

  // optional string source_language = 5;
  if (this->source_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), this->source_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.source_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->source_language(), target);
  }

  // optional string target_language = 6;
  if (this->target_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_language().data(), this->target_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.target_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->target_language(), target);
  }

  // optional string call_mode = 7;
  if (this->call_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_mode().data(), this->call_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.call_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->call_mode(), target);
  }

  // optional string cdr_id = 8;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppCalleeNotifyReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cdr_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppCalleeNotifyReq)
  return target;
}

int AppCalleeNotifyReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string room_address = 2;
  if (this->room_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_address());
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional uint64 callee_id = 4;
  if (this->callee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->callee_id());
  }

  // optional string source_language = 5;
  if (this->source_language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_language());
  }

  // optional string target_language = 6;
  if (this->target_language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_language());
  }

  // optional string call_mode = 7;
  if (this->call_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_mode());
  }

  // optional string cdr_id = 8;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCalleeNotifyReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppCalleeNotifyReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppCalleeNotifyReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCalleeNotifyReq::MergeFrom(const AppCalleeNotifyReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.room_address().size() > 0) {

    room_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_address_);
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.callee_id() != 0) {
    set_callee_id(from.callee_id());
  }
  if (from.source_language().size() > 0) {

    source_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_language_);
  }
  if (from.target_language().size() > 0) {

    target_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_language_);
  }
  if (from.call_mode().size() > 0) {

    call_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_mode_);
  }
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
}

void AppCalleeNotifyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCalleeNotifyReq::CopyFrom(const AppCalleeNotifyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCalleeNotifyReq::IsInitialized() const {

  return true;
}

void AppCalleeNotifyReq::Swap(AppCalleeNotifyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppCalleeNotifyReq::InternalSwap(AppCalleeNotifyReq* other) {
  std::swap(user_id_, other->user_id_);
  room_address_.Swap(&other->room_address_);
  device_token_.Swap(&other->device_token_);
  std::swap(callee_id_, other->callee_id_);
  source_language_.Swap(&other->source_language_);
  target_language_.Swap(&other->target_language_);
  call_mode_.Swap(&other->call_mode_);
  cdr_id_.Swap(&other->cdr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppCalleeNotifyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCalleeNotifyReq_descriptor_;
  metadata.reflection = AppCalleeNotifyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppCalleeNotifyReq

// optional uint64 user_id = 1;
void AppCalleeNotifyReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppCalleeNotifyReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.user_id)
  return user_id_;
}
 void AppCalleeNotifyReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.user_id)
}

// optional string room_address = 2;
void AppCalleeNotifyReq::clear_room_address() {
  room_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::room_address() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.room_address)
  return room_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_room_address(const ::std::string& value) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.room_address)
}
 void AppCalleeNotifyReq::set_room_address(const char* value) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.room_address)
}
 void AppCalleeNotifyReq::set_room_address(const char* value, size_t size) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.room_address)
}
 ::std::string* AppCalleeNotifyReq::mutable_room_address() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.room_address)
  return room_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_room_address() {
  
  return room_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_room_address(::std::string* room_address) {
  if (room_address != NULL) {
    
  } else {
    
  }
  room_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_address);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.room_address)
}

// optional string device_token = 3;
void AppCalleeNotifyReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.device_token)
}
 void AppCalleeNotifyReq::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.device_token)
}
 void AppCalleeNotifyReq::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.device_token)
}
 ::std::string* AppCalleeNotifyReq::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.device_token)
}

// optional uint64 callee_id = 4;
void AppCalleeNotifyReq::clear_callee_id() {
  callee_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppCalleeNotifyReq::callee_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.callee_id)
  return callee_id_;
}
 void AppCalleeNotifyReq::set_callee_id(::google::protobuf::uint64 value) {
  
  callee_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.callee_id)
}

// optional string source_language = 5;
void AppCalleeNotifyReq::clear_source_language() {
  source_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::source_language() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.source_language)
  return source_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_source_language(const ::std::string& value) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.source_language)
}
 void AppCalleeNotifyReq::set_source_language(const char* value) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.source_language)
}
 void AppCalleeNotifyReq::set_source_language(const char* value, size_t size) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.source_language)
}
 ::std::string* AppCalleeNotifyReq::mutable_source_language() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.source_language)
  return source_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_source_language() {
  
  return source_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_source_language(::std::string* source_language) {
  if (source_language != NULL) {
    
  } else {
    
  }
  source_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_language);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.source_language)
}

// optional string target_language = 6;
void AppCalleeNotifyReq::clear_target_language() {
  target_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::target_language() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.target_language)
  return target_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_target_language(const ::std::string& value) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.target_language)
}
 void AppCalleeNotifyReq::set_target_language(const char* value) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.target_language)
}
 void AppCalleeNotifyReq::set_target_language(const char* value, size_t size) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.target_language)
}
 ::std::string* AppCalleeNotifyReq::mutable_target_language() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.target_language)
  return target_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_target_language() {
  
  return target_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_target_language(::std::string* target_language) {
  if (target_language != NULL) {
    
  } else {
    
  }
  target_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_language);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.target_language)
}

// optional string call_mode = 7;
void AppCalleeNotifyReq::clear_call_mode() {
  call_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::call_mode() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.call_mode)
  return call_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_call_mode(const ::std::string& value) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.call_mode)
}
 void AppCalleeNotifyReq::set_call_mode(const char* value) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.call_mode)
}
 void AppCalleeNotifyReq::set_call_mode(const char* value, size_t size) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.call_mode)
}
 ::std::string* AppCalleeNotifyReq::mutable_call_mode() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.call_mode)
  return call_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_call_mode() {
  
  return call_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_call_mode(::std::string* call_mode) {
  if (call_mode != NULL) {
    
  } else {
    
  }
  call_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_mode);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.call_mode)
}

// optional string cdr_id = 8;
void AppCalleeNotifyReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppCalleeNotifyReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCalleeNotifyReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppCalleeNotifyReq.cdr_id)
}
 void AppCalleeNotifyReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppCalleeNotifyReq.cdr_id)
}
 void AppCalleeNotifyReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppCalleeNotifyReq.cdr_id)
}
 ::std::string* AppCalleeNotifyReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppCalleeNotifyReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppCalleeNotifyReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppCalleeNotifyReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppCalleeNotifyReq.cdr_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppCallReadyReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

AppCallReadyReq::AppCallReadyReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppCallReadyReq)
}

void AppCallReadyReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppCallReadyReq::AppCallReadyReq(const AppCallReadyReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppCallReadyReq)
}

void AppCallReadyReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

AppCallReadyReq::~AppCallReadyReq() {
  // @@protoc_insertion_point(destructor:yespo.AppCallReadyReq)
  SharedDtor();
}

void AppCallReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppCallReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCallReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCallReadyReq_descriptor_;
}

const AppCallReadyReq& AppCallReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppCallReadyReq* AppCallReadyReq::default_instance_ = NULL;

AppCallReadyReq* AppCallReadyReq::New(::google::protobuf::Arena* arena) const {
  AppCallReadyReq* n = new AppCallReadyReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppCallReadyReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool AppCallReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppCallReadyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppCallReadyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppCallReadyReq)
  return false;
#undef DO_
}

void AppCallReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppCallReadyReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppCallReadyReq)
}

::google::protobuf::uint8* AppCallReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppCallReadyReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppCallReadyReq)
  return target;
}

int AppCallReadyReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCallReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppCallReadyReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppCallReadyReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCallReadyReq::MergeFrom(const AppCallReadyReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void AppCallReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCallReadyReq::CopyFrom(const AppCallReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCallReadyReq::IsInitialized() const {

  return true;
}

void AppCallReadyReq::Swap(AppCallReadyReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppCallReadyReq::InternalSwap(AppCallReadyReq* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppCallReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCallReadyReq_descriptor_;
  metadata.reflection = AppCallReadyReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppCallReadyReq

// optional uint64 user_id = 1;
void AppCallReadyReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppCallReadyReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCallReadyReq.user_id)
  return user_id_;
}
 void AppCallReadyReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCallReadyReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppPhotoMsgReq::kUserIdFieldNumber;
const int AppPhotoMsgReq::kMsgFieldNumber;
#endif  // !_MSC_VER

AppPhotoMsgReq::AppPhotoMsgReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppPhotoMsgReq)
}

void AppPhotoMsgReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppPhotoMsgReq::AppPhotoMsgReq(const AppPhotoMsgReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppPhotoMsgReq)
}

void AppPhotoMsgReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AppPhotoMsgReq::~AppPhotoMsgReq() {
  // @@protoc_insertion_point(destructor:yespo.AppPhotoMsgReq)
  SharedDtor();
}

void AppPhotoMsgReq::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AppPhotoMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppPhotoMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppPhotoMsgReq_descriptor_;
}

const AppPhotoMsgReq& AppPhotoMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppPhotoMsgReq* AppPhotoMsgReq::default_instance_ = NULL;

AppPhotoMsgReq* AppPhotoMsgReq::New(::google::protobuf::Arena* arena) const {
  AppPhotoMsgReq* n = new AppPhotoMsgReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppPhotoMsgReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AppPhotoMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppPhotoMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AppPhotoMsgReq.msg"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppPhotoMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppPhotoMsgReq)
  return false;
#undef DO_
}

void AppPhotoMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppPhotoMsgReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppPhotoMsgReq.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppPhotoMsgReq)
}

::google::protobuf::uint8* AppPhotoMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppPhotoMsgReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AppPhotoMsgReq.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppPhotoMsgReq)
  return target;
}

int AppPhotoMsgReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string msg = 2;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppPhotoMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppPhotoMsgReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppPhotoMsgReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppPhotoMsgReq::MergeFrom(const AppPhotoMsgReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void AppPhotoMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppPhotoMsgReq::CopyFrom(const AppPhotoMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppPhotoMsgReq::IsInitialized() const {

  return true;
}

void AppPhotoMsgReq::Swap(AppPhotoMsgReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppPhotoMsgReq::InternalSwap(AppPhotoMsgReq* other) {
  std::swap(user_id_, other->user_id_);
  msg_.Swap(&other->msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppPhotoMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppPhotoMsgReq_descriptor_;
  metadata.reflection = AppPhotoMsgReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppPhotoMsgReq

// optional uint64 user_id = 1;
void AppPhotoMsgReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppPhotoMsgReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppPhotoMsgReq.user_id)
  return user_id_;
}
 void AppPhotoMsgReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppPhotoMsgReq.user_id)
}

// optional string msg = 2;
void AppPhotoMsgReq::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AppPhotoMsgReq::msg() const {
  // @@protoc_insertion_point(field_get:yespo.AppPhotoMsgReq.msg)
  return msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppPhotoMsgReq::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AppPhotoMsgReq.msg)
}
 void AppPhotoMsgReq::set_msg(const char* value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AppPhotoMsgReq.msg)
}
 void AppPhotoMsgReq::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AppPhotoMsgReq.msg)
}
 ::std::string* AppPhotoMsgReq::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AppPhotoMsgReq.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AppPhotoMsgReq::release_msg() {
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AppPhotoMsgReq::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:yespo.AppPhotoMsgReq.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppCallStatusReq::kUserIdFieldNumber;
const int AppCallStatusReq::kCallStatusFieldNumber;
#endif  // !_MSC_VER

AppCallStatusReq::AppCallStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppCallStatusReq)
}

void AppCallStatusReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppCallStatusReq::AppCallStatusReq(const AppCallStatusReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppCallStatusReq)
}

void AppCallStatusReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  call_status_ = 0u;
}

AppCallStatusReq::~AppCallStatusReq() {
  // @@protoc_insertion_point(destructor:yespo.AppCallStatusReq)
  SharedDtor();
}

void AppCallStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppCallStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCallStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCallStatusReq_descriptor_;
}

const AppCallStatusReq& AppCallStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppCallStatusReq* AppCallStatusReq::default_instance_ = NULL;

AppCallStatusReq* AppCallStatusReq::New(::google::protobuf::Arena* arena) const {
  AppCallStatusReq* n = new AppCallStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppCallStatusReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppCallStatusReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, call_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool AppCallStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppCallStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_call_status;
        break;
      }

      // optional uint32 call_status = 2;
      case 2: {
        if (tag == 16) {
         parse_call_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &call_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppCallStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppCallStatusReq)
  return false;
#undef DO_
}

void AppCallStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppCallStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 call_status = 2;
  if (this->call_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->call_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppCallStatusReq)
}

::google::protobuf::uint8* AppCallStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppCallStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 call_status = 2;
  if (this->call_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->call_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppCallStatusReq)
  return target;
}

int AppCallStatusReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 call_status = 2;
  if (this->call_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->call_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCallStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppCallStatusReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppCallStatusReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCallStatusReq::MergeFrom(const AppCallStatusReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.call_status() != 0) {
    set_call_status(from.call_status());
  }
}

void AppCallStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCallStatusReq::CopyFrom(const AppCallStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCallStatusReq::IsInitialized() const {

  return true;
}

void AppCallStatusReq::Swap(AppCallStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppCallStatusReq::InternalSwap(AppCallStatusReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(call_status_, other->call_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppCallStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCallStatusReq_descriptor_;
  metadata.reflection = AppCallStatusReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppCallStatusReq

// optional uint64 user_id = 1;
void AppCallStatusReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppCallStatusReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCallStatusReq.user_id)
  return user_id_;
}
 void AppCallStatusReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCallStatusReq.user_id)
}

// optional uint32 call_status = 2;
void AppCallStatusReq::clear_call_status() {
  call_status_ = 0u;
}
 ::google::protobuf::uint32 AppCallStatusReq::call_status() const {
  // @@protoc_insertion_point(field_get:yespo.AppCallStatusReq.call_status)
  return call_status_;
}
 void AppCallStatusReq::set_call_status(::google::protobuf::uint32 value) {
  
  call_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCallStatusReq.call_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppCallTerminateReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

AppCallTerminateReq::AppCallTerminateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppCallTerminateReq)
}

void AppCallTerminateReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppCallTerminateReq::AppCallTerminateReq(const AppCallTerminateReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppCallTerminateReq)
}

void AppCallTerminateReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

AppCallTerminateReq::~AppCallTerminateReq() {
  // @@protoc_insertion_point(destructor:yespo.AppCallTerminateReq)
  SharedDtor();
}

void AppCallTerminateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppCallTerminateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppCallTerminateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppCallTerminateReq_descriptor_;
}

const AppCallTerminateReq& AppCallTerminateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppCallTerminateReq* AppCallTerminateReq::default_instance_ = NULL;

AppCallTerminateReq* AppCallTerminateReq::New(::google::protobuf::Arena* arena) const {
  AppCallTerminateReq* n = new AppCallTerminateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppCallTerminateReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool AppCallTerminateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppCallTerminateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppCallTerminateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppCallTerminateReq)
  return false;
#undef DO_
}

void AppCallTerminateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppCallTerminateReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppCallTerminateReq)
}

::google::protobuf::uint8* AppCallTerminateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppCallTerminateReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppCallTerminateReq)
  return target;
}

int AppCallTerminateReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppCallTerminateReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppCallTerminateReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppCallTerminateReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppCallTerminateReq::MergeFrom(const AppCallTerminateReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void AppCallTerminateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppCallTerminateReq::CopyFrom(const AppCallTerminateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppCallTerminateReq::IsInitialized() const {

  return true;
}

void AppCallTerminateReq::Swap(AppCallTerminateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppCallTerminateReq::InternalSwap(AppCallTerminateReq* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppCallTerminateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppCallTerminateReq_descriptor_;
  metadata.reflection = AppCallTerminateReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppCallTerminateReq

// optional uint64 user_id = 1;
void AppCallTerminateReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppCallTerminateReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppCallTerminateReq.user_id)
  return user_id_;
}
 void AppCallTerminateReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppCallTerminateReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppVideoSendReq::kUserIdFieldNumber;
const int AppVideoSendReq::kPartnerIdFieldNumber;
const int AppVideoSendReq::kVideoStatusFieldNumber;
#endif  // !_MSC_VER

AppVideoSendReq::AppVideoSendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppVideoSendReq)
}

void AppVideoSendReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppVideoSendReq::AppVideoSendReq(const AppVideoSendReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppVideoSendReq)
}

void AppVideoSendReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  video_status_ = 0u;
}

AppVideoSendReq::~AppVideoSendReq() {
  // @@protoc_insertion_point(destructor:yespo.AppVideoSendReq)
  SharedDtor();
}

void AppVideoSendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppVideoSendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppVideoSendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppVideoSendReq_descriptor_;
}

const AppVideoSendReq& AppVideoSendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppVideoSendReq* AppVideoSendReq::default_instance_ = NULL;

AppVideoSendReq* AppVideoSendReq::New(::google::protobuf::Arena* arena) const {
  AppVideoSendReq* n = new AppVideoSendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppVideoSendReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppVideoSendReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, video_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool AppVideoSendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppVideoSendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_status;
        break;
      }

      // optional uint32 video_status = 3;
      case 3: {
        if (tag == 24) {
         parse_video_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppVideoSendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppVideoSendReq)
  return false;
#undef DO_
}

void AppVideoSendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppVideoSendReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->video_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppVideoSendReq)
}

::google::protobuf::uint8* AppVideoSendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppVideoSendReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->video_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppVideoSendReq)
  return target;
}

int AppVideoSendReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppVideoSendReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppVideoSendReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppVideoSendReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppVideoSendReq::MergeFrom(const AppVideoSendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.video_status() != 0) {
    set_video_status(from.video_status());
  }
}

void AppVideoSendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppVideoSendReq::CopyFrom(const AppVideoSendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppVideoSendReq::IsInitialized() const {

  return true;
}

void AppVideoSendReq::Swap(AppVideoSendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppVideoSendReq::InternalSwap(AppVideoSendReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(video_status_, other->video_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppVideoSendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppVideoSendReq_descriptor_;
  metadata.reflection = AppVideoSendReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppVideoSendReq

// optional uint64 user_id = 1;
void AppVideoSendReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppVideoSendReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoSendReq.user_id)
  return user_id_;
}
 void AppVideoSendReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoSendReq.user_id)
}

// optional uint64 partner_id = 2;
void AppVideoSendReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppVideoSendReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoSendReq.partner_id)
  return partner_id_;
}
 void AppVideoSendReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoSendReq.partner_id)
}

// optional uint32 video_status = 3;
void AppVideoSendReq::clear_video_status() {
  video_status_ = 0u;
}
 ::google::protobuf::uint32 AppVideoSendReq::video_status() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoSendReq.video_status)
  return video_status_;
}
 void AppVideoSendReq::set_video_status(::google::protobuf::uint32 value) {
  
  video_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoSendReq.video_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AppVideoRecvReq::kUserIdFieldNumber;
const int AppVideoRecvReq::kPartnerIdFieldNumber;
const int AppVideoRecvReq::kResultFieldNumber;
#endif  // !_MSC_VER

AppVideoRecvReq::AppVideoRecvReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AppVideoRecvReq)
}

void AppVideoRecvReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AppVideoRecvReq::AppVideoRecvReq(const AppVideoRecvReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AppVideoRecvReq)
}

void AppVideoRecvReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
}

AppVideoRecvReq::~AppVideoRecvReq() {
  // @@protoc_insertion_point(destructor:yespo.AppVideoRecvReq)
  SharedDtor();
}

void AppVideoRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AppVideoRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AppVideoRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppVideoRecvReq_descriptor_;
}

const AppVideoRecvReq& AppVideoRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AppVideoRecvReq* AppVideoRecvReq::default_instance_ = NULL;

AppVideoRecvReq* AppVideoRecvReq::New(::google::protobuf::Arena* arena) const {
  AppVideoRecvReq* n = new AppVideoRecvReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AppVideoRecvReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AppVideoRecvReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool AppVideoRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AppVideoRecvReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AppVideoRecvReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AppVideoRecvReq)
  return false;
#undef DO_
}

void AppVideoRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AppVideoRecvReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AppVideoRecvReq)
}

::google::protobuf::uint8* AppVideoRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AppVideoRecvReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AppVideoRecvReq)
  return target;
}

int AppVideoRecvReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppVideoRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AppVideoRecvReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AppVideoRecvReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppVideoRecvReq::MergeFrom(const AppVideoRecvReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void AppVideoRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppVideoRecvReq::CopyFrom(const AppVideoRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppVideoRecvReq::IsInitialized() const {

  return true;
}

void AppVideoRecvReq::Swap(AppVideoRecvReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppVideoRecvReq::InternalSwap(AppVideoRecvReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AppVideoRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AppVideoRecvReq_descriptor_;
  metadata.reflection = AppVideoRecvReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AppVideoRecvReq

// optional uint64 user_id = 1;
void AppVideoRecvReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppVideoRecvReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoRecvReq.user_id)
  return user_id_;
}
 void AppVideoRecvReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoRecvReq.user_id)
}

// optional uint64 partner_id = 2;
void AppVideoRecvReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 AppVideoRecvReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoRecvReq.partner_id)
  return partner_id_;
}
 void AppVideoRecvReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoRecvReq.partner_id)
}

// optional uint32 result = 3;
void AppVideoRecvReq::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 AppVideoRecvReq::result() const {
  // @@protoc_insertion_point(field_get:yespo.AppVideoRecvReq.result)
  return result_;
}
 void AppVideoRecvReq::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:yespo.AppVideoRecvReq.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AccessSvrHeartbeatFailReq::kIpFieldNumber;
const int AccessSvrHeartbeatFailReq::kSocketFieldNumber;
#endif  // !_MSC_VER

AccessSvrHeartbeatFailReq::AccessSvrHeartbeatFailReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AccessSvrHeartbeatFailReq)
}

void AccessSvrHeartbeatFailReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AccessSvrHeartbeatFailReq::AccessSvrHeartbeatFailReq(const AccessSvrHeartbeatFailReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AccessSvrHeartbeatFailReq)
}

void AccessSvrHeartbeatFailReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0u;
}

AccessSvrHeartbeatFailReq::~AccessSvrHeartbeatFailReq() {
  // @@protoc_insertion_point(destructor:yespo.AccessSvrHeartbeatFailReq)
  SharedDtor();
}

void AccessSvrHeartbeatFailReq::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AccessSvrHeartbeatFailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccessSvrHeartbeatFailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccessSvrHeartbeatFailReq_descriptor_;
}

const AccessSvrHeartbeatFailReq& AccessSvrHeartbeatFailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AccessSvrHeartbeatFailReq* AccessSvrHeartbeatFailReq::default_instance_ = NULL;

AccessSvrHeartbeatFailReq* AccessSvrHeartbeatFailReq::New(::google::protobuf::Arena* arena) const {
  AccessSvrHeartbeatFailReq* n = new AccessSvrHeartbeatFailReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccessSvrHeartbeatFailReq::Clear() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0u;
}

bool AccessSvrHeartbeatFailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AccessSvrHeartbeatFailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AccessSvrHeartbeatFailReq.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_socket;
        break;
      }

      // optional uint32 socket = 2;
      case 2: {
        if (tag == 16) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AccessSvrHeartbeatFailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AccessSvrHeartbeatFailReq)
  return false;
#undef DO_
}

void AccessSvrHeartbeatFailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AccessSvrHeartbeatFailReq)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AccessSvrHeartbeatFailReq.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 socket = 2;
  if (this->socket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socket(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AccessSvrHeartbeatFailReq)
}

::google::protobuf::uint8* AccessSvrHeartbeatFailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AccessSvrHeartbeatFailReq)
  // optional string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AccessSvrHeartbeatFailReq.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 socket = 2;
  if (this->socket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AccessSvrHeartbeatFailReq)
  return target;
}

int AccessSvrHeartbeatFailReq::ByteSize() const {
  int total_size = 0;

  // optional string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional uint32 socket = 2;
  if (this->socket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccessSvrHeartbeatFailReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AccessSvrHeartbeatFailReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AccessSvrHeartbeatFailReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccessSvrHeartbeatFailReq::MergeFrom(const AccessSvrHeartbeatFailReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void AccessSvrHeartbeatFailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccessSvrHeartbeatFailReq::CopyFrom(const AccessSvrHeartbeatFailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessSvrHeartbeatFailReq::IsInitialized() const {

  return true;
}

void AccessSvrHeartbeatFailReq::Swap(AccessSvrHeartbeatFailReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccessSvrHeartbeatFailReq::InternalSwap(AccessSvrHeartbeatFailReq* other) {
  ip_.Swap(&other->ip_);
  std::swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccessSvrHeartbeatFailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccessSvrHeartbeatFailReq_descriptor_;
  metadata.reflection = AccessSvrHeartbeatFailReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccessSvrHeartbeatFailReq

// optional string ip = 1;
void AccessSvrHeartbeatFailReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AccessSvrHeartbeatFailReq::ip() const {
  // @@protoc_insertion_point(field_get:yespo.AccessSvrHeartbeatFailReq.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessSvrHeartbeatFailReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AccessSvrHeartbeatFailReq.ip)
}
 void AccessSvrHeartbeatFailReq::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AccessSvrHeartbeatFailReq.ip)
}
 void AccessSvrHeartbeatFailReq::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AccessSvrHeartbeatFailReq.ip)
}
 ::std::string* AccessSvrHeartbeatFailReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AccessSvrHeartbeatFailReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AccessSvrHeartbeatFailReq::release_ip() {
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AccessSvrHeartbeatFailReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.AccessSvrHeartbeatFailReq.ip)
}

// optional uint32 socket = 2;
void AccessSvrHeartbeatFailReq::clear_socket() {
  socket_ = 0u;
}
 ::google::protobuf::uint32 AccessSvrHeartbeatFailReq::socket() const {
  // @@protoc_insertion_point(field_get:yespo.AccessSvrHeartbeatFailReq.socket)
  return socket_;
}
 void AccessSvrHeartbeatFailReq::set_socket(::google::protobuf::uint32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:yespo.AccessSvrHeartbeatFailReq.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginSvrLoginReq::kUserIdFieldNumber;
const int LoginSvrLoginReq::kUserTypeFieldNumber;
const int LoginSvrLoginReq::kTokenFieldNumber;
const int LoginSvrLoginReq::kDeviceTokenFieldNumber;
const int LoginSvrLoginReq::kAccesssvrIpFieldNumber;
const int LoginSvrLoginReq::kAccesssvrPortFieldNumber;
const int LoginSvrLoginReq::kAccesssvrSockFieldNumber;
#endif  // !_MSC_VER

LoginSvrLoginReq::LoginSvrLoginReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.LoginSvrLoginReq)
}

void LoginSvrLoginReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginSvrLoginReq::LoginSvrLoginReq(const LoginSvrLoginReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.LoginSvrLoginReq)
}

void LoginSvrLoginReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0u;
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_port_ = 0u;
  accesssvr_sock_ = 0u;
}

LoginSvrLoginReq::~LoginSvrLoginReq() {
  // @@protoc_insertion_point(destructor:yespo.LoginSvrLoginReq)
  SharedDtor();
}

void LoginSvrLoginReq::SharedDtor() {
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LoginSvrLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSvrLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSvrLoginReq_descriptor_;
}

const LoginSvrLoginReq& LoginSvrLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

LoginSvrLoginReq* LoginSvrLoginReq::default_instance_ = NULL;

LoginSvrLoginReq* LoginSvrLoginReq::New(::google::protobuf::Arena* arena) const {
  LoginSvrLoginReq* n = new LoginSvrLoginReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginSvrLoginReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LoginSvrLoginReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_type_, accesssvr_port_);
  user_id_ = GOOGLE_ULONGLONG(0);
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_sock_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool LoginSvrLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.LoginSvrLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_type;
        break;
      }

      // optional uint32 user_type = 2;
      case 2: {
        if (tag == 16) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_token;
        break;
      }

      // optional string token = 3;
      case 3: {
        if (tag == 26) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.LoginSvrLoginReq.token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_token;
        break;
      }

      // optional string device_token = 4;
      case 4: {
        if (tag == 34) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.LoginSvrLoginReq.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accesssvr_ip;
        break;
      }

      // optional string accesssvr_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_accesssvr_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssvr_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesssvr_ip().data(), this->accesssvr_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.LoginSvrLoginReq.accesssvr_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accesssvr_port;
        break;
      }

      // optional uint32 accesssvr_port = 6;
      case 6: {
        if (tag == 48) {
         parse_accesssvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_accesssvr_sock;
        break;
      }

      // optional uint32 accesssvr_sock = 7;
      case 7: {
        if (tag == 56) {
         parse_accesssvr_sock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_sock_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.LoginSvrLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.LoginSvrLoginReq)
  return false;
#undef DO_
}

void LoginSvrLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.LoginSvrLoginReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_type(), output);
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->token(), output);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_token(), output);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.accesssvr_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accesssvr_ip(), output);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accesssvr_port(), output);
  }

  // optional uint32 accesssvr_sock = 7;
  if (this->accesssvr_sock() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->accesssvr_sock(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.LoginSvrLoginReq)
}

::google::protobuf::uint8* LoginSvrLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.LoginSvrLoginReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_type(), target);
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->token(), target);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_token(), target);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.LoginSvrLoginReq.accesssvr_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesssvr_ip(), target);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accesssvr_port(), target);
  }

  // optional uint32 accesssvr_sock = 7;
  if (this->accesssvr_sock() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->accesssvr_sock(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.LoginSvrLoginReq)
  return target;
}

int LoginSvrLoginReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  // optional string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->token());
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesssvr_ip());
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_port());
  }

  // optional uint32 accesssvr_sock = 7;
  if (this->accesssvr_sock() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_sock());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSvrLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginSvrLoginReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSvrLoginReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSvrLoginReq::MergeFrom(const LoginSvrLoginReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.token().size() > 0) {

    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.accesssvr_ip().size() > 0) {

    accesssvr_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesssvr_ip_);
  }
  if (from.accesssvr_port() != 0) {
    set_accesssvr_port(from.accesssvr_port());
  }
  if (from.accesssvr_sock() != 0) {
    set_accesssvr_sock(from.accesssvr_sock());
  }
}

void LoginSvrLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSvrLoginReq::CopyFrom(const LoginSvrLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSvrLoginReq::IsInitialized() const {

  return true;
}

void LoginSvrLoginReq::Swap(LoginSvrLoginReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSvrLoginReq::InternalSwap(LoginSvrLoginReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  token_.Swap(&other->token_);
  device_token_.Swap(&other->device_token_);
  accesssvr_ip_.Swap(&other->accesssvr_ip_);
  std::swap(accesssvr_port_, other->accesssvr_port_);
  std::swap(accesssvr_sock_, other->accesssvr_sock_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSvrLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSvrLoginReq_descriptor_;
  metadata.reflection = LoginSvrLoginReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSvrLoginReq

// optional uint64 user_id = 1;
void LoginSvrLoginReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LoginSvrLoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.user_id)
  return user_id_;
}
 void LoginSvrLoginReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.user_id)
}

// optional uint32 user_type = 2;
void LoginSvrLoginReq::clear_user_type() {
  user_type_ = 0u;
}
 ::google::protobuf::uint32 LoginSvrLoginReq::user_type() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.user_type)
  return user_type_;
}
 void LoginSvrLoginReq::set_user_type(::google::protobuf::uint32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.user_type)
}

// optional string token = 3;
void LoginSvrLoginReq::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginSvrLoginReq::token() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.token)
  return token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.token)
}
 void LoginSvrLoginReq::set_token(const char* value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.LoginSvrLoginReq.token)
}
 void LoginSvrLoginReq::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.LoginSvrLoginReq.token)
}
 ::std::string* LoginSvrLoginReq::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.LoginSvrLoginReq.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginSvrLoginReq::release_token() {
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:yespo.LoginSvrLoginReq.token)
}

// optional string device_token = 4;
void LoginSvrLoginReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginSvrLoginReq::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.device_token)
}
 void LoginSvrLoginReq::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.LoginSvrLoginReq.device_token)
}
 void LoginSvrLoginReq::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.LoginSvrLoginReq.device_token)
}
 ::std::string* LoginSvrLoginReq::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.LoginSvrLoginReq.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginSvrLoginReq::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.LoginSvrLoginReq.device_token)
}

// optional string accesssvr_ip = 5;
void LoginSvrLoginReq::clear_accesssvr_ip() {
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LoginSvrLoginReq::accesssvr_ip() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.accesssvr_ip)
  return accesssvr_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_accesssvr_ip(const ::std::string& value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.accesssvr_ip)
}
 void LoginSvrLoginReq::set_accesssvr_ip(const char* value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.LoginSvrLoginReq.accesssvr_ip)
}
 void LoginSvrLoginReq::set_accesssvr_ip(const char* value, size_t size) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.LoginSvrLoginReq.accesssvr_ip)
}
 ::std::string* LoginSvrLoginReq::mutable_accesssvr_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.LoginSvrLoginReq.accesssvr_ip)
  return accesssvr_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LoginSvrLoginReq::release_accesssvr_ip() {
  
  return accesssvr_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LoginSvrLoginReq::set_allocated_accesssvr_ip(::std::string* accesssvr_ip) {
  if (accesssvr_ip != NULL) {
    
  } else {
    
  }
  accesssvr_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesssvr_ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.LoginSvrLoginReq.accesssvr_ip)
}

// optional uint32 accesssvr_port = 6;
void LoginSvrLoginReq::clear_accesssvr_port() {
  accesssvr_port_ = 0u;
}
 ::google::protobuf::uint32 LoginSvrLoginReq::accesssvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.accesssvr_port)
  return accesssvr_port_;
}
 void LoginSvrLoginReq::set_accesssvr_port(::google::protobuf::uint32 value) {
  
  accesssvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.accesssvr_port)
}

// optional uint32 accesssvr_sock = 7;
void LoginSvrLoginReq::clear_accesssvr_sock() {
  accesssvr_sock_ = 0u;
}
 ::google::protobuf::uint32 LoginSvrLoginReq::accesssvr_sock() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginReq.accesssvr_sock)
  return accesssvr_sock_;
}
 void LoginSvrLoginReq::set_accesssvr_sock(::google::protobuf::uint32 value) {
  
  accesssvr_sock_ = value;
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLoginReq.accesssvr_sock)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginSvrLoginRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

LoginSvrLoginRsp::LoginSvrLoginRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.LoginSvrLoginRsp)
}

void LoginSvrLoginRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

LoginSvrLoginRsp::LoginSvrLoginRsp(const LoginSvrLoginRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.LoginSvrLoginRsp)
}

void LoginSvrLoginRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

LoginSvrLoginRsp::~LoginSvrLoginRsp() {
  // @@protoc_insertion_point(destructor:yespo.LoginSvrLoginRsp)
  SharedDtor();
}

void LoginSvrLoginRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void LoginSvrLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSvrLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSvrLoginRsp_descriptor_;
}

const LoginSvrLoginRsp& LoginSvrLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

LoginSvrLoginRsp* LoginSvrLoginRsp::default_instance_ = NULL;

LoginSvrLoginRsp* LoginSvrLoginRsp::New(::google::protobuf::Arena* arena) const {
  LoginSvrLoginRsp* n = new LoginSvrLoginRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginSvrLoginRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool LoginSvrLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.LoginSvrLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.LoginSvrLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.LoginSvrLoginRsp)
  return false;
#undef DO_
}

void LoginSvrLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.LoginSvrLoginRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.LoginSvrLoginRsp)
}

::google::protobuf::uint8* LoginSvrLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.LoginSvrLoginRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.LoginSvrLoginRsp)
  return target;
}

int LoginSvrLoginRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSvrLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginSvrLoginRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSvrLoginRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSvrLoginRsp::MergeFrom(const LoginSvrLoginRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void LoginSvrLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSvrLoginRsp::CopyFrom(const LoginSvrLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSvrLoginRsp::IsInitialized() const {

  return true;
}

void LoginSvrLoginRsp::Swap(LoginSvrLoginRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSvrLoginRsp::InternalSwap(LoginSvrLoginRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSvrLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSvrLoginRsp_descriptor_;
  metadata.reflection = LoginSvrLoginRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSvrLoginRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool LoginSvrLoginRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void LoginSvrLoginRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& LoginSvrLoginRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLoginRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* LoginSvrLoginRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.LoginSvrLoginRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* LoginSvrLoginRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void LoginSvrLoginRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.LoginSvrLoginRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginSvrLogoutReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

LoginSvrLogoutReq::LoginSvrLogoutReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.LoginSvrLogoutReq)
}

void LoginSvrLogoutReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LoginSvrLogoutReq::LoginSvrLogoutReq(const LoginSvrLogoutReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.LoginSvrLogoutReq)
}

void LoginSvrLogoutReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

LoginSvrLogoutReq::~LoginSvrLogoutReq() {
  // @@protoc_insertion_point(destructor:yespo.LoginSvrLogoutReq)
  SharedDtor();
}

void LoginSvrLogoutReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginSvrLogoutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSvrLogoutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSvrLogoutReq_descriptor_;
}

const LoginSvrLogoutReq& LoginSvrLogoutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

LoginSvrLogoutReq* LoginSvrLogoutReq::default_instance_ = NULL;

LoginSvrLogoutReq* LoginSvrLogoutReq::New(::google::protobuf::Arena* arena) const {
  LoginSvrLogoutReq* n = new LoginSvrLogoutReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginSvrLogoutReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool LoginSvrLogoutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.LoginSvrLogoutReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.LoginSvrLogoutReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.LoginSvrLogoutReq)
  return false;
#undef DO_
}

void LoginSvrLogoutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.LoginSvrLogoutReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.LoginSvrLogoutReq)
}

::google::protobuf::uint8* LoginSvrLogoutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.LoginSvrLogoutReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.LoginSvrLogoutReq)
  return target;
}

int LoginSvrLogoutReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSvrLogoutReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginSvrLogoutReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSvrLogoutReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSvrLogoutReq::MergeFrom(const LoginSvrLogoutReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void LoginSvrLogoutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSvrLogoutReq::CopyFrom(const LoginSvrLogoutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSvrLogoutReq::IsInitialized() const {

  return true;
}

void LoginSvrLogoutReq::Swap(LoginSvrLogoutReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSvrLogoutReq::InternalSwap(LoginSvrLogoutReq* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSvrLogoutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSvrLogoutReq_descriptor_;
  metadata.reflection = LoginSvrLogoutReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSvrLogoutReq

// optional uint64 user_id = 1;
void LoginSvrLogoutReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 LoginSvrLogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLogoutReq.user_id)
  return user_id_;
}
 void LoginSvrLogoutReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.LoginSvrLogoutReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int LoginSvrLogoutRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

LoginSvrLogoutRsp::LoginSvrLogoutRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.LoginSvrLogoutRsp)
}

void LoginSvrLogoutRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

LoginSvrLogoutRsp::LoginSvrLogoutRsp(const LoginSvrLogoutRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.LoginSvrLogoutRsp)
}

void LoginSvrLogoutRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

LoginSvrLogoutRsp::~LoginSvrLogoutRsp() {
  // @@protoc_insertion_point(destructor:yespo.LoginSvrLogoutRsp)
  SharedDtor();
}

void LoginSvrLogoutRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void LoginSvrLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSvrLogoutRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSvrLogoutRsp_descriptor_;
}

const LoginSvrLogoutRsp& LoginSvrLogoutRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

LoginSvrLogoutRsp* LoginSvrLogoutRsp::default_instance_ = NULL;

LoginSvrLogoutRsp* LoginSvrLogoutRsp::New(::google::protobuf::Arena* arena) const {
  LoginSvrLogoutRsp* n = new LoginSvrLogoutRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginSvrLogoutRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool LoginSvrLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.LoginSvrLogoutRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.LoginSvrLogoutRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.LoginSvrLogoutRsp)
  return false;
#undef DO_
}

void LoginSvrLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.LoginSvrLogoutRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.LoginSvrLogoutRsp)
}

::google::protobuf::uint8* LoginSvrLogoutRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.LoginSvrLogoutRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.LoginSvrLogoutRsp)
  return target;
}

int LoginSvrLogoutRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSvrLogoutRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LoginSvrLogoutRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginSvrLogoutRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSvrLogoutRsp::MergeFrom(const LoginSvrLogoutRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void LoginSvrLogoutRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSvrLogoutRsp::CopyFrom(const LoginSvrLogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSvrLogoutRsp::IsInitialized() const {

  return true;
}

void LoginSvrLogoutRsp::Swap(LoginSvrLogoutRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginSvrLogoutRsp::InternalSwap(LoginSvrLogoutRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginSvrLogoutRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSvrLogoutRsp_descriptor_;
  metadata.reflection = LoginSvrLogoutRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginSvrLogoutRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool LoginSvrLogoutRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void LoginSvrLogoutRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& LoginSvrLogoutRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.LoginSvrLogoutRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* LoginSvrLogoutRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.LoginSvrLogoutRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* LoginSvrLogoutRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void LoginSvrLogoutRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.LoginSvrLogoutRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrAdduserReq::kUserIdFieldNumber;
const int StatusSvrAdduserReq::kUserTypeFieldNumber;
const int StatusSvrAdduserReq::kDeviceTokenFieldNumber;
const int StatusSvrAdduserReq::kAccesssvrIpFieldNumber;
const int StatusSvrAdduserReq::kAccesssvrPortFieldNumber;
const int StatusSvrAdduserReq::kSocketFieldNumber;
#endif  // !_MSC_VER

StatusSvrAdduserReq::StatusSvrAdduserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrAdduserReq)
}

void StatusSvrAdduserReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusSvrAdduserReq::StatusSvrAdduserReq(const StatusSvrAdduserReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrAdduserReq)
}

void StatusSvrAdduserReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0u;
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_port_ = 0u;
  socket_ = 0u;
}

StatusSvrAdduserReq::~StatusSvrAdduserReq() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrAdduserReq)
  SharedDtor();
}

void StatusSvrAdduserReq::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StatusSvrAdduserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrAdduserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrAdduserReq_descriptor_;
}

const StatusSvrAdduserReq& StatusSvrAdduserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrAdduserReq* StatusSvrAdduserReq::default_instance_ = NULL;

StatusSvrAdduserReq* StatusSvrAdduserReq::New(::google::protobuf::Arena* arena) const {
  StatusSvrAdduserReq* n = new StatusSvrAdduserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrAdduserReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusSvrAdduserReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_type_, accesssvr_port_);
  user_id_ = GOOGLE_ULONGLONG(0);
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool StatusSvrAdduserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrAdduserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_type;
        break;
      }

      // optional uint32 user_type = 2;
      case 2: {
        if (tag == 16) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device_token;
        break;
      }

      // optional string device_token = 3;
      case 3: {
        if (tag == 26) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrAdduserReq.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accesssvr_ip;
        break;
      }

      // optional string accesssvr_ip = 4;
      case 4: {
        if (tag == 34) {
         parse_accesssvr_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssvr_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesssvr_ip().data(), this->accesssvr_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrAdduserReq.accesssvr_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_accesssvr_port;
        break;
      }

      // optional uint32 accesssvr_port = 5;
      case 5: {
        if (tag == 40) {
         parse_accesssvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_socket;
        break;
      }

      // optional uint32 socket = 6;
      case 6: {
        if (tag == 48) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrAdduserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrAdduserReq)
  return false;
#undef DO_
}

void StatusSvrAdduserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrAdduserReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->user_type(), output);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserReq.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device_token(), output);
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserReq.accesssvr_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->accesssvr_ip(), output);
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->accesssvr_port(), output);
  }

  // optional uint32 socket = 6;
  if (this->socket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->socket(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrAdduserReq)
}

::google::protobuf::uint8* StatusSvrAdduserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrAdduserReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->user_type(), target);
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserReq.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device_token(), target);
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserReq.accesssvr_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->accesssvr_ip(), target);
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->accesssvr_port(), target);
  }

  // optional uint32 socket = 6;
  if (this->socket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->socket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrAdduserReq)
  return target;
}

int StatusSvrAdduserReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 user_type = 2;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  // optional string device_token = 3;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional string accesssvr_ip = 4;
  if (this->accesssvr_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesssvr_ip());
  }

  // optional uint32 accesssvr_port = 5;
  if (this->accesssvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_port());
  }

  // optional uint32 socket = 6;
  if (this->socket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrAdduserReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrAdduserReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrAdduserReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrAdduserReq::MergeFrom(const StatusSvrAdduserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.accesssvr_ip().size() > 0) {

    accesssvr_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesssvr_ip_);
  }
  if (from.accesssvr_port() != 0) {
    set_accesssvr_port(from.accesssvr_port());
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void StatusSvrAdduserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrAdduserReq::CopyFrom(const StatusSvrAdduserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrAdduserReq::IsInitialized() const {

  return true;
}

void StatusSvrAdduserReq::Swap(StatusSvrAdduserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrAdduserReq::InternalSwap(StatusSvrAdduserReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  device_token_.Swap(&other->device_token_);
  accesssvr_ip_.Swap(&other->accesssvr_ip_);
  std::swap(accesssvr_port_, other->accesssvr_port_);
  std::swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrAdduserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrAdduserReq_descriptor_;
  metadata.reflection = StatusSvrAdduserReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrAdduserReq

// optional uint64 user_id = 1;
void StatusSvrAdduserReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrAdduserReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.user_id)
  return user_id_;
}
 void StatusSvrAdduserReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.user_id)
}

// optional uint32 user_type = 2;
void StatusSvrAdduserReq::clear_user_type() {
  user_type_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserReq::user_type() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.user_type)
  return user_type_;
}
 void StatusSvrAdduserReq::set_user_type(::google::protobuf::uint32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.user_type)
}

// optional string device_token = 3;
void StatusSvrAdduserReq::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrAdduserReq::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserReq::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.device_token)
}
 void StatusSvrAdduserReq::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrAdduserReq.device_token)
}
 void StatusSvrAdduserReq::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrAdduserReq.device_token)
}
 ::std::string* StatusSvrAdduserReq::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrAdduserReq.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrAdduserReq::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserReq::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrAdduserReq.device_token)
}

// optional string accesssvr_ip = 4;
void StatusSvrAdduserReq::clear_accesssvr_ip() {
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrAdduserReq::accesssvr_ip() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.accesssvr_ip)
  return accesssvr_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserReq::set_accesssvr_ip(const ::std::string& value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.accesssvr_ip)
}
 void StatusSvrAdduserReq::set_accesssvr_ip(const char* value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrAdduserReq.accesssvr_ip)
}
 void StatusSvrAdduserReq::set_accesssvr_ip(const char* value, size_t size) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrAdduserReq.accesssvr_ip)
}
 ::std::string* StatusSvrAdduserReq::mutable_accesssvr_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrAdduserReq.accesssvr_ip)
  return accesssvr_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrAdduserReq::release_accesssvr_ip() {
  
  return accesssvr_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserReq::set_allocated_accesssvr_ip(::std::string* accesssvr_ip) {
  if (accesssvr_ip != NULL) {
    
  } else {
    
  }
  accesssvr_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesssvr_ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrAdduserReq.accesssvr_ip)
}

// optional uint32 accesssvr_port = 5;
void StatusSvrAdduserReq::clear_accesssvr_port() {
  accesssvr_port_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserReq::accesssvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.accesssvr_port)
  return accesssvr_port_;
}
 void StatusSvrAdduserReq::set_accesssvr_port(::google::protobuf::uint32 value) {
  
  accesssvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.accesssvr_port)
}

// optional uint32 socket = 6;
void StatusSvrAdduserReq::clear_socket() {
  socket_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserReq::socket() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserReq.socket)
  return socket_;
}
 void StatusSvrAdduserReq::set_socket(::google::protobuf::uint32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserReq.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrAdduserRsp::kRspMsgFieldNumber;
const int StatusSvrAdduserRsp::kUserIdFieldNumber;
const int StatusSvrAdduserRsp::kUserTypeFieldNumber;
const int StatusSvrAdduserRsp::kDeviceTokenFieldNumber;
const int StatusSvrAdduserRsp::kAccesssvrIpFieldNumber;
const int StatusSvrAdduserRsp::kAccesssvrPortFieldNumber;
const int StatusSvrAdduserRsp::kSocketFieldNumber;
#endif  // !_MSC_VER

StatusSvrAdduserRsp::StatusSvrAdduserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrAdduserRsp)
}

void StatusSvrAdduserRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

StatusSvrAdduserRsp::StatusSvrAdduserRsp(const StatusSvrAdduserRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrAdduserRsp)
}

void StatusSvrAdduserRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0u;
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_port_ = 0u;
  socket_ = 0u;
}

StatusSvrAdduserRsp::~StatusSvrAdduserRsp() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrAdduserRsp)
  SharedDtor();
}

void StatusSvrAdduserRsp::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void StatusSvrAdduserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrAdduserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrAdduserRsp_descriptor_;
}

const StatusSvrAdduserRsp& StatusSvrAdduserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrAdduserRsp* StatusSvrAdduserRsp::default_instance_ = NULL;

StatusSvrAdduserRsp* StatusSvrAdduserRsp::New(::google::protobuf::Arena* arena) const {
  StatusSvrAdduserRsp* n = new StatusSvrAdduserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrAdduserRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusSvrAdduserRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_type_, accesssvr_port_);
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool StatusSvrAdduserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrAdduserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_type;
        break;
      }

      // optional uint32 user_type = 3;
      case 3: {
        if (tag == 24) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_token;
        break;
      }

      // optional string device_token = 4;
      case 4: {
        if (tag == 34) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrAdduserRsp.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accesssvr_ip;
        break;
      }

      // optional string accesssvr_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_accesssvr_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssvr_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesssvr_ip().data(), this->accesssvr_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrAdduserRsp.accesssvr_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accesssvr_port;
        break;
      }

      // optional uint32 accesssvr_port = 6;
      case 6: {
        if (tag == 48) {
         parse_accesssvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_socket;
        break;
      }

      // optional uint32 socket = 7;
      case 7: {
        if (tag == 56) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrAdduserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrAdduserRsp)
  return false;
#undef DO_
}

void StatusSvrAdduserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrAdduserRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_type(), output);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserRsp.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_token(), output);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserRsp.accesssvr_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accesssvr_ip(), output);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accesssvr_port(), output);
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->socket(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrAdduserRsp)
}

::google::protobuf::uint8* StatusSvrAdduserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrAdduserRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_type(), target);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserRsp.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_token(), target);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrAdduserRsp.accesssvr_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesssvr_ip(), target);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accesssvr_port(), target);
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->socket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrAdduserRsp)
  return target;
}

int StatusSvrAdduserRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesssvr_ip());
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_port());
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrAdduserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrAdduserRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrAdduserRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrAdduserRsp::MergeFrom(const StatusSvrAdduserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.accesssvr_ip().size() > 0) {

    accesssvr_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesssvr_ip_);
  }
  if (from.accesssvr_port() != 0) {
    set_accesssvr_port(from.accesssvr_port());
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void StatusSvrAdduserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrAdduserRsp::CopyFrom(const StatusSvrAdduserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrAdduserRsp::IsInitialized() const {

  return true;
}

void StatusSvrAdduserRsp::Swap(StatusSvrAdduserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrAdduserRsp::InternalSwap(StatusSvrAdduserRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  device_token_.Swap(&other->device_token_);
  accesssvr_ip_.Swap(&other->accesssvr_ip_);
  std::swap(accesssvr_port_, other->accesssvr_port_);
  std::swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrAdduserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrAdduserRsp_descriptor_;
  metadata.reflection = StatusSvrAdduserRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrAdduserRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool StatusSvrAdduserRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void StatusSvrAdduserRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& StatusSvrAdduserRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* StatusSvrAdduserRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrAdduserRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* StatusSvrAdduserRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void StatusSvrAdduserRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrAdduserRsp.rsp_msg)
}

// optional uint64 user_id = 2;
void StatusSvrAdduserRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrAdduserRsp::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.user_id)
  return user_id_;
}
 void StatusSvrAdduserRsp::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.user_id)
}

// optional uint32 user_type = 3;
void StatusSvrAdduserRsp::clear_user_type() {
  user_type_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserRsp::user_type() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.user_type)
  return user_type_;
}
 void StatusSvrAdduserRsp::set_user_type(::google::protobuf::uint32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.user_type)
}

// optional string device_token = 4;
void StatusSvrAdduserRsp::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrAdduserRsp::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserRsp::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.device_token)
}
 void StatusSvrAdduserRsp::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrAdduserRsp.device_token)
}
 void StatusSvrAdduserRsp::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrAdduserRsp.device_token)
}
 ::std::string* StatusSvrAdduserRsp::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrAdduserRsp.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrAdduserRsp::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserRsp::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrAdduserRsp.device_token)
}

// optional string accesssvr_ip = 5;
void StatusSvrAdduserRsp::clear_accesssvr_ip() {
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrAdduserRsp::accesssvr_ip() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.accesssvr_ip)
  return accesssvr_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserRsp::set_accesssvr_ip(const ::std::string& value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.accesssvr_ip)
}
 void StatusSvrAdduserRsp::set_accesssvr_ip(const char* value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrAdduserRsp.accesssvr_ip)
}
 void StatusSvrAdduserRsp::set_accesssvr_ip(const char* value, size_t size) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrAdduserRsp.accesssvr_ip)
}
 ::std::string* StatusSvrAdduserRsp::mutable_accesssvr_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrAdduserRsp.accesssvr_ip)
  return accesssvr_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrAdduserRsp::release_accesssvr_ip() {
  
  return accesssvr_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrAdduserRsp::set_allocated_accesssvr_ip(::std::string* accesssvr_ip) {
  if (accesssvr_ip != NULL) {
    
  } else {
    
  }
  accesssvr_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesssvr_ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrAdduserRsp.accesssvr_ip)
}

// optional uint32 accesssvr_port = 6;
void StatusSvrAdduserRsp::clear_accesssvr_port() {
  accesssvr_port_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserRsp::accesssvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.accesssvr_port)
  return accesssvr_port_;
}
 void StatusSvrAdduserRsp::set_accesssvr_port(::google::protobuf::uint32 value) {
  
  accesssvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.accesssvr_port)
}

// optional uint32 socket = 7;
void StatusSvrAdduserRsp::clear_socket() {
  socket_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrAdduserRsp::socket() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrAdduserRsp.socket)
  return socket_;
}
 void StatusSvrAdduserRsp::set_socket(::google::protobuf::uint32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrAdduserRsp.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrDeluserReq::kUserIdFieldNumber;
const int StatusSvrDeluserReq::kIpFieldNumber;
const int StatusSvrDeluserReq::kSocketFieldNumber;
#endif  // !_MSC_VER

StatusSvrDeluserReq::StatusSvrDeluserReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrDeluserReq)
}

void StatusSvrDeluserReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusSvrDeluserReq::StatusSvrDeluserReq(const StatusSvrDeluserReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrDeluserReq)
}

void StatusSvrDeluserReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0;
}

StatusSvrDeluserReq::~StatusSvrDeluserReq() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrDeluserReq)
  SharedDtor();
}

void StatusSvrDeluserReq::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void StatusSvrDeluserReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrDeluserReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrDeluserReq_descriptor_;
}

const StatusSvrDeluserReq& StatusSvrDeluserReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrDeluserReq* StatusSvrDeluserReq::default_instance_ = NULL;

StatusSvrDeluserReq* StatusSvrDeluserReq::New(::google::protobuf::Arena* arena) const {
  StatusSvrDeluserReq* n = new StatusSvrDeluserReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrDeluserReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0;
}

bool StatusSvrDeluserReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrDeluserReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (tag == 18) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrDeluserReq.ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_socket;
        break;
      }

      // optional int32 socket = 3;
      case 3: {
        if (tag == 24) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &socket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrDeluserReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrDeluserReq)
  return false;
#undef DO_
}

void StatusSvrDeluserReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrDeluserReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrDeluserReq.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ip(), output);
  }

  // optional int32 socket = 3;
  if (this->socket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->socket(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrDeluserReq)
}

::google::protobuf::uint8* StatusSvrDeluserReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrDeluserReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrDeluserReq.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional int32 socket = 3;
  if (this->socket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->socket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrDeluserReq)
  return target;
}

int StatusSvrDeluserReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string ip = 2;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // optional int32 socket = 3;
  if (this->socket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->socket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrDeluserReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrDeluserReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrDeluserReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrDeluserReq::MergeFrom(const StatusSvrDeluserReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void StatusSvrDeluserReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrDeluserReq::CopyFrom(const StatusSvrDeluserReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrDeluserReq::IsInitialized() const {

  return true;
}

void StatusSvrDeluserReq::Swap(StatusSvrDeluserReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrDeluserReq::InternalSwap(StatusSvrDeluserReq* other) {
  std::swap(user_id_, other->user_id_);
  ip_.Swap(&other->ip_);
  std::swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrDeluserReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrDeluserReq_descriptor_;
  metadata.reflection = StatusSvrDeluserReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrDeluserReq

// optional uint64 user_id = 1;
void StatusSvrDeluserReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrDeluserReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrDeluserReq.user_id)
  return user_id_;
}
 void StatusSvrDeluserReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrDeluserReq.user_id)
}

// optional string ip = 2;
void StatusSvrDeluserReq::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrDeluserReq::ip() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrDeluserReq.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrDeluserReq::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrDeluserReq.ip)
}
 void StatusSvrDeluserReq::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrDeluserReq.ip)
}
 void StatusSvrDeluserReq::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrDeluserReq.ip)
}
 ::std::string* StatusSvrDeluserReq::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrDeluserReq.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrDeluserReq::release_ip() {
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrDeluserReq::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrDeluserReq.ip)
}

// optional int32 socket = 3;
void StatusSvrDeluserReq::clear_socket() {
  socket_ = 0;
}
 ::google::protobuf::int32 StatusSvrDeluserReq::socket() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrDeluserReq.socket)
  return socket_;
}
 void StatusSvrDeluserReq::set_socket(::google::protobuf::int32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrDeluserReq.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrDeluserRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

StatusSvrDeluserRsp::StatusSvrDeluserRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrDeluserRsp)
}

void StatusSvrDeluserRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

StatusSvrDeluserRsp::StatusSvrDeluserRsp(const StatusSvrDeluserRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrDeluserRsp)
}

void StatusSvrDeluserRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

StatusSvrDeluserRsp::~StatusSvrDeluserRsp() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrDeluserRsp)
  SharedDtor();
}

void StatusSvrDeluserRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void StatusSvrDeluserRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrDeluserRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrDeluserRsp_descriptor_;
}

const StatusSvrDeluserRsp& StatusSvrDeluserRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrDeluserRsp* StatusSvrDeluserRsp::default_instance_ = NULL;

StatusSvrDeluserRsp* StatusSvrDeluserRsp::New(::google::protobuf::Arena* arena) const {
  StatusSvrDeluserRsp* n = new StatusSvrDeluserRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrDeluserRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool StatusSvrDeluserRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrDeluserRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrDeluserRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrDeluserRsp)
  return false;
#undef DO_
}

void StatusSvrDeluserRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrDeluserRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrDeluserRsp)
}

::google::protobuf::uint8* StatusSvrDeluserRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrDeluserRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrDeluserRsp)
  return target;
}

int StatusSvrDeluserRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrDeluserRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrDeluserRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrDeluserRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrDeluserRsp::MergeFrom(const StatusSvrDeluserRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void StatusSvrDeluserRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrDeluserRsp::CopyFrom(const StatusSvrDeluserRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrDeluserRsp::IsInitialized() const {

  return true;
}

void StatusSvrDeluserRsp::Swap(StatusSvrDeluserRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrDeluserRsp::InternalSwap(StatusSvrDeluserRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrDeluserRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrDeluserRsp_descriptor_;
  metadata.reflection = StatusSvrDeluserRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrDeluserRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool StatusSvrDeluserRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void StatusSvrDeluserRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& StatusSvrDeluserRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrDeluserRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* StatusSvrDeluserRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrDeluserRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* StatusSvrDeluserRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void StatusSvrDeluserRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrDeluserRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrStatusQueryReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

StatusSvrStatusQueryReq::StatusSvrStatusQueryReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrStatusQueryReq)
}

void StatusSvrStatusQueryReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusSvrStatusQueryReq::StatusSvrStatusQueryReq(const StatusSvrStatusQueryReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrStatusQueryReq)
}

void StatusSvrStatusQueryReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

StatusSvrStatusQueryReq::~StatusSvrStatusQueryReq() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrStatusQueryReq)
  SharedDtor();
}

void StatusSvrStatusQueryReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusSvrStatusQueryReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrStatusQueryReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrStatusQueryReq_descriptor_;
}

const StatusSvrStatusQueryReq& StatusSvrStatusQueryReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrStatusQueryReq* StatusSvrStatusQueryReq::default_instance_ = NULL;

StatusSvrStatusQueryReq* StatusSvrStatusQueryReq::New(::google::protobuf::Arena* arena) const {
  StatusSvrStatusQueryReq* n = new StatusSvrStatusQueryReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrStatusQueryReq::Clear() {
  user_id_.Clear();
}

bool StatusSvrStatusQueryReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrStatusQueryReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 user_id = 1;
      case 1: {
        if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_id())));
        } else if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_user_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrStatusQueryReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrStatusQueryReq)
  return false;
#undef DO_
}

void StatusSvrStatusQueryReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrStatusQueryReq)
  // repeated uint64 user_id = 1;
  if (this->user_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_id_cached_byte_size_);
  }
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->user_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrStatusQueryReq)
}

::google::protobuf::uint8* StatusSvrStatusQueryReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrStatusQueryReq)
  // repeated uint64 user_id = 1;
  if (this->user_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _user_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->user_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrStatusQueryReq)
  return target;
}

int StatusSvrStatusQueryReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrStatusQueryReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrStatusQueryReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrStatusQueryReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrStatusQueryReq::MergeFrom(const StatusSvrStatusQueryReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_id_.MergeFrom(from.user_id_);
}

void StatusSvrStatusQueryReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrStatusQueryReq::CopyFrom(const StatusSvrStatusQueryReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrStatusQueryReq::IsInitialized() const {

  return true;
}

void StatusSvrStatusQueryReq::Swap(StatusSvrStatusQueryReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrStatusQueryReq::InternalSwap(StatusSvrStatusQueryReq* other) {
  user_id_.UnsafeArenaSwap(&other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrStatusQueryReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrStatusQueryReq_descriptor_;
  metadata.reflection = StatusSvrStatusQueryReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrStatusQueryReq

// repeated uint64 user_id = 1;
int StatusSvrStatusQueryReq::user_id_size() const {
  return user_id_.size();
}
void StatusSvrStatusQueryReq::clear_user_id() {
  user_id_.Clear();
}
 ::google::protobuf::uint64 StatusSvrStatusQueryReq::user_id(int index) const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrStatusQueryReq.user_id)
  return user_id_.Get(index);
}
 void StatusSvrStatusQueryReq::set_user_id(int index, ::google::protobuf::uint64 value) {
  user_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrStatusQueryReq.user_id)
}
 void StatusSvrStatusQueryReq::add_user_id(::google::protobuf::uint64 value) {
  user_id_.Add(value);
  // @@protoc_insertion_point(field_add:yespo.StatusSvrStatusQueryReq.user_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
StatusSvrStatusQueryReq::user_id() const {
  // @@protoc_insertion_point(field_list:yespo.StatusSvrStatusQueryReq.user_id)
  return user_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
StatusSvrStatusQueryReq::mutable_user_id() {
  // @@protoc_insertion_point(field_mutable_list:yespo.StatusSvrStatusQueryReq.user_id)
  return &user_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrStatusItem::kUserIdFieldNumber;
const int StatusSvrStatusItem::kStatusFieldNumber;
#endif  // !_MSC_VER

StatusSvrStatusItem::StatusSvrStatusItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrStatusItem)
}

void StatusSvrStatusItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusSvrStatusItem::StatusSvrStatusItem(const StatusSvrStatusItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrStatusItem)
}

void StatusSvrStatusItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
}

StatusSvrStatusItem::~StatusSvrStatusItem() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrStatusItem)
  SharedDtor();
}

void StatusSvrStatusItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusSvrStatusItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrStatusItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrStatusItem_descriptor_;
}

const StatusSvrStatusItem& StatusSvrStatusItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrStatusItem* StatusSvrStatusItem::default_instance_ = NULL;

StatusSvrStatusItem* StatusSvrStatusItem::New(::google::protobuf::Arena* arena) const {
  StatusSvrStatusItem* n = new StatusSvrStatusItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrStatusItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusSvrStatusItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, status_);

#undef ZR_HELPER_
#undef ZR_

}

bool StatusSvrStatusItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrStatusItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrStatusItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrStatusItem)
  return false;
#undef DO_
}

void StatusSvrStatusItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrStatusItem)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrStatusItem)
}

::google::protobuf::uint8* StatusSvrStatusItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrStatusItem)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrStatusItem)
  return target;
}

int StatusSvrStatusItem::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrStatusItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrStatusItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrStatusItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrStatusItem::MergeFrom(const StatusSvrStatusItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void StatusSvrStatusItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrStatusItem::CopyFrom(const StatusSvrStatusItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrStatusItem::IsInitialized() const {

  return true;
}

void StatusSvrStatusItem::Swap(StatusSvrStatusItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrStatusItem::InternalSwap(StatusSvrStatusItem* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrStatusItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrStatusItem_descriptor_;
  metadata.reflection = StatusSvrStatusItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrStatusItem

// optional uint64 user_id = 1;
void StatusSvrStatusItem::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrStatusItem::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrStatusItem.user_id)
  return user_id_;
}
 void StatusSvrStatusItem::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrStatusItem.user_id)
}

// optional int32 status = 2;
void StatusSvrStatusItem::clear_status() {
  status_ = 0;
}
 ::google::protobuf::int32 StatusSvrStatusItem::status() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrStatusItem.status)
  return status_;
}
 void StatusSvrStatusItem::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrStatusItem.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrStatusQueryRsp::kRspMsgFieldNumber;
const int StatusSvrStatusQueryRsp::kStatusItemFieldNumber;
#endif  // !_MSC_VER

StatusSvrStatusQueryRsp::StatusSvrStatusQueryRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrStatusQueryRsp)
}

void StatusSvrStatusQueryRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

StatusSvrStatusQueryRsp::StatusSvrStatusQueryRsp(const StatusSvrStatusQueryRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrStatusQueryRsp)
}

void StatusSvrStatusQueryRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

StatusSvrStatusQueryRsp::~StatusSvrStatusQueryRsp() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrStatusQueryRsp)
  SharedDtor();
}

void StatusSvrStatusQueryRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void StatusSvrStatusQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrStatusQueryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrStatusQueryRsp_descriptor_;
}

const StatusSvrStatusQueryRsp& StatusSvrStatusQueryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrStatusQueryRsp* StatusSvrStatusQueryRsp::default_instance_ = NULL;

StatusSvrStatusQueryRsp* StatusSvrStatusQueryRsp::New(::google::protobuf::Arena* arena) const {
  StatusSvrStatusQueryRsp* n = new StatusSvrStatusQueryRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrStatusQueryRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  status_item_.Clear();
}

bool StatusSvrStatusQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrStatusQueryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status_item;
        break;
      }

      // repeated .yespo.StatusSvrStatusItem status_item = 2;
      case 2: {
        if (tag == 18) {
         parse_status_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_status_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_status_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrStatusQueryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrStatusQueryRsp)
  return false;
#undef DO_
}

void StatusSvrStatusQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrStatusQueryRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // repeated .yespo.StatusSvrStatusItem status_item = 2;
  for (unsigned int i = 0, n = this->status_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->status_item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrStatusQueryRsp)
}

::google::protobuf::uint8* StatusSvrStatusQueryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrStatusQueryRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // repeated .yespo.StatusSvrStatusItem status_item = 2;
  for (unsigned int i = 0, n = this->status_item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->status_item(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrStatusQueryRsp)
  return target;
}

int StatusSvrStatusQueryRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // repeated .yespo.StatusSvrStatusItem status_item = 2;
  total_size += 1 * this->status_item_size();
  for (int i = 0; i < this->status_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrStatusQueryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrStatusQueryRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrStatusQueryRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrStatusQueryRsp::MergeFrom(const StatusSvrStatusQueryRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  status_item_.MergeFrom(from.status_item_);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void StatusSvrStatusQueryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrStatusQueryRsp::CopyFrom(const StatusSvrStatusQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrStatusQueryRsp::IsInitialized() const {

  return true;
}

void StatusSvrStatusQueryRsp::Swap(StatusSvrStatusQueryRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrStatusQueryRsp::InternalSwap(StatusSvrStatusQueryRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  status_item_.UnsafeArenaSwap(&other->status_item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrStatusQueryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrStatusQueryRsp_descriptor_;
  metadata.reflection = StatusSvrStatusQueryRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrStatusQueryRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool StatusSvrStatusQueryRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void StatusSvrStatusQueryRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& StatusSvrStatusQueryRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrStatusQueryRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* StatusSvrStatusQueryRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrStatusQueryRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* StatusSvrStatusQueryRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void StatusSvrStatusQueryRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrStatusQueryRsp.rsp_msg)
}

// repeated .yespo.StatusSvrStatusItem status_item = 2;
int StatusSvrStatusQueryRsp::status_item_size() const {
  return status_item_.size();
}
void StatusSvrStatusQueryRsp::clear_status_item() {
  status_item_.Clear();
}
const ::yespo::StatusSvrStatusItem& StatusSvrStatusQueryRsp::status_item(int index) const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrStatusQueryRsp.status_item)
  return status_item_.Get(index);
}
::yespo::StatusSvrStatusItem* StatusSvrStatusQueryRsp::mutable_status_item(int index) {
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrStatusQueryRsp.status_item)
  return status_item_.Mutable(index);
}
::yespo::StatusSvrStatusItem* StatusSvrStatusQueryRsp::add_status_item() {
  // @@protoc_insertion_point(field_add:yespo.StatusSvrStatusQueryRsp.status_item)
  return status_item_.Add();
}
::google::protobuf::RepeatedPtrField< ::yespo::StatusSvrStatusItem >*
StatusSvrStatusQueryRsp::mutable_status_item() {
  // @@protoc_insertion_point(field_mutable_list:yespo.StatusSvrStatusQueryRsp.status_item)
  return &status_item_;
}
const ::google::protobuf::RepeatedPtrField< ::yespo::StatusSvrStatusItem >&
StatusSvrStatusQueryRsp::status_item() const {
  // @@protoc_insertion_point(field_list:yespo.StatusSvrStatusQueryRsp.status_item)
  return status_item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrUserInfoReq::kUserIdFieldNumber;
#endif  // !_MSC_VER

StatusSvrUserInfoReq::StatusSvrUserInfoReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrUserInfoReq)
}

void StatusSvrUserInfoReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

StatusSvrUserInfoReq::StatusSvrUserInfoReq(const StatusSvrUserInfoReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrUserInfoReq)
}

void StatusSvrUserInfoReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

StatusSvrUserInfoReq::~StatusSvrUserInfoReq() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrUserInfoReq)
  SharedDtor();
}

void StatusSvrUserInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusSvrUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrUserInfoReq_descriptor_;
}

const StatusSvrUserInfoReq& StatusSvrUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrUserInfoReq* StatusSvrUserInfoReq::default_instance_ = NULL;

StatusSvrUserInfoReq* StatusSvrUserInfoReq::New(::google::protobuf::Arena* arena) const {
  StatusSvrUserInfoReq* n = new StatusSvrUserInfoReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrUserInfoReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
}

bool StatusSvrUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrUserInfoReq)
  return false;
#undef DO_
}

void StatusSvrUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrUserInfoReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrUserInfoReq)
}

::google::protobuf::uint8* StatusSvrUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrUserInfoReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrUserInfoReq)
  return target;
}

int StatusSvrUserInfoReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrUserInfoReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrUserInfoReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrUserInfoReq::MergeFrom(const StatusSvrUserInfoReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void StatusSvrUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrUserInfoReq::CopyFrom(const StatusSvrUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrUserInfoReq::IsInitialized() const {

  return true;
}

void StatusSvrUserInfoReq::Swap(StatusSvrUserInfoReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrUserInfoReq::InternalSwap(StatusSvrUserInfoReq* other) {
  std::swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrUserInfoReq_descriptor_;
  metadata.reflection = StatusSvrUserInfoReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrUserInfoReq

// optional uint64 user_id = 1;
void StatusSvrUserInfoReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrUserInfoReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoReq.user_id)
  return user_id_;
}
 void StatusSvrUserInfoReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoReq.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StatusSvrUserInfoRsp::kRspMsgFieldNumber;
const int StatusSvrUserInfoRsp::kUserIdFieldNumber;
const int StatusSvrUserInfoRsp::kUserTypeFieldNumber;
const int StatusSvrUserInfoRsp::kDeviceTokenFieldNumber;
const int StatusSvrUserInfoRsp::kAccesssvrIpFieldNumber;
const int StatusSvrUserInfoRsp::kAccesssvrPortFieldNumber;
const int StatusSvrUserInfoRsp::kSocketFieldNumber;
#endif  // !_MSC_VER

StatusSvrUserInfoRsp::StatusSvrUserInfoRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.StatusSvrUserInfoRsp)
}

void StatusSvrUserInfoRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

StatusSvrUserInfoRsp::StatusSvrUserInfoRsp(const StatusSvrUserInfoRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.StatusSvrUserInfoRsp)
}

void StatusSvrUserInfoRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  user_type_ = 0u;
  device_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_port_ = 0u;
  socket_ = 0u;
}

StatusSvrUserInfoRsp::~StatusSvrUserInfoRsp() {
  // @@protoc_insertion_point(destructor:yespo.StatusSvrUserInfoRsp)
  SharedDtor();
}

void StatusSvrUserInfoRsp::SharedDtor() {
  device_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void StatusSvrUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusSvrUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusSvrUserInfoRsp_descriptor_;
}

const StatusSvrUserInfoRsp& StatusSvrUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

StatusSvrUserInfoRsp* StatusSvrUserInfoRsp::default_instance_ = NULL;

StatusSvrUserInfoRsp* StatusSvrUserInfoRsp::New(::google::protobuf::Arena* arena) const {
  StatusSvrUserInfoRsp* n = new StatusSvrUserInfoRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StatusSvrUserInfoRsp::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<StatusSvrUserInfoRsp*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_type_, accesssvr_port_);
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_ = 0u;

#undef ZR_HELPER_
#undef ZR_

}

bool StatusSvrUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.StatusSvrUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_user_type;
        break;
      }

      // optional uint32 user_type = 3;
      case 3: {
        if (tag == 24) {
         parse_user_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_type_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device_token;
        break;
      }

      // optional string device_token = 4;
      case 4: {
        if (tag == 34) {
         parse_device_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->device_token().data(), this->device_token().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrUserInfoRsp.device_token"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_accesssvr_ip;
        break;
      }

      // optional string accesssvr_ip = 5;
      case 5: {
        if (tag == 42) {
         parse_accesssvr_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssvr_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->accesssvr_ip().data(), this->accesssvr_ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.StatusSvrUserInfoRsp.accesssvr_ip"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accesssvr_port;
        break;
      }

      // optional uint32 accesssvr_port = 6;
      case 6: {
        if (tag == 48) {
         parse_accesssvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accesssvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_socket;
        break;
      }

      // optional uint32 socket = 7;
      case 7: {
        if (tag == 56) {
         parse_socket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.StatusSvrUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.StatusSvrUserInfoRsp)
  return false;
#undef DO_
}

void StatusSvrUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.StatusSvrUserInfoRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->user_type(), output);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrUserInfoRsp.device_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->device_token(), output);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrUserInfoRsp.accesssvr_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->accesssvr_ip(), output);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->accesssvr_port(), output);
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->socket(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.StatusSvrUserInfoRsp)
}

::google::protobuf::uint8* StatusSvrUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.StatusSvrUserInfoRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->user_type(), target);
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->device_token().data(), this->device_token().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrUserInfoRsp.device_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device_token(), target);
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->accesssvr_ip().data(), this->accesssvr_ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.StatusSvrUserInfoRsp.accesssvr_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->accesssvr_ip(), target);
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->accesssvr_port(), target);
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->socket(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.StatusSvrUserInfoRsp)
  return target;
}

int StatusSvrUserInfoRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 user_type = 3;
  if (this->user_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_type());
  }

  // optional string device_token = 4;
  if (this->device_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device_token());
  }

  // optional string accesssvr_ip = 5;
  if (this->accesssvr_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->accesssvr_ip());
  }

  // optional uint32 accesssvr_port = 6;
  if (this->accesssvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->accesssvr_port());
  }

  // optional uint32 socket = 7;
  if (this->socket() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->socket());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusSvrUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StatusSvrUserInfoRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StatusSvrUserInfoRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusSvrUserInfoRsp::MergeFrom(const StatusSvrUserInfoRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.user_type() != 0) {
    set_user_type(from.user_type());
  }
  if (from.device_token().size() > 0) {

    device_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_token_);
  }
  if (from.accesssvr_ip().size() > 0) {

    accesssvr_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.accesssvr_ip_);
  }
  if (from.accesssvr_port() != 0) {
    set_accesssvr_port(from.accesssvr_port());
  }
  if (from.socket() != 0) {
    set_socket(from.socket());
  }
}

void StatusSvrUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusSvrUserInfoRsp::CopyFrom(const StatusSvrUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusSvrUserInfoRsp::IsInitialized() const {

  return true;
}

void StatusSvrUserInfoRsp::Swap(StatusSvrUserInfoRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StatusSvrUserInfoRsp::InternalSwap(StatusSvrUserInfoRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  std::swap(user_id_, other->user_id_);
  std::swap(user_type_, other->user_type_);
  device_token_.Swap(&other->device_token_);
  accesssvr_ip_.Swap(&other->accesssvr_ip_);
  std::swap(accesssvr_port_, other->accesssvr_port_);
  std::swap(socket_, other->socket_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StatusSvrUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusSvrUserInfoRsp_descriptor_;
  metadata.reflection = StatusSvrUserInfoRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StatusSvrUserInfoRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool StatusSvrUserInfoRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void StatusSvrUserInfoRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& StatusSvrUserInfoRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* StatusSvrUserInfoRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrUserInfoRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* StatusSvrUserInfoRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void StatusSvrUserInfoRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrUserInfoRsp.rsp_msg)
}

// optional uint64 user_id = 2;
void StatusSvrUserInfoRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 StatusSvrUserInfoRsp::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.user_id)
  return user_id_;
}
 void StatusSvrUserInfoRsp::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.user_id)
}

// optional uint32 user_type = 3;
void StatusSvrUserInfoRsp::clear_user_type() {
  user_type_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrUserInfoRsp::user_type() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.user_type)
  return user_type_;
}
 void StatusSvrUserInfoRsp::set_user_type(::google::protobuf::uint32 value) {
  
  user_type_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.user_type)
}

// optional string device_token = 4;
void StatusSvrUserInfoRsp::clear_device_token() {
  device_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrUserInfoRsp::device_token() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.device_token)
  return device_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrUserInfoRsp::set_device_token(const ::std::string& value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.device_token)
}
 void StatusSvrUserInfoRsp::set_device_token(const char* value) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrUserInfoRsp.device_token)
}
 void StatusSvrUserInfoRsp::set_device_token(const char* value, size_t size) {
  
  device_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrUserInfoRsp.device_token)
}
 ::std::string* StatusSvrUserInfoRsp::mutable_device_token() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrUserInfoRsp.device_token)
  return device_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrUserInfoRsp::release_device_token() {
  
  return device_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrUserInfoRsp::set_allocated_device_token(::std::string* device_token) {
  if (device_token != NULL) {
    
  } else {
    
  }
  device_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device_token);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrUserInfoRsp.device_token)
}

// optional string accesssvr_ip = 5;
void StatusSvrUserInfoRsp::clear_accesssvr_ip() {
  accesssvr_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& StatusSvrUserInfoRsp::accesssvr_ip() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
  return accesssvr_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrUserInfoRsp::set_accesssvr_ip(const ::std::string& value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
}
 void StatusSvrUserInfoRsp::set_accesssvr_ip(const char* value) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
}
 void StatusSvrUserInfoRsp::set_accesssvr_ip(const char* value, size_t size) {
  
  accesssvr_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
}
 ::std::string* StatusSvrUserInfoRsp::mutable_accesssvr_ip() {
  
  // @@protoc_insertion_point(field_mutable:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
  return accesssvr_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StatusSvrUserInfoRsp::release_accesssvr_ip() {
  
  return accesssvr_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StatusSvrUserInfoRsp::set_allocated_accesssvr_ip(::std::string* accesssvr_ip) {
  if (accesssvr_ip != NULL) {
    
  } else {
    
  }
  accesssvr_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accesssvr_ip);
  // @@protoc_insertion_point(field_set_allocated:yespo.StatusSvrUserInfoRsp.accesssvr_ip)
}

// optional uint32 accesssvr_port = 6;
void StatusSvrUserInfoRsp::clear_accesssvr_port() {
  accesssvr_port_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrUserInfoRsp::accesssvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.accesssvr_port)
  return accesssvr_port_;
}
 void StatusSvrUserInfoRsp::set_accesssvr_port(::google::protobuf::uint32 value) {
  
  accesssvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.accesssvr_port)
}

// optional uint32 socket = 7;
void StatusSvrUserInfoRsp::clear_socket() {
  socket_ = 0u;
}
 ::google::protobuf::uint32 StatusSvrUserInfoRsp::socket() const {
  // @@protoc_insertion_point(field_get:yespo.StatusSvrUserInfoRsp.socket)
  return socket_;
}
 void StatusSvrUserInfoRsp::set_socket(::google::protobuf::uint32 value) {
  
  socket_ = value;
  // @@protoc_insertion_point(field_set:yespo.StatusSvrUserInfoRsp.socket)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrDistributeReq::kUserIdFieldNumber;
const int RoomsvrDistributeReq::kPartnerIdFieldNumber;
const int RoomsvrDistributeReq::kCalleeIdFieldNumber;
const int RoomsvrDistributeReq::kSourceLanguageFieldNumber;
const int RoomsvrDistributeReq::kTargetLanguageFieldNumber;
const int RoomsvrDistributeReq::kCallModeFieldNumber;
const int RoomsvrDistributeReq::kCallCountryFieldNumber;
const int RoomsvrDistributeReq::kCountryCodeFieldNumber;
const int RoomsvrDistributeReq::kParentCdrIdFieldNumber;
#endif  // !_MSC_VER

RoomsvrDistributeReq::RoomsvrDistributeReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrDistributeReq)
}

void RoomsvrDistributeReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrDistributeReq::RoomsvrDistributeReq(const RoomsvrDistributeReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrDistributeReq)
}

void RoomsvrDistributeReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  callee_id_ = GOOGLE_ULONGLONG(0);
  source_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsvrDistributeReq::~RoomsvrDistributeReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrDistributeReq)
  SharedDtor();
}

void RoomsvrDistributeReq::SharedDtor() {
  source_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsvrDistributeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrDistributeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrDistributeReq_descriptor_;
}

const RoomsvrDistributeReq& RoomsvrDistributeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrDistributeReq* RoomsvrDistributeReq::default_instance_ = NULL;

RoomsvrDistributeReq* RoomsvrDistributeReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrDistributeReq* n = new RoomsvrDistributeReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrDistributeReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrDistributeReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, callee_id_);
  source_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  target_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrDistributeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrDistributeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_callee_id;
        break;
      }

      // optional uint64 callee_id = 3;
      case 3: {
        if (tag == 24) {
         parse_callee_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &callee_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_source_language;
        break;
      }

      // optional string source_language = 4;
      case 4: {
        if (tag == 34) {
         parse_source_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->source_language().data(), this->source_language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.source_language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_target_language;
        break;
      }

      // optional string target_language = 5;
      case 5: {
        if (tag == 42) {
         parse_target_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_language()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->target_language().data(), this->target_language().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.target_language"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_call_mode;
        break;
      }

      // optional string call_mode = 6;
      case 6: {
        if (tag == 50) {
         parse_call_mode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_mode()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_mode().data(), this->call_mode().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.call_mode"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_call_country;
        break;
      }

      // optional string call_country = 7;
      case 7: {
        if (tag == 58) {
         parse_call_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_call_country()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->call_country().data(), this->call_country().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.call_country"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country_code;
        break;
      }

      // optional string country_code = 8;
      case 8: {
        if (tag == 66) {
         parse_country_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country_code()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->country_code().data(), this->country_code().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.country_code"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_parent_cdr_id;
        break;
      }

      // optional string parent_cdr_id = 9;
      case 9: {
        if (tag == 74) {
         parse_parent_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_cdr_id().data(), this->parent_cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeReq.parent_cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrDistributeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrDistributeReq)
  return false;
#undef DO_
}

void RoomsvrDistributeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrDistributeReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // optional uint64 callee_id = 3;
  if (this->callee_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->callee_id(), output);
  }

  // optional string source_language = 4;
  if (this->source_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), this->source_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.source_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->source_language(), output);
  }

  // optional string target_language = 5;
  if (this->target_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_language().data(), this->target_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.target_language");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->target_language(), output);
  }

  // optional string call_mode = 6;
  if (this->call_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_mode().data(), this->call_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.call_mode");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->call_mode(), output);
  }

  // optional string call_country = 7;
  if (this->call_country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_country().data(), this->call_country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.call_country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->call_country(), output);
  }

  // optional string country_code = 8;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.country_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country_code(), output);
  }

  // optional string parent_cdr_id = 9;
  if (this->parent_cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_cdr_id().data(), this->parent_cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.parent_cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->parent_cdr_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrDistributeReq)
}

::google::protobuf::uint8* RoomsvrDistributeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrDistributeReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // optional uint64 callee_id = 3;
  if (this->callee_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->callee_id(), target);
  }

  // optional string source_language = 4;
  if (this->source_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->source_language().data(), this->source_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.source_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_language(), target);
  }

  // optional string target_language = 5;
  if (this->target_language().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->target_language().data(), this->target_language().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.target_language");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->target_language(), target);
  }

  // optional string call_mode = 6;
  if (this->call_mode().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_mode().data(), this->call_mode().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.call_mode");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->call_mode(), target);
  }

  // optional string call_country = 7;
  if (this->call_country().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->call_country().data(), this->call_country().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.call_country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->call_country(), target);
  }

  // optional string country_code = 8;
  if (this->country_code().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->country_code().data(), this->country_code().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.country_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country_code(), target);
  }

  // optional string parent_cdr_id = 9;
  if (this->parent_cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_cdr_id().data(), this->parent_cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeReq.parent_cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->parent_cdr_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrDistributeReq)
  return target;
}

int RoomsvrDistributeReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional uint64 callee_id = 3;
  if (this->callee_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->callee_id());
  }

  // optional string source_language = 4;
  if (this->source_language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_language());
  }

  // optional string target_language = 5;
  if (this->target_language().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->target_language());
  }

  // optional string call_mode = 6;
  if (this->call_mode().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_mode());
  }

  // optional string call_country = 7;
  if (this->call_country().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->call_country());
  }

  // optional string country_code = 8;
  if (this->country_code().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country_code());
  }

  // optional string parent_cdr_id = 9;
  if (this->parent_cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_cdr_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrDistributeReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrDistributeReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrDistributeReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrDistributeReq::MergeFrom(const RoomsvrDistributeReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.callee_id() != 0) {
    set_callee_id(from.callee_id());
  }
  if (from.source_language().size() > 0) {

    source_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_language_);
  }
  if (from.target_language().size() > 0) {

    target_language_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.target_language_);
  }
  if (from.call_mode().size() > 0) {

    call_mode_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_mode_);
  }
  if (from.call_country().size() > 0) {

    call_country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.call_country_);
  }
  if (from.country_code().size() > 0) {

    country_code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_code_);
  }
  if (from.parent_cdr_id().size() > 0) {

    parent_cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_cdr_id_);
  }
}

void RoomsvrDistributeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrDistributeReq::CopyFrom(const RoomsvrDistributeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrDistributeReq::IsInitialized() const {

  return true;
}

void RoomsvrDistributeReq::Swap(RoomsvrDistributeReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrDistributeReq::InternalSwap(RoomsvrDistributeReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(callee_id_, other->callee_id_);
  source_language_.Swap(&other->source_language_);
  target_language_.Swap(&other->target_language_);
  call_mode_.Swap(&other->call_mode_);
  call_country_.Swap(&other->call_country_);
  country_code_.Swap(&other->country_code_);
  parent_cdr_id_.Swap(&other->parent_cdr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrDistributeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrDistributeReq_descriptor_;
  metadata.reflection = RoomsvrDistributeReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrDistributeReq

// optional uint64 user_id = 1;
void RoomsvrDistributeReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrDistributeReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.user_id)
  return user_id_;
}
 void RoomsvrDistributeReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.user_id)
}

// optional uint64 partner_id = 2;
void RoomsvrDistributeReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrDistributeReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.partner_id)
  return partner_id_;
}
 void RoomsvrDistributeReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.partner_id)
}

// optional uint64 callee_id = 3;
void RoomsvrDistributeReq::clear_callee_id() {
  callee_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrDistributeReq::callee_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.callee_id)
  return callee_id_;
}
 void RoomsvrDistributeReq::set_callee_id(::google::protobuf::uint64 value) {
  
  callee_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.callee_id)
}

// optional string source_language = 4;
void RoomsvrDistributeReq::clear_source_language() {
  source_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::source_language() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.source_language)
  return source_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_source_language(const ::std::string& value) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.source_language)
}
 void RoomsvrDistributeReq::set_source_language(const char* value) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.source_language)
}
 void RoomsvrDistributeReq::set_source_language(const char* value, size_t size) {
  
  source_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.source_language)
}
 ::std::string* RoomsvrDistributeReq::mutable_source_language() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.source_language)
  return source_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_source_language() {
  
  return source_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_source_language(::std::string* source_language) {
  if (source_language != NULL) {
    
  } else {
    
  }
  source_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_language);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.source_language)
}

// optional string target_language = 5;
void RoomsvrDistributeReq::clear_target_language() {
  target_language_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::target_language() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.target_language)
  return target_language_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_target_language(const ::std::string& value) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.target_language)
}
 void RoomsvrDistributeReq::set_target_language(const char* value) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.target_language)
}
 void RoomsvrDistributeReq::set_target_language(const char* value, size_t size) {
  
  target_language_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.target_language)
}
 ::std::string* RoomsvrDistributeReq::mutable_target_language() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.target_language)
  return target_language_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_target_language() {
  
  return target_language_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_target_language(::std::string* target_language) {
  if (target_language != NULL) {
    
  } else {
    
  }
  target_language_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_language);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.target_language)
}

// optional string call_mode = 6;
void RoomsvrDistributeReq::clear_call_mode() {
  call_mode_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::call_mode() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.call_mode)
  return call_mode_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_call_mode(const ::std::string& value) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.call_mode)
}
 void RoomsvrDistributeReq::set_call_mode(const char* value) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.call_mode)
}
 void RoomsvrDistributeReq::set_call_mode(const char* value, size_t size) {
  
  call_mode_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.call_mode)
}
 ::std::string* RoomsvrDistributeReq::mutable_call_mode() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.call_mode)
  return call_mode_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_call_mode() {
  
  return call_mode_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_call_mode(::std::string* call_mode) {
  if (call_mode != NULL) {
    
  } else {
    
  }
  call_mode_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_mode);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.call_mode)
}

// optional string call_country = 7;
void RoomsvrDistributeReq::clear_call_country() {
  call_country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::call_country() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.call_country)
  return call_country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_call_country(const ::std::string& value) {
  
  call_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.call_country)
}
 void RoomsvrDistributeReq::set_call_country(const char* value) {
  
  call_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.call_country)
}
 void RoomsvrDistributeReq::set_call_country(const char* value, size_t size) {
  
  call_country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.call_country)
}
 ::std::string* RoomsvrDistributeReq::mutable_call_country() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.call_country)
  return call_country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_call_country() {
  
  return call_country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_call_country(::std::string* call_country) {
  if (call_country != NULL) {
    
  } else {
    
  }
  call_country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), call_country);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.call_country)
}

// optional string country_code = 8;
void RoomsvrDistributeReq::clear_country_code() {
  country_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::country_code() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.country_code)
  return country_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_country_code(const ::std::string& value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.country_code)
}
 void RoomsvrDistributeReq::set_country_code(const char* value) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.country_code)
}
 void RoomsvrDistributeReq::set_country_code(const char* value, size_t size) {
  
  country_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.country_code)
}
 ::std::string* RoomsvrDistributeReq::mutable_country_code() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.country_code)
  return country_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_country_code() {
  
  return country_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_country_code(::std::string* country_code) {
  if (country_code != NULL) {
    
  } else {
    
  }
  country_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country_code);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.country_code)
}

// optional string parent_cdr_id = 9;
void RoomsvrDistributeReq::clear_parent_cdr_id() {
  parent_cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeReq::parent_cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeReq.parent_cdr_id)
  return parent_cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_parent_cdr_id(const ::std::string& value) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeReq.parent_cdr_id)
}
 void RoomsvrDistributeReq::set_parent_cdr_id(const char* value) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeReq.parent_cdr_id)
}
 void RoomsvrDistributeReq::set_parent_cdr_id(const char* value, size_t size) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeReq.parent_cdr_id)
}
 ::std::string* RoomsvrDistributeReq::mutable_parent_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeReq.parent_cdr_id)
  return parent_cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeReq::release_parent_cdr_id() {
  
  return parent_cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeReq::set_allocated_parent_cdr_id(::std::string* parent_cdr_id) {
  if (parent_cdr_id != NULL) {
    
  } else {
    
  }
  parent_cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeReq.parent_cdr_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrDistributeRsp::kRspMsgFieldNumber;
const int RoomsvrDistributeRsp::kUserIdFieldNumber;
const int RoomsvrDistributeRsp::kRoomAddressFieldNumber;
const int RoomsvrDistributeRsp::kCdrIdFieldNumber;
const int RoomsvrDistributeRsp::kRecordPathFieldNumber;
const int RoomsvrDistributeRsp::kParentCdrIdFieldNumber;
#endif  // !_MSC_VER

RoomsvrDistributeRsp::RoomsvrDistributeRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrDistributeRsp)
}

void RoomsvrDistributeRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrDistributeRsp::RoomsvrDistributeRsp(const RoomsvrDistributeRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrDistributeRsp)
}

void RoomsvrDistributeRsp::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  room_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsvrDistributeRsp::~RoomsvrDistributeRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrDistributeRsp)
  SharedDtor();
}

void RoomsvrDistributeRsp::SharedDtor() {
  room_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrDistributeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrDistributeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrDistributeRsp_descriptor_;
}

const RoomsvrDistributeRsp& RoomsvrDistributeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrDistributeRsp* RoomsvrDistributeRsp::default_instance_ = NULL;

RoomsvrDistributeRsp* RoomsvrDistributeRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrDistributeRsp* n = new RoomsvrDistributeRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrDistributeRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  room_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  record_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parent_cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RoomsvrDistributeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrDistributeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_room_address;
        break;
      }

      // optional string room_address = 3;
      case 3: {
        if (tag == 26) {
         parse_room_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_address().data(), this->room_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeRsp.room_address"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cdr_id;
        break;
      }

      // optional string cdr_id = 4;
      case 4: {
        if (tag == 34) {
         parse_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeRsp.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_record_path;
        break;
      }

      // optional string record_path = 5;
      case 5: {
        if (tag == 42) {
         parse_record_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->record_path().data(), this->record_path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeRsp.record_path"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_parent_cdr_id;
        break;
      }

      // optional string parent_cdr_id = 6;
      case 6: {
        if (tag == 50) {
         parse_parent_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent_cdr_id().data(), this->parent_cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrDistributeRsp.parent_cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrDistributeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrDistributeRsp)
  return false;
#undef DO_
}

void RoomsvrDistributeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrDistributeRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // optional string room_address = 3;
  if (this->room_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_address().data(), this->room_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.room_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->room_address(), output);
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cdr_id(), output);
  }

  // optional string record_path = 5;
  if (this->record_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record_path().data(), this->record_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.record_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->record_path(), output);
  }

  // optional string parent_cdr_id = 6;
  if (this->parent_cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_cdr_id().data(), this->parent_cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.parent_cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->parent_cdr_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrDistributeRsp)
}

::google::protobuf::uint8* RoomsvrDistributeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrDistributeRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // optional string room_address = 3;
  if (this->room_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_address().data(), this->room_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.room_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->room_address(), target);
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cdr_id(), target);
  }

  // optional string record_path = 5;
  if (this->record_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->record_path().data(), this->record_path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.record_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->record_path(), target);
  }

  // optional string parent_cdr_id = 6;
  if (this->parent_cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent_cdr_id().data(), this->parent_cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrDistributeRsp.parent_cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->parent_cdr_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrDistributeRsp)
  return target;
}

int RoomsvrDistributeRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional string room_address = 3;
  if (this->room_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_address());
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  // optional string record_path = 5;
  if (this->record_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->record_path());
  }

  // optional string parent_cdr_id = 6;
  if (this->parent_cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent_cdr_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrDistributeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrDistributeRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrDistributeRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrDistributeRsp::MergeFrom(const RoomsvrDistributeRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.room_address().size() > 0) {

    room_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_address_);
  }
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
  if (from.record_path().size() > 0) {

    record_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.record_path_);
  }
  if (from.parent_cdr_id().size() > 0) {

    parent_cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent_cdr_id_);
  }
}

void RoomsvrDistributeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrDistributeRsp::CopyFrom(const RoomsvrDistributeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrDistributeRsp::IsInitialized() const {

  return true;
}

void RoomsvrDistributeRsp::Swap(RoomsvrDistributeRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrDistributeRsp::InternalSwap(RoomsvrDistributeRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  std::swap(user_id_, other->user_id_);
  room_address_.Swap(&other->room_address_);
  cdr_id_.Swap(&other->cdr_id_);
  record_path_.Swap(&other->record_path_);
  parent_cdr_id_.Swap(&other->parent_cdr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrDistributeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrDistributeRsp_descriptor_;
  metadata.reflection = RoomsvrDistributeRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrDistributeRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrDistributeRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrDistributeRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrDistributeRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrDistributeRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrDistributeRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrDistributeRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeRsp.rsp_msg)
}

// optional uint64 user_id = 2;
void RoomsvrDistributeRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrDistributeRsp::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.user_id)
  return user_id_;
}
 void RoomsvrDistributeRsp::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeRsp.user_id)
}

// optional string room_address = 3;
void RoomsvrDistributeRsp::clear_room_address() {
  room_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeRsp::room_address() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.room_address)
  return room_address_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_room_address(const ::std::string& value) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeRsp.room_address)
}
 void RoomsvrDistributeRsp::set_room_address(const char* value) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeRsp.room_address)
}
 void RoomsvrDistributeRsp::set_room_address(const char* value, size_t size) {
  
  room_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeRsp.room_address)
}
 ::std::string* RoomsvrDistributeRsp::mutable_room_address() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeRsp.room_address)
  return room_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeRsp::release_room_address() {
  
  return room_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_allocated_room_address(::std::string* room_address) {
  if (room_address != NULL) {
    
  } else {
    
  }
  room_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_address);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeRsp.room_address)
}

// optional string cdr_id = 4;
void RoomsvrDistributeRsp::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeRsp::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeRsp.cdr_id)
}
 void RoomsvrDistributeRsp::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeRsp.cdr_id)
}
 void RoomsvrDistributeRsp::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeRsp.cdr_id)
}
 ::std::string* RoomsvrDistributeRsp::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeRsp.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeRsp::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeRsp.cdr_id)
}

// optional string record_path = 5;
void RoomsvrDistributeRsp::clear_record_path() {
  record_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeRsp::record_path() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.record_path)
  return record_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_record_path(const ::std::string& value) {
  
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeRsp.record_path)
}
 void RoomsvrDistributeRsp::set_record_path(const char* value) {
  
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeRsp.record_path)
}
 void RoomsvrDistributeRsp::set_record_path(const char* value, size_t size) {
  
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeRsp.record_path)
}
 ::std::string* RoomsvrDistributeRsp::mutable_record_path() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeRsp.record_path)
  return record_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeRsp::release_record_path() {
  
  return record_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_allocated_record_path(::std::string* record_path) {
  if (record_path != NULL) {
    
  } else {
    
  }
  record_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_path);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeRsp.record_path)
}

// optional string parent_cdr_id = 6;
void RoomsvrDistributeRsp::clear_parent_cdr_id() {
  parent_cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrDistributeRsp::parent_cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrDistributeRsp.parent_cdr_id)
  return parent_cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_parent_cdr_id(const ::std::string& value) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrDistributeRsp.parent_cdr_id)
}
 void RoomsvrDistributeRsp::set_parent_cdr_id(const char* value) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrDistributeRsp.parent_cdr_id)
}
 void RoomsvrDistributeRsp::set_parent_cdr_id(const char* value, size_t size) {
  
  parent_cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrDistributeRsp.parent_cdr_id)
}
 ::std::string* RoomsvrDistributeRsp::mutable_parent_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrDistributeRsp.parent_cdr_id)
  return parent_cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrDistributeRsp::release_parent_cdr_id() {
  
  return parent_cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrDistributeRsp::set_allocated_parent_cdr_id(::std::string* parent_cdr_id) {
  if (parent_cdr_id != NULL) {
    
  } else {
    
  }
  parent_cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent_cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrDistributeRsp.parent_cdr_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrCallCancelReq::kUserIdFieldNumber;
const int RoomsvrCallCancelReq::kPartnerIdFieldNumber;
#endif  // !_MSC_VER

RoomsvrCallCancelReq::RoomsvrCallCancelReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrCallCancelReq)
}

void RoomsvrCallCancelReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrCallCancelReq::RoomsvrCallCancelReq(const RoomsvrCallCancelReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrCallCancelReq)
}

void RoomsvrCallCancelReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
}

RoomsvrCallCancelReq::~RoomsvrCallCancelReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrCallCancelReq)
  SharedDtor();
}

void RoomsvrCallCancelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrCallCancelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrCallCancelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrCallCancelReq_descriptor_;
}

const RoomsvrCallCancelReq& RoomsvrCallCancelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrCallCancelReq* RoomsvrCallCancelReq::default_instance_ = NULL;

RoomsvrCallCancelReq* RoomsvrCallCancelReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrCallCancelReq* n = new RoomsvrCallCancelReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrCallCancelReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrCallCancelReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, partner_id_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrCallCancelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrCallCancelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrCallCancelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrCallCancelReq)
  return false;
#undef DO_
}

void RoomsvrCallCancelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrCallCancelReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrCallCancelReq)
}

::google::protobuf::uint8* RoomsvrCallCancelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrCallCancelReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrCallCancelReq)
  return target;
}

int RoomsvrCallCancelReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrCallCancelReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrCallCancelReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrCallCancelReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrCallCancelReq::MergeFrom(const RoomsvrCallCancelReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
}

void RoomsvrCallCancelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrCallCancelReq::CopyFrom(const RoomsvrCallCancelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrCallCancelReq::IsInitialized() const {

  return true;
}

void RoomsvrCallCancelReq::Swap(RoomsvrCallCancelReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrCallCancelReq::InternalSwap(RoomsvrCallCancelReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrCallCancelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrCallCancelReq_descriptor_;
  metadata.reflection = RoomsvrCallCancelReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrCallCancelReq

// optional uint64 user_id = 1;
void RoomsvrCallCancelReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrCallCancelReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrCallCancelReq.user_id)
  return user_id_;
}
 void RoomsvrCallCancelReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrCallCancelReq.user_id)
}

// optional uint64 partner_id = 2;
void RoomsvrCallCancelReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrCallCancelReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrCallCancelReq.partner_id)
  return partner_id_;
}
 void RoomsvrCallCancelReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrCallCancelReq.partner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrCallCancelRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrCallCancelRsp::RoomsvrCallCancelRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrCallCancelRsp)
}

void RoomsvrCallCancelRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrCallCancelRsp::RoomsvrCallCancelRsp(const RoomsvrCallCancelRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrCallCancelRsp)
}

void RoomsvrCallCancelRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrCallCancelRsp::~RoomsvrCallCancelRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrCallCancelRsp)
  SharedDtor();
}

void RoomsvrCallCancelRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrCallCancelRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrCallCancelRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrCallCancelRsp_descriptor_;
}

const RoomsvrCallCancelRsp& RoomsvrCallCancelRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrCallCancelRsp* RoomsvrCallCancelRsp::default_instance_ = NULL;

RoomsvrCallCancelRsp* RoomsvrCallCancelRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrCallCancelRsp* n = new RoomsvrCallCancelRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrCallCancelRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrCallCancelRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrCallCancelRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrCallCancelRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrCallCancelRsp)
  return false;
#undef DO_
}

void RoomsvrCallCancelRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrCallCancelRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrCallCancelRsp)
}

::google::protobuf::uint8* RoomsvrCallCancelRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrCallCancelRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrCallCancelRsp)
  return target;
}

int RoomsvrCallCancelRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrCallCancelRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrCallCancelRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrCallCancelRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrCallCancelRsp::MergeFrom(const RoomsvrCallCancelRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrCallCancelRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrCallCancelRsp::CopyFrom(const RoomsvrCallCancelRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrCallCancelRsp::IsInitialized() const {

  return true;
}

void RoomsvrCallCancelRsp::Swap(RoomsvrCallCancelRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrCallCancelRsp::InternalSwap(RoomsvrCallCancelRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrCallCancelRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrCallCancelRsp_descriptor_;
  metadata.reflection = RoomsvrCallCancelRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrCallCancelRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrCallCancelRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrCallCancelRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrCallCancelRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrCallCancelRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrCallCancelRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrCallCancelRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrCallCancelRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrCallCancelRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrCallCancelRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrPartnerStatusReq::kUserIdFieldNumber;
const int RoomsvrPartnerStatusReq::kPartnerIdFieldNumber;
#endif  // !_MSC_VER

RoomsvrPartnerStatusReq::RoomsvrPartnerStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrPartnerStatusReq)
}

void RoomsvrPartnerStatusReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrPartnerStatusReq::RoomsvrPartnerStatusReq(const RoomsvrPartnerStatusReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrPartnerStatusReq)
}

void RoomsvrPartnerStatusReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
}

RoomsvrPartnerStatusReq::~RoomsvrPartnerStatusReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrPartnerStatusReq)
  SharedDtor();
}

void RoomsvrPartnerStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrPartnerStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrPartnerStatusReq_descriptor_;
}

const RoomsvrPartnerStatusReq& RoomsvrPartnerStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrPartnerStatusReq* RoomsvrPartnerStatusReq::default_instance_ = NULL;

RoomsvrPartnerStatusReq* RoomsvrPartnerStatusReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrPartnerStatusReq* n = new RoomsvrPartnerStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrPartnerStatusReq::Clear() {
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_.Clear();
}

bool RoomsvrPartnerStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrPartnerStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_partner_id;
        break;
      }

      // repeated uint64 partner_id = 2;
      case 2: {
        if (tag == 18) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_partner_id())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 18, input, this->mutable_partner_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrPartnerStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrPartnerStatusReq)
  return false;
#undef DO_
}

void RoomsvrPartnerStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrPartnerStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // repeated uint64 partner_id = 2;
  if (this->partner_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_partner_id_cached_byte_size_);
  }
  for (int i = 0; i < this->partner_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->partner_id(i), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrPartnerStatusReq)
}

::google::protobuf::uint8* RoomsvrPartnerStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrPartnerStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // repeated uint64 partner_id = 2;
  if (this->partner_id_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _partner_id_cached_byte_size_, target);
  }
  for (int i = 0; i < this->partner_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->partner_id(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrPartnerStatusReq)
  return target;
}

int RoomsvrPartnerStatusReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated uint64 partner_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->partner_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->partner_id(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _partner_id_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrPartnerStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrPartnerStatusReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrPartnerStatusReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrPartnerStatusReq::MergeFrom(const RoomsvrPartnerStatusReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  partner_id_.MergeFrom(from.partner_id_);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void RoomsvrPartnerStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrPartnerStatusReq::CopyFrom(const RoomsvrPartnerStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrPartnerStatusReq::IsInitialized() const {

  return true;
}

void RoomsvrPartnerStatusReq::Swap(RoomsvrPartnerStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrPartnerStatusReq::InternalSwap(RoomsvrPartnerStatusReq* other) {
  std::swap(user_id_, other->user_id_);
  partner_id_.UnsafeArenaSwap(&other->partner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrPartnerStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrPartnerStatusReq_descriptor_;
  metadata.reflection = RoomsvrPartnerStatusReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrPartnerStatusReq

// optional uint64 user_id = 1;
void RoomsvrPartnerStatusReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrPartnerStatusReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusReq.user_id)
  return user_id_;
}
 void RoomsvrPartnerStatusReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusReq.user_id)
}

// repeated uint64 partner_id = 2;
int RoomsvrPartnerStatusReq::partner_id_size() const {
  return partner_id_.size();
}
void RoomsvrPartnerStatusReq::clear_partner_id() {
  partner_id_.Clear();
}
 ::google::protobuf::uint64 RoomsvrPartnerStatusReq::partner_id(int index) const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusReq.partner_id)
  return partner_id_.Get(index);
}
 void RoomsvrPartnerStatusReq::set_partner_id(int index, ::google::protobuf::uint64 value) {
  partner_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusReq.partner_id)
}
 void RoomsvrPartnerStatusReq::add_partner_id(::google::protobuf::uint64 value) {
  partner_id_.Add(value);
  // @@protoc_insertion_point(field_add:yespo.RoomsvrPartnerStatusReq.partner_id)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoomsvrPartnerStatusReq::partner_id() const {
  // @@protoc_insertion_point(field_list:yespo.RoomsvrPartnerStatusReq.partner_id)
  return partner_id_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoomsvrPartnerStatusReq::mutable_partner_id() {
  // @@protoc_insertion_point(field_mutable_list:yespo.RoomsvrPartnerStatusReq.partner_id)
  return &partner_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrPartnerStatusItem::kPartnerIdFieldNumber;
const int RoomsvrPartnerStatusItem::kOnlineStatusFieldNumber;
const int RoomsvrPartnerStatusItem::kCallStatusFieldNumber;
#endif  // !_MSC_VER

RoomsvrPartnerStatusItem::RoomsvrPartnerStatusItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrPartnerStatusItem)
}

void RoomsvrPartnerStatusItem::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrPartnerStatusItem::RoomsvrPartnerStatusItem(const RoomsvrPartnerStatusItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrPartnerStatusItem)
}

void RoomsvrPartnerStatusItem::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  partner_id_ = GOOGLE_ULONGLONG(0);
  online_status_ = 0;
  call_status_ = 0;
}

RoomsvrPartnerStatusItem::~RoomsvrPartnerStatusItem() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrPartnerStatusItem)
  SharedDtor();
}

void RoomsvrPartnerStatusItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrPartnerStatusItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrPartnerStatusItem_descriptor_;
}

const RoomsvrPartnerStatusItem& RoomsvrPartnerStatusItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrPartnerStatusItem* RoomsvrPartnerStatusItem::default_instance_ = NULL;

RoomsvrPartnerStatusItem* RoomsvrPartnerStatusItem::New(::google::protobuf::Arena* arena) const {
  RoomsvrPartnerStatusItem* n = new RoomsvrPartnerStatusItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrPartnerStatusItem::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrPartnerStatusItem*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(partner_id_, call_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrPartnerStatusItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrPartnerStatusItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 partner_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_online_status;
        break;
      }

      // optional int32 online_status = 2;
      case 2: {
        if (tag == 16) {
         parse_online_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_call_status;
        break;
      }

      // optional int32 call_status = 3;
      case 3: {
        if (tag == 24) {
         parse_call_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrPartnerStatusItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrPartnerStatusItem)
  return false;
#undef DO_
}

void RoomsvrPartnerStatusItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrPartnerStatusItem)
  // optional uint64 partner_id = 1;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->partner_id(), output);
  }

  // optional int32 online_status = 2;
  if (this->online_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online_status(), output);
  }

  // optional int32 call_status = 3;
  if (this->call_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->call_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrPartnerStatusItem)
}

::google::protobuf::uint8* RoomsvrPartnerStatusItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrPartnerStatusItem)
  // optional uint64 partner_id = 1;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->partner_id(), target);
  }

  // optional int32 online_status = 2;
  if (this->online_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online_status(), target);
  }

  // optional int32 call_status = 3;
  if (this->call_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->call_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrPartnerStatusItem)
  return target;
}

int RoomsvrPartnerStatusItem::ByteSize() const {
  int total_size = 0;

  // optional uint64 partner_id = 1;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional int32 online_status = 2;
  if (this->online_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->online_status());
  }

  // optional int32 call_status = 3;
  if (this->call_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->call_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrPartnerStatusItem::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrPartnerStatusItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrPartnerStatusItem>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrPartnerStatusItem::MergeFrom(const RoomsvrPartnerStatusItem& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.online_status() != 0) {
    set_online_status(from.online_status());
  }
  if (from.call_status() != 0) {
    set_call_status(from.call_status());
  }
}

void RoomsvrPartnerStatusItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrPartnerStatusItem::CopyFrom(const RoomsvrPartnerStatusItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrPartnerStatusItem::IsInitialized() const {

  return true;
}

void RoomsvrPartnerStatusItem::Swap(RoomsvrPartnerStatusItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrPartnerStatusItem::InternalSwap(RoomsvrPartnerStatusItem* other) {
  std::swap(partner_id_, other->partner_id_);
  std::swap(online_status_, other->online_status_);
  std::swap(call_status_, other->call_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrPartnerStatusItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrPartnerStatusItem_descriptor_;
  metadata.reflection = RoomsvrPartnerStatusItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrPartnerStatusItem

// optional uint64 partner_id = 1;
void RoomsvrPartnerStatusItem::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrPartnerStatusItem::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusItem.partner_id)
  return partner_id_;
}
 void RoomsvrPartnerStatusItem::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusItem.partner_id)
}

// optional int32 online_status = 2;
void RoomsvrPartnerStatusItem::clear_online_status() {
  online_status_ = 0;
}
 ::google::protobuf::int32 RoomsvrPartnerStatusItem::online_status() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusItem.online_status)
  return online_status_;
}
 void RoomsvrPartnerStatusItem::set_online_status(::google::protobuf::int32 value) {
  
  online_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusItem.online_status)
}

// optional int32 call_status = 3;
void RoomsvrPartnerStatusItem::clear_call_status() {
  call_status_ = 0;
}
 ::google::protobuf::int32 RoomsvrPartnerStatusItem::call_status() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusItem.call_status)
  return call_status_;
}
 void RoomsvrPartnerStatusItem::set_call_status(::google::protobuf::int32 value) {
  
  call_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusItem.call_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrPartnerStatusRsp::kRspMsgFieldNumber;
const int RoomsvrPartnerStatusRsp::kUserIdFieldNumber;
const int RoomsvrPartnerStatusRsp::kStatusItemFieldNumber;
#endif  // !_MSC_VER

RoomsvrPartnerStatusRsp::RoomsvrPartnerStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrPartnerStatusRsp)
}

void RoomsvrPartnerStatusRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrPartnerStatusRsp::RoomsvrPartnerStatusRsp(const RoomsvrPartnerStatusRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrPartnerStatusRsp)
}

void RoomsvrPartnerStatusRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
}

RoomsvrPartnerStatusRsp::~RoomsvrPartnerStatusRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrPartnerStatusRsp)
  SharedDtor();
}

void RoomsvrPartnerStatusRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrPartnerStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrPartnerStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrPartnerStatusRsp_descriptor_;
}

const RoomsvrPartnerStatusRsp& RoomsvrPartnerStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrPartnerStatusRsp* RoomsvrPartnerStatusRsp::default_instance_ = NULL;

RoomsvrPartnerStatusRsp* RoomsvrPartnerStatusRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrPartnerStatusRsp* n = new RoomsvrPartnerStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrPartnerStatusRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
  user_id_ = GOOGLE_ULONGLONG(0);
  status_item_.Clear();
}

bool RoomsvrPartnerStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrPartnerStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional uint64 user_id = 2;
      case 2: {
        if (tag == 16) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_status_item;
        break;
      }

      // repeated .yespo.RoomsvrPartnerStatusItem status_item = 3;
      case 3: {
        if (tag == 26) {
         parse_status_item:
          DO_(input->IncrementRecursionDepth());
         parse_loop_status_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_status_item;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrPartnerStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrPartnerStatusRsp)
  return false;
#undef DO_
}

void RoomsvrPartnerStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrPartnerStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->user_id(), output);
  }

  // repeated .yespo.RoomsvrPartnerStatusItem status_item = 3;
  for (unsigned int i = 0, n = this->status_item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->status_item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrPartnerStatusRsp)
}

::google::protobuf::uint8* RoomsvrPartnerStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrPartnerStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->user_id(), target);
  }

  // repeated .yespo.RoomsvrPartnerStatusItem status_item = 3;
  for (unsigned int i = 0, n = this->status_item_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->status_item(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrPartnerStatusRsp)
  return target;
}

int RoomsvrPartnerStatusRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  // optional uint64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // repeated .yespo.RoomsvrPartnerStatusItem status_item = 3;
  total_size += 1 * this->status_item_size();
  for (int i = 0; i < this->status_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status_item(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrPartnerStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrPartnerStatusRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrPartnerStatusRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrPartnerStatusRsp::MergeFrom(const RoomsvrPartnerStatusRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  status_item_.MergeFrom(from.status_item_);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void RoomsvrPartnerStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrPartnerStatusRsp::CopyFrom(const RoomsvrPartnerStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrPartnerStatusRsp::IsInitialized() const {

  return true;
}

void RoomsvrPartnerStatusRsp::Swap(RoomsvrPartnerStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrPartnerStatusRsp::InternalSwap(RoomsvrPartnerStatusRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  std::swap(user_id_, other->user_id_);
  status_item_.UnsafeArenaSwap(&other->status_item_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrPartnerStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrPartnerStatusRsp_descriptor_;
  metadata.reflection = RoomsvrPartnerStatusRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrPartnerStatusRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrPartnerStatusRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrPartnerStatusRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrPartnerStatusRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrPartnerStatusRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrPartnerStatusRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrPartnerStatusRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrPartnerStatusRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrPartnerStatusRsp.rsp_msg)
}

// optional uint64 user_id = 2;
void RoomsvrPartnerStatusRsp::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrPartnerStatusRsp::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusRsp.user_id)
  return user_id_;
}
 void RoomsvrPartnerStatusRsp::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrPartnerStatusRsp.user_id)
}

// repeated .yespo.RoomsvrPartnerStatusItem status_item = 3;
int RoomsvrPartnerStatusRsp::status_item_size() const {
  return status_item_.size();
}
void RoomsvrPartnerStatusRsp::clear_status_item() {
  status_item_.Clear();
}
const ::yespo::RoomsvrPartnerStatusItem& RoomsvrPartnerStatusRsp::status_item(int index) const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrPartnerStatusRsp.status_item)
  return status_item_.Get(index);
}
::yespo::RoomsvrPartnerStatusItem* RoomsvrPartnerStatusRsp::mutable_status_item(int index) {
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrPartnerStatusRsp.status_item)
  return status_item_.Mutable(index);
}
::yespo::RoomsvrPartnerStatusItem* RoomsvrPartnerStatusRsp::add_status_item() {
  // @@protoc_insertion_point(field_add:yespo.RoomsvrPartnerStatusRsp.status_item)
  return status_item_.Add();
}
::google::protobuf::RepeatedPtrField< ::yespo::RoomsvrPartnerStatusItem >*
RoomsvrPartnerStatusRsp::mutable_status_item() {
  // @@protoc_insertion_point(field_mutable_list:yespo.RoomsvrPartnerStatusRsp.status_item)
  return &status_item_;
}
const ::google::protobuf::RepeatedPtrField< ::yespo::RoomsvrPartnerStatusItem >&
RoomsvrPartnerStatusRsp::status_item() const {
  // @@protoc_insertion_point(field_list:yespo.RoomsvrPartnerStatusRsp.status_item)
  return status_item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoomsvrCheckExpireReq::RoomsvrCheckExpireReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrCheckExpireReq)
}

void RoomsvrCheckExpireReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrCheckExpireReq::RoomsvrCheckExpireReq(const RoomsvrCheckExpireReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrCheckExpireReq)
}

void RoomsvrCheckExpireReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

RoomsvrCheckExpireReq::~RoomsvrCheckExpireReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrCheckExpireReq)
  SharedDtor();
}

void RoomsvrCheckExpireReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrCheckExpireReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrCheckExpireReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrCheckExpireReq_descriptor_;
}

const RoomsvrCheckExpireReq& RoomsvrCheckExpireReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrCheckExpireReq* RoomsvrCheckExpireReq::default_instance_ = NULL;

RoomsvrCheckExpireReq* RoomsvrCheckExpireReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrCheckExpireReq* n = new RoomsvrCheckExpireReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrCheckExpireReq::Clear() {
}

bool RoomsvrCheckExpireReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrCheckExpireReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrCheckExpireReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrCheckExpireReq)
  return false;
#undef DO_
}

void RoomsvrCheckExpireReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrCheckExpireReq)
  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrCheckExpireReq)
}

::google::protobuf::uint8* RoomsvrCheckExpireReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrCheckExpireReq)
  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrCheckExpireReq)
  return target;
}

int RoomsvrCheckExpireReq::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrCheckExpireReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrCheckExpireReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrCheckExpireReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrCheckExpireReq::MergeFrom(const RoomsvrCheckExpireReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void RoomsvrCheckExpireReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrCheckExpireReq::CopyFrom(const RoomsvrCheckExpireReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrCheckExpireReq::IsInitialized() const {

  return true;
}

void RoomsvrCheckExpireReq::Swap(RoomsvrCheckExpireReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrCheckExpireReq::InternalSwap(RoomsvrCheckExpireReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrCheckExpireReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrCheckExpireReq_descriptor_;
  metadata.reflection = RoomsvrCheckExpireReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrCheckExpireReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstPeerStatusReq::kUserIdFieldNumber;
const int RoomsvrAstPeerStatusReq::kPeerStatusFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstPeerStatusReq::RoomsvrAstPeerStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstPeerStatusReq)
}

void RoomsvrAstPeerStatusReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrAstPeerStatusReq::RoomsvrAstPeerStatusReq(const RoomsvrAstPeerStatusReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstPeerStatusReq)
}

void RoomsvrAstPeerStatusReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  peer_status_ = 0;
}

RoomsvrAstPeerStatusReq::~RoomsvrAstPeerStatusReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstPeerStatusReq)
  SharedDtor();
}

void RoomsvrAstPeerStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrAstPeerStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstPeerStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstPeerStatusReq_descriptor_;
}

const RoomsvrAstPeerStatusReq& RoomsvrAstPeerStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstPeerStatusReq* RoomsvrAstPeerStatusReq::default_instance_ = NULL;

RoomsvrAstPeerStatusReq* RoomsvrAstPeerStatusReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstPeerStatusReq* n = new RoomsvrAstPeerStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstPeerStatusReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrAstPeerStatusReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, peer_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrAstPeerStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstPeerStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_peer_status;
        break;
      }

      // optional int32 peer_status = 2;
      case 2: {
        if (tag == 16) {
         parse_peer_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstPeerStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstPeerStatusReq)
  return false;
#undef DO_
}

void RoomsvrAstPeerStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstPeerStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional int32 peer_status = 2;
  if (this->peer_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->peer_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstPeerStatusReq)
}

::google::protobuf::uint8* RoomsvrAstPeerStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstPeerStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 peer_status = 2;
  if (this->peer_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->peer_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstPeerStatusReq)
  return target;
}

int RoomsvrAstPeerStatusReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional int32 peer_status = 2;
  if (this->peer_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->peer_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstPeerStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstPeerStatusReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstPeerStatusReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstPeerStatusReq::MergeFrom(const RoomsvrAstPeerStatusReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.peer_status() != 0) {
    set_peer_status(from.peer_status());
  }
}

void RoomsvrAstPeerStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstPeerStatusReq::CopyFrom(const RoomsvrAstPeerStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstPeerStatusReq::IsInitialized() const {

  return true;
}

void RoomsvrAstPeerStatusReq::Swap(RoomsvrAstPeerStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstPeerStatusReq::InternalSwap(RoomsvrAstPeerStatusReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(peer_status_, other->peer_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstPeerStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstPeerStatusReq_descriptor_;
  metadata.reflection = RoomsvrAstPeerStatusReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstPeerStatusReq

// optional uint64 user_id = 1;
void RoomsvrAstPeerStatusReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrAstPeerStatusReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstPeerStatusReq.user_id)
  return user_id_;
}
 void RoomsvrAstPeerStatusReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstPeerStatusReq.user_id)
}

// optional int32 peer_status = 2;
void RoomsvrAstPeerStatusReq::clear_peer_status() {
  peer_status_ = 0;
}
 ::google::protobuf::int32 RoomsvrAstPeerStatusReq::peer_status() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstPeerStatusReq.peer_status)
  return peer_status_;
}
 void RoomsvrAstPeerStatusReq::set_peer_status(::google::protobuf::int32 value) {
  
  peer_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstPeerStatusReq.peer_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstPeerStatusRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstPeerStatusRsp::RoomsvrAstPeerStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstPeerStatusRsp)
}

void RoomsvrAstPeerStatusRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrAstPeerStatusRsp::RoomsvrAstPeerStatusRsp(const RoomsvrAstPeerStatusRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstPeerStatusRsp)
}

void RoomsvrAstPeerStatusRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrAstPeerStatusRsp::~RoomsvrAstPeerStatusRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstPeerStatusRsp)
  SharedDtor();
}

void RoomsvrAstPeerStatusRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrAstPeerStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstPeerStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstPeerStatusRsp_descriptor_;
}

const RoomsvrAstPeerStatusRsp& RoomsvrAstPeerStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstPeerStatusRsp* RoomsvrAstPeerStatusRsp::default_instance_ = NULL;

RoomsvrAstPeerStatusRsp* RoomsvrAstPeerStatusRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstPeerStatusRsp* n = new RoomsvrAstPeerStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstPeerStatusRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrAstPeerStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstPeerStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstPeerStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstPeerStatusRsp)
  return false;
#undef DO_
}

void RoomsvrAstPeerStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstPeerStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstPeerStatusRsp)
}

::google::protobuf::uint8* RoomsvrAstPeerStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstPeerStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstPeerStatusRsp)
  return target;
}

int RoomsvrAstPeerStatusRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstPeerStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstPeerStatusRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstPeerStatusRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstPeerStatusRsp::MergeFrom(const RoomsvrAstPeerStatusRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrAstPeerStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstPeerStatusRsp::CopyFrom(const RoomsvrAstPeerStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstPeerStatusRsp::IsInitialized() const {

  return true;
}

void RoomsvrAstPeerStatusRsp::Swap(RoomsvrAstPeerStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstPeerStatusRsp::InternalSwap(RoomsvrAstPeerStatusRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstPeerStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstPeerStatusRsp_descriptor_;
  metadata.reflection = RoomsvrAstPeerStatusRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstPeerStatusRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrAstPeerStatusRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrAstPeerStatusRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrAstPeerStatusRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstPeerStatusRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstPeerStatusRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstPeerStatusRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstPeerStatusRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrAstPeerStatusRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstPeerStatusRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstListCallReq::kAstPubAddrFieldNumber;
const int RoomsvrAstListCallReq::kAstAddrFieldNumber;
const int RoomsvrAstListCallReq::kUserIdsFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstListCallReq::RoomsvrAstListCallReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstListCallReq)
}

void RoomsvrAstListCallReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrAstListCallReq::RoomsvrAstListCallReq(const RoomsvrAstListCallReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstListCallReq)
}

void RoomsvrAstListCallReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ast_pub_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ast_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsvrAstListCallReq::~RoomsvrAstListCallReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstListCallReq)
  SharedDtor();
}

void RoomsvrAstListCallReq::SharedDtor() {
  ast_pub_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ast_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsvrAstListCallReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstListCallReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstListCallReq_descriptor_;
}

const RoomsvrAstListCallReq& RoomsvrAstListCallReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstListCallReq* RoomsvrAstListCallReq::default_instance_ = NULL;

RoomsvrAstListCallReq* RoomsvrAstListCallReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstListCallReq* n = new RoomsvrAstListCallReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstListCallReq::Clear() {
  ast_pub_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ast_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ids_.Clear();
}

bool RoomsvrAstListCallReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstListCallReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ast_pub_addr = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_pub_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ast_pub_addr().data(), this->ast_pub_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstListCallReq.ast_pub_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ast_addr;
        break;
      }

      // optional string ast_addr = 2;
      case 2: {
        if (tag == 18) {
         parse_ast_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ast_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ast_addr().data(), this->ast_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstListCallReq.ast_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user_ids;
        break;
      }

      // repeated uint64 user_ids = 3;
      case 3: {
        if (tag == 26) {
         parse_user_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_user_ids())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26, input, this->mutable_user_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstListCallReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstListCallReq)
  return false;
#undef DO_
}

void RoomsvrAstListCallReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstListCallReq)
  // optional string ast_pub_addr = 1;
  if (this->ast_pub_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ast_pub_addr().data(), this->ast_pub_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstListCallReq.ast_pub_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ast_pub_addr(), output);
  }

  // optional string ast_addr = 2;
  if (this->ast_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ast_addr().data(), this->ast_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstListCallReq.ast_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->ast_addr(), output);
  }

  // repeated uint64 user_ids = 3;
  if (this->user_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_user_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->user_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->user_ids(i), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstListCallReq)
}

::google::protobuf::uint8* RoomsvrAstListCallReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstListCallReq)
  // optional string ast_pub_addr = 1;
  if (this->ast_pub_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ast_pub_addr().data(), this->ast_pub_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstListCallReq.ast_pub_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ast_pub_addr(), target);
  }

  // optional string ast_addr = 2;
  if (this->ast_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ast_addr().data(), this->ast_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstListCallReq.ast_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ast_addr(), target);
  }

  // repeated uint64 user_ids = 3;
  if (this->user_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _user_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->user_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->user_ids(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstListCallReq)
  return target;
}

int RoomsvrAstListCallReq::ByteSize() const {
  int total_size = 0;

  // optional string ast_pub_addr = 1;
  if (this->ast_pub_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ast_pub_addr());
  }

  // optional string ast_addr = 2;
  if (this->ast_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ast_addr());
  }

  // repeated uint64 user_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->user_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _user_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstListCallReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstListCallReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstListCallReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstListCallReq::MergeFrom(const RoomsvrAstListCallReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  user_ids_.MergeFrom(from.user_ids_);
  if (from.ast_pub_addr().size() > 0) {

    ast_pub_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ast_pub_addr_);
  }
  if (from.ast_addr().size() > 0) {

    ast_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ast_addr_);
  }
}

void RoomsvrAstListCallReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstListCallReq::CopyFrom(const RoomsvrAstListCallReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstListCallReq::IsInitialized() const {

  return true;
}

void RoomsvrAstListCallReq::Swap(RoomsvrAstListCallReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstListCallReq::InternalSwap(RoomsvrAstListCallReq* other) {
  ast_pub_addr_.Swap(&other->ast_pub_addr_);
  ast_addr_.Swap(&other->ast_addr_);
  user_ids_.UnsafeArenaSwap(&other->user_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstListCallReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstListCallReq_descriptor_;
  metadata.reflection = RoomsvrAstListCallReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstListCallReq

// optional string ast_pub_addr = 1;
void RoomsvrAstListCallReq::clear_ast_pub_addr() {
  ast_pub_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstListCallReq::ast_pub_addr() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstListCallReq.ast_pub_addr)
  return ast_pub_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstListCallReq::set_ast_pub_addr(const ::std::string& value) {
  
  ast_pub_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstListCallReq.ast_pub_addr)
}
 void RoomsvrAstListCallReq::set_ast_pub_addr(const char* value) {
  
  ast_pub_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstListCallReq.ast_pub_addr)
}
 void RoomsvrAstListCallReq::set_ast_pub_addr(const char* value, size_t size) {
  
  ast_pub_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstListCallReq.ast_pub_addr)
}
 ::std::string* RoomsvrAstListCallReq::mutable_ast_pub_addr() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstListCallReq.ast_pub_addr)
  return ast_pub_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstListCallReq::release_ast_pub_addr() {
  
  return ast_pub_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstListCallReq::set_allocated_ast_pub_addr(::std::string* ast_pub_addr) {
  if (ast_pub_addr != NULL) {
    
  } else {
    
  }
  ast_pub_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ast_pub_addr);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstListCallReq.ast_pub_addr)
}

// optional string ast_addr = 2;
void RoomsvrAstListCallReq::clear_ast_addr() {
  ast_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstListCallReq::ast_addr() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstListCallReq.ast_addr)
  return ast_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstListCallReq::set_ast_addr(const ::std::string& value) {
  
  ast_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstListCallReq.ast_addr)
}
 void RoomsvrAstListCallReq::set_ast_addr(const char* value) {
  
  ast_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstListCallReq.ast_addr)
}
 void RoomsvrAstListCallReq::set_ast_addr(const char* value, size_t size) {
  
  ast_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstListCallReq.ast_addr)
}
 ::std::string* RoomsvrAstListCallReq::mutable_ast_addr() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstListCallReq.ast_addr)
  return ast_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstListCallReq::release_ast_addr() {
  
  return ast_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstListCallReq::set_allocated_ast_addr(::std::string* ast_addr) {
  if (ast_addr != NULL) {
    
  } else {
    
  }
  ast_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ast_addr);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstListCallReq.ast_addr)
}

// repeated uint64 user_ids = 3;
int RoomsvrAstListCallReq::user_ids_size() const {
  return user_ids_.size();
}
void RoomsvrAstListCallReq::clear_user_ids() {
  user_ids_.Clear();
}
 ::google::protobuf::uint64 RoomsvrAstListCallReq::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstListCallReq.user_ids)
  return user_ids_.Get(index);
}
 void RoomsvrAstListCallReq::set_user_ids(int index, ::google::protobuf::uint64 value) {
  user_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstListCallReq.user_ids)
}
 void RoomsvrAstListCallReq::add_user_ids(::google::protobuf::uint64 value) {
  user_ids_.Add(value);
  // @@protoc_insertion_point(field_add:yespo.RoomsvrAstListCallReq.user_ids)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RoomsvrAstListCallReq::user_ids() const {
  // @@protoc_insertion_point(field_list:yespo.RoomsvrAstListCallReq.user_ids)
  return user_ids_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RoomsvrAstListCallReq::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:yespo.RoomsvrAstListCallReq.user_ids)
  return &user_ids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstListCallRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstListCallRsp::RoomsvrAstListCallRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstListCallRsp)
}

void RoomsvrAstListCallRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrAstListCallRsp::RoomsvrAstListCallRsp(const RoomsvrAstListCallRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstListCallRsp)
}

void RoomsvrAstListCallRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrAstListCallRsp::~RoomsvrAstListCallRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstListCallRsp)
  SharedDtor();
}

void RoomsvrAstListCallRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrAstListCallRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstListCallRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstListCallRsp_descriptor_;
}

const RoomsvrAstListCallRsp& RoomsvrAstListCallRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstListCallRsp* RoomsvrAstListCallRsp::default_instance_ = NULL;

RoomsvrAstListCallRsp* RoomsvrAstListCallRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstListCallRsp* n = new RoomsvrAstListCallRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstListCallRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrAstListCallRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstListCallRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstListCallRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstListCallRsp)
  return false;
#undef DO_
}

void RoomsvrAstListCallRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstListCallRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstListCallRsp)
}

::google::protobuf::uint8* RoomsvrAstListCallRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstListCallRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstListCallRsp)
  return target;
}

int RoomsvrAstListCallRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstListCallRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstListCallRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstListCallRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstListCallRsp::MergeFrom(const RoomsvrAstListCallRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrAstListCallRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstListCallRsp::CopyFrom(const RoomsvrAstListCallRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstListCallRsp::IsInitialized() const {

  return true;
}

void RoomsvrAstListCallRsp::Swap(RoomsvrAstListCallRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstListCallRsp::InternalSwap(RoomsvrAstListCallRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstListCallRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstListCallRsp_descriptor_;
  metadata.reflection = RoomsvrAstListCallRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstListCallRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrAstListCallRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrAstListCallRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrAstListCallRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstListCallRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstListCallRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstListCallRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstListCallRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrAstListCallRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstListCallRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstCallStatusReq::kUserIdFieldNumber;
const int RoomsvrAstCallStatusReq::kAstCallStatusFieldNumber;
const int RoomsvrAstCallStatusReq::kCdrIdFieldNumber;
const int RoomsvrAstCallStatusReq::kAmisvrAddrFieldNumber;
const int RoomsvrAstCallStatusReq::kAmisvrPortFieldNumber;
const int RoomsvrAstCallStatusReq::kCallerChannelFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstCallStatusReq::RoomsvrAstCallStatusReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstCallStatusReq)
}

void RoomsvrAstCallStatusReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrAstCallStatusReq::RoomsvrAstCallStatusReq(const RoomsvrAstCallStatusReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstCallStatusReq)
}

void RoomsvrAstCallStatusReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  ast_call_status_ = 0u;
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amisvr_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amisvr_port_ = 0u;
  caller_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsvrAstCallStatusReq::~RoomsvrAstCallStatusReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstCallStatusReq)
  SharedDtor();
}

void RoomsvrAstCallStatusReq::SharedDtor() {
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amisvr_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsvrAstCallStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstCallStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstCallStatusReq_descriptor_;
}

const RoomsvrAstCallStatusReq& RoomsvrAstCallStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstCallStatusReq* RoomsvrAstCallStatusReq::default_instance_ = NULL;

RoomsvrAstCallStatusReq* RoomsvrAstCallStatusReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstCallStatusReq* n = new RoomsvrAstCallStatusReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstCallStatusReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrAstCallStatusReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ast_call_status_, amisvr_port_);
  user_id_ = GOOGLE_ULONGLONG(0);
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amisvr_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrAstCallStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstCallStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ast_call_status;
        break;
      }

      // optional uint32 ast_call_status = 2;
      case 2: {
        if (tag == 16) {
         parse_ast_call_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ast_call_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cdr_id;
        break;
      }

      // optional string cdr_id = 3;
      case 3: {
        if (tag == 26) {
         parse_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstCallStatusReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_amisvr_addr;
        break;
      }

      // optional string amisvr_addr = 4;
      case 4: {
        if (tag == 34) {
         parse_amisvr_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_amisvr_addr()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->amisvr_addr().data(), this->amisvr_addr().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstCallStatusReq.amisvr_addr"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_amisvr_port;
        break;
      }

      // optional uint32 amisvr_port = 5;
      case 5: {
        if (tag == 40) {
         parse_amisvr_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &amisvr_port_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_caller_channel;
        break;
      }

      // optional string caller_channel = 6;
      case 6: {
        if (tag == 50) {
         parse_caller_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->caller_channel().data(), this->caller_channel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstCallStatusReq.caller_channel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstCallStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstCallStatusReq)
  return false;
#undef DO_
}

void RoomsvrAstCallStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstCallStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint32 ast_call_status = 2;
  if (this->ast_call_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ast_call_status(), output);
  }

  // optional string cdr_id = 3;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cdr_id(), output);
  }

  // optional string amisvr_addr = 4;
  if (this->amisvr_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amisvr_addr().data(), this->amisvr_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.amisvr_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->amisvr_addr(), output);
  }

  // optional uint32 amisvr_port = 5;
  if (this->amisvr_port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->amisvr_port(), output);
  }

  // optional string caller_channel = 6;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.caller_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->caller_channel(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstCallStatusReq)
}

::google::protobuf::uint8* RoomsvrAstCallStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstCallStatusReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint32 ast_call_status = 2;
  if (this->ast_call_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ast_call_status(), target);
  }

  // optional string cdr_id = 3;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cdr_id(), target);
  }

  // optional string amisvr_addr = 4;
  if (this->amisvr_addr().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->amisvr_addr().data(), this->amisvr_addr().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.amisvr_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->amisvr_addr(), target);
  }

  // optional uint32 amisvr_port = 5;
  if (this->amisvr_port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->amisvr_port(), target);
  }

  // optional string caller_channel = 6;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStatusReq.caller_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->caller_channel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstCallStatusReq)
  return target;
}

int RoomsvrAstCallStatusReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint32 ast_call_status = 2;
  if (this->ast_call_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ast_call_status());
  }

  // optional string cdr_id = 3;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  // optional string amisvr_addr = 4;
  if (this->amisvr_addr().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->amisvr_addr());
  }

  // optional uint32 amisvr_port = 5;
  if (this->amisvr_port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->amisvr_port());
  }

  // optional string caller_channel = 6;
  if (this->caller_channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller_channel());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstCallStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstCallStatusReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstCallStatusReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstCallStatusReq::MergeFrom(const RoomsvrAstCallStatusReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.ast_call_status() != 0) {
    set_ast_call_status(from.ast_call_status());
  }
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
  if (from.amisvr_addr().size() > 0) {

    amisvr_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.amisvr_addr_);
  }
  if (from.amisvr_port() != 0) {
    set_amisvr_port(from.amisvr_port());
  }
  if (from.caller_channel().size() > 0) {

    caller_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_channel_);
  }
}

void RoomsvrAstCallStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstCallStatusReq::CopyFrom(const RoomsvrAstCallStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstCallStatusReq::IsInitialized() const {

  return true;
}

void RoomsvrAstCallStatusReq::Swap(RoomsvrAstCallStatusReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstCallStatusReq::InternalSwap(RoomsvrAstCallStatusReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(ast_call_status_, other->ast_call_status_);
  cdr_id_.Swap(&other->cdr_id_);
  amisvr_addr_.Swap(&other->amisvr_addr_);
  std::swap(amisvr_port_, other->amisvr_port_);
  caller_channel_.Swap(&other->caller_channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstCallStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstCallStatusReq_descriptor_;
  metadata.reflection = RoomsvrAstCallStatusReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstCallStatusReq

// optional uint64 user_id = 1;
void RoomsvrAstCallStatusReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrAstCallStatusReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.user_id)
  return user_id_;
}
 void RoomsvrAstCallStatusReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.user_id)
}

// optional uint32 ast_call_status = 2;
void RoomsvrAstCallStatusReq::clear_ast_call_status() {
  ast_call_status_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrAstCallStatusReq::ast_call_status() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.ast_call_status)
  return ast_call_status_;
}
 void RoomsvrAstCallStatusReq::set_ast_call_status(::google::protobuf::uint32 value) {
  
  ast_call_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.ast_call_status)
}

// optional string cdr_id = 3;
void RoomsvrAstCallStatusReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstCallStatusReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.cdr_id)
}
 void RoomsvrAstCallStatusReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstCallStatusReq.cdr_id)
}
 void RoomsvrAstCallStatusReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstCallStatusReq.cdr_id)
}
 ::std::string* RoomsvrAstCallStatusReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStatusReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstCallStatusReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStatusReq.cdr_id)
}

// optional string amisvr_addr = 4;
void RoomsvrAstCallStatusReq::clear_amisvr_addr() {
  amisvr_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstCallStatusReq::amisvr_addr() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
  return amisvr_addr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_amisvr_addr(const ::std::string& value) {
  
  amisvr_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
}
 void RoomsvrAstCallStatusReq::set_amisvr_addr(const char* value) {
  
  amisvr_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
}
 void RoomsvrAstCallStatusReq::set_amisvr_addr(const char* value, size_t size) {
  
  amisvr_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
}
 ::std::string* RoomsvrAstCallStatusReq::mutable_amisvr_addr() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
  return amisvr_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstCallStatusReq::release_amisvr_addr() {
  
  return amisvr_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_allocated_amisvr_addr(::std::string* amisvr_addr) {
  if (amisvr_addr != NULL) {
    
  } else {
    
  }
  amisvr_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amisvr_addr);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStatusReq.amisvr_addr)
}

// optional uint32 amisvr_port = 5;
void RoomsvrAstCallStatusReq::clear_amisvr_port() {
  amisvr_port_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrAstCallStatusReq::amisvr_port() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.amisvr_port)
  return amisvr_port_;
}
 void RoomsvrAstCallStatusReq::set_amisvr_port(::google::protobuf::uint32 value) {
  
  amisvr_port_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.amisvr_port)
}

// optional string caller_channel = 6;
void RoomsvrAstCallStatusReq::clear_caller_channel() {
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstCallStatusReq::caller_channel() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusReq.caller_channel)
  return caller_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_caller_channel(const ::std::string& value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStatusReq.caller_channel)
}
 void RoomsvrAstCallStatusReq::set_caller_channel(const char* value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstCallStatusReq.caller_channel)
}
 void RoomsvrAstCallStatusReq::set_caller_channel(const char* value, size_t size) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstCallStatusReq.caller_channel)
}
 ::std::string* RoomsvrAstCallStatusReq::mutable_caller_channel() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStatusReq.caller_channel)
  return caller_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstCallStatusReq::release_caller_channel() {
  
  return caller_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStatusReq::set_allocated_caller_channel(::std::string* caller_channel) {
  if (caller_channel != NULL) {
    
  } else {
    
  }
  caller_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller_channel);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStatusReq.caller_channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstCallStatusRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstCallStatusRsp::RoomsvrAstCallStatusRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstCallStatusRsp)
}

void RoomsvrAstCallStatusRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrAstCallStatusRsp::RoomsvrAstCallStatusRsp(const RoomsvrAstCallStatusRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstCallStatusRsp)
}

void RoomsvrAstCallStatusRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrAstCallStatusRsp::~RoomsvrAstCallStatusRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstCallStatusRsp)
  SharedDtor();
}

void RoomsvrAstCallStatusRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrAstCallStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstCallStatusRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstCallStatusRsp_descriptor_;
}

const RoomsvrAstCallStatusRsp& RoomsvrAstCallStatusRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstCallStatusRsp* RoomsvrAstCallStatusRsp::default_instance_ = NULL;

RoomsvrAstCallStatusRsp* RoomsvrAstCallStatusRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstCallStatusRsp* n = new RoomsvrAstCallStatusRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstCallStatusRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrAstCallStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstCallStatusRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstCallStatusRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstCallStatusRsp)
  return false;
#undef DO_
}

void RoomsvrAstCallStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstCallStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstCallStatusRsp)
}

::google::protobuf::uint8* RoomsvrAstCallStatusRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstCallStatusRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstCallStatusRsp)
  return target;
}

int RoomsvrAstCallStatusRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstCallStatusRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstCallStatusRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstCallStatusRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstCallStatusRsp::MergeFrom(const RoomsvrAstCallStatusRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrAstCallStatusRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstCallStatusRsp::CopyFrom(const RoomsvrAstCallStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstCallStatusRsp::IsInitialized() const {

  return true;
}

void RoomsvrAstCallStatusRsp::Swap(RoomsvrAstCallStatusRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstCallStatusRsp::InternalSwap(RoomsvrAstCallStatusRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstCallStatusRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstCallStatusRsp_descriptor_;
  metadata.reflection = RoomsvrAstCallStatusRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstCallStatusRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrAstCallStatusRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrAstCallStatusRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrAstCallStatusRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStatusRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstCallStatusRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStatusRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstCallStatusRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrAstCallStatusRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStatusRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrVideoSendReq::kUserIdFieldNumber;
const int RoomsvrVideoSendReq::kPartnerIdFieldNumber;
const int RoomsvrVideoSendReq::kVideoStatusFieldNumber;
#endif  // !_MSC_VER

RoomsvrVideoSendReq::RoomsvrVideoSendReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrVideoSendReq)
}

void RoomsvrVideoSendReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrVideoSendReq::RoomsvrVideoSendReq(const RoomsvrVideoSendReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrVideoSendReq)
}

void RoomsvrVideoSendReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  video_status_ = 0u;
}

RoomsvrVideoSendReq::~RoomsvrVideoSendReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrVideoSendReq)
  SharedDtor();
}

void RoomsvrVideoSendReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrVideoSendReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrVideoSendReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrVideoSendReq_descriptor_;
}

const RoomsvrVideoSendReq& RoomsvrVideoSendReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrVideoSendReq* RoomsvrVideoSendReq::default_instance_ = NULL;

RoomsvrVideoSendReq* RoomsvrVideoSendReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrVideoSendReq* n = new RoomsvrVideoSendReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrVideoSendReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrVideoSendReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, video_status_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrVideoSendReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrVideoSendReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_video_status;
        break;
      }

      // optional uint32 video_status = 3;
      case 3: {
        if (tag == 24) {
         parse_video_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_status_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrVideoSendReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrVideoSendReq)
  return false;
#undef DO_
}

void RoomsvrVideoSendReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrVideoSendReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->video_status(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrVideoSendReq)
}

::google::protobuf::uint8* RoomsvrVideoSendReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrVideoSendReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->video_status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrVideoSendReq)
  return target;
}

int RoomsvrVideoSendReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional uint32 video_status = 3;
  if (this->video_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_status());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrVideoSendReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrVideoSendReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrVideoSendReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrVideoSendReq::MergeFrom(const RoomsvrVideoSendReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.video_status() != 0) {
    set_video_status(from.video_status());
  }
}

void RoomsvrVideoSendReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrVideoSendReq::CopyFrom(const RoomsvrVideoSendReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrVideoSendReq::IsInitialized() const {

  return true;
}

void RoomsvrVideoSendReq::Swap(RoomsvrVideoSendReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrVideoSendReq::InternalSwap(RoomsvrVideoSendReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(video_status_, other->video_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrVideoSendReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrVideoSendReq_descriptor_;
  metadata.reflection = RoomsvrVideoSendReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrVideoSendReq

// optional uint64 user_id = 1;
void RoomsvrVideoSendReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrVideoSendReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoSendReq.user_id)
  return user_id_;
}
 void RoomsvrVideoSendReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoSendReq.user_id)
}

// optional uint64 partner_id = 2;
void RoomsvrVideoSendReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrVideoSendReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoSendReq.partner_id)
  return partner_id_;
}
 void RoomsvrVideoSendReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoSendReq.partner_id)
}

// optional uint32 video_status = 3;
void RoomsvrVideoSendReq::clear_video_status() {
  video_status_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrVideoSendReq::video_status() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoSendReq.video_status)
  return video_status_;
}
 void RoomsvrVideoSendReq::set_video_status(::google::protobuf::uint32 value) {
  
  video_status_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoSendReq.video_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrVideoSendRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrVideoSendRsp::RoomsvrVideoSendRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrVideoSendRsp)
}

void RoomsvrVideoSendRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrVideoSendRsp::RoomsvrVideoSendRsp(const RoomsvrVideoSendRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrVideoSendRsp)
}

void RoomsvrVideoSendRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrVideoSendRsp::~RoomsvrVideoSendRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrVideoSendRsp)
  SharedDtor();
}

void RoomsvrVideoSendRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrVideoSendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrVideoSendRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrVideoSendRsp_descriptor_;
}

const RoomsvrVideoSendRsp& RoomsvrVideoSendRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrVideoSendRsp* RoomsvrVideoSendRsp::default_instance_ = NULL;

RoomsvrVideoSendRsp* RoomsvrVideoSendRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrVideoSendRsp* n = new RoomsvrVideoSendRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrVideoSendRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrVideoSendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrVideoSendRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrVideoSendRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrVideoSendRsp)
  return false;
#undef DO_
}

void RoomsvrVideoSendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrVideoSendRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrVideoSendRsp)
}

::google::protobuf::uint8* RoomsvrVideoSendRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrVideoSendRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrVideoSendRsp)
  return target;
}

int RoomsvrVideoSendRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrVideoSendRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrVideoSendRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrVideoSendRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrVideoSendRsp::MergeFrom(const RoomsvrVideoSendRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrVideoSendRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrVideoSendRsp::CopyFrom(const RoomsvrVideoSendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrVideoSendRsp::IsInitialized() const {

  return true;
}

void RoomsvrVideoSendRsp::Swap(RoomsvrVideoSendRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrVideoSendRsp::InternalSwap(RoomsvrVideoSendRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrVideoSendRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrVideoSendRsp_descriptor_;
  metadata.reflection = RoomsvrVideoSendRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrVideoSendRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrVideoSendRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrVideoSendRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrVideoSendRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoSendRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrVideoSendRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrVideoSendRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrVideoSendRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrVideoSendRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrVideoSendRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrVideoRecvReq::kUserIdFieldNumber;
const int RoomsvrVideoRecvReq::kPartnerIdFieldNumber;
const int RoomsvrVideoRecvReq::kResultFieldNumber;
#endif  // !_MSC_VER

RoomsvrVideoRecvReq::RoomsvrVideoRecvReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrVideoRecvReq)
}

void RoomsvrVideoRecvReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrVideoRecvReq::RoomsvrVideoRecvReq(const RoomsvrVideoRecvReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrVideoRecvReq)
}

void RoomsvrVideoRecvReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
  result_ = 0u;
}

RoomsvrVideoRecvReq::~RoomsvrVideoRecvReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrVideoRecvReq)
  SharedDtor();
}

void RoomsvrVideoRecvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomsvrVideoRecvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrVideoRecvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrVideoRecvReq_descriptor_;
}

const RoomsvrVideoRecvReq& RoomsvrVideoRecvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrVideoRecvReq* RoomsvrVideoRecvReq::default_instance_ = NULL;

RoomsvrVideoRecvReq* RoomsvrVideoRecvReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrVideoRecvReq* n = new RoomsvrVideoRecvReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrVideoRecvReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrVideoRecvReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(user_id_, result_);

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrVideoRecvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrVideoRecvReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 2;
      case 2: {
        if (tag == 16) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrVideoRecvReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrVideoRecvReq)
  return false;
#undef DO_
}

void RoomsvrVideoRecvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrVideoRecvReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->partner_id(), output);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrVideoRecvReq)
}

::google::protobuf::uint8* RoomsvrVideoRecvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrVideoRecvReq)
  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->partner_id(), target);
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrVideoRecvReq)
  return target;
}

int RoomsvrVideoRecvReq::ByteSize() const {
  int total_size = 0;

  // optional uint64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->user_id());
  }

  // optional uint64 partner_id = 2;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  // optional uint32 result = 3;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrVideoRecvReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrVideoRecvReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrVideoRecvReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrVideoRecvReq::MergeFrom(const RoomsvrVideoRecvReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void RoomsvrVideoRecvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrVideoRecvReq::CopyFrom(const RoomsvrVideoRecvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrVideoRecvReq::IsInitialized() const {

  return true;
}

void RoomsvrVideoRecvReq::Swap(RoomsvrVideoRecvReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrVideoRecvReq::InternalSwap(RoomsvrVideoRecvReq* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(partner_id_, other->partner_id_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrVideoRecvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrVideoRecvReq_descriptor_;
  metadata.reflection = RoomsvrVideoRecvReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrVideoRecvReq

// optional uint64 user_id = 1;
void RoomsvrVideoRecvReq::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrVideoRecvReq::user_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoRecvReq.user_id)
  return user_id_;
}
 void RoomsvrVideoRecvReq::set_user_id(::google::protobuf::uint64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoRecvReq.user_id)
}

// optional uint64 partner_id = 2;
void RoomsvrVideoRecvReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrVideoRecvReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoRecvReq.partner_id)
  return partner_id_;
}
 void RoomsvrVideoRecvReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoRecvReq.partner_id)
}

// optional uint32 result = 3;
void RoomsvrVideoRecvReq::clear_result() {
  result_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrVideoRecvReq::result() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoRecvReq.result)
  return result_;
}
 void RoomsvrVideoRecvReq::set_result(::google::protobuf::uint32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrVideoRecvReq.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrVideoRecvRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrVideoRecvRsp::RoomsvrVideoRecvRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrVideoRecvRsp)
}

void RoomsvrVideoRecvRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrVideoRecvRsp::RoomsvrVideoRecvRsp(const RoomsvrVideoRecvRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrVideoRecvRsp)
}

void RoomsvrVideoRecvRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrVideoRecvRsp::~RoomsvrVideoRecvRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrVideoRecvRsp)
  SharedDtor();
}

void RoomsvrVideoRecvRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrVideoRecvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrVideoRecvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrVideoRecvRsp_descriptor_;
}

const RoomsvrVideoRecvRsp& RoomsvrVideoRecvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrVideoRecvRsp* RoomsvrVideoRecvRsp::default_instance_ = NULL;

RoomsvrVideoRecvRsp* RoomsvrVideoRecvRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrVideoRecvRsp* n = new RoomsvrVideoRecvRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrVideoRecvRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrVideoRecvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrVideoRecvRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrVideoRecvRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrVideoRecvRsp)
  return false;
#undef DO_
}

void RoomsvrVideoRecvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrVideoRecvRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrVideoRecvRsp)
}

::google::protobuf::uint8* RoomsvrVideoRecvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrVideoRecvRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrVideoRecvRsp)
  return target;
}

int RoomsvrVideoRecvRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrVideoRecvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrVideoRecvRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrVideoRecvRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrVideoRecvRsp::MergeFrom(const RoomsvrVideoRecvRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrVideoRecvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrVideoRecvRsp::CopyFrom(const RoomsvrVideoRecvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrVideoRecvRsp::IsInitialized() const {

  return true;
}

void RoomsvrVideoRecvRsp::Swap(RoomsvrVideoRecvRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrVideoRecvRsp::InternalSwap(RoomsvrVideoRecvRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrVideoRecvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrVideoRecvRsp_descriptor_;
  metadata.reflection = RoomsvrVideoRecvRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrVideoRecvRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrVideoRecvRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrVideoRecvRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrVideoRecvRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrVideoRecvRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrVideoRecvRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrVideoRecvRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrVideoRecvRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrVideoRecvRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrVideoRecvRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstCallStateReq::kRoleFieldNumber;
const int RoomsvrAstCallStateReq::kStateFieldNumber;
const int RoomsvrAstCallStateReq::kRingingTimeFieldNumber;
const int RoomsvrAstCallStateReq::kCdrIdFieldNumber;
const int RoomsvrAstCallStateReq::kReasonFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstCallStateReq::RoomsvrAstCallStateReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstCallStateReq)
}

void RoomsvrAstCallStateReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrAstCallStateReq::RoomsvrAstCallStateReq(const RoomsvrAstCallStateReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstCallStateReq)
}

void RoomsvrAstCallStateReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  role_ = 0u;
  state_ = 0u;
  ringing_time_ = 0u;
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RoomsvrAstCallStateReq::~RoomsvrAstCallStateReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstCallStateReq)
  SharedDtor();
}

void RoomsvrAstCallStateReq::SharedDtor() {
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsvrAstCallStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstCallStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstCallStateReq_descriptor_;
}

const RoomsvrAstCallStateReq& RoomsvrAstCallStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstCallStateReq* RoomsvrAstCallStateReq::default_instance_ = NULL;

RoomsvrAstCallStateReq* RoomsvrAstCallStateReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstCallStateReq* n = new RoomsvrAstCallStateReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstCallStateReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrAstCallStateReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(role_, state_);
  ringing_time_ = 0u;
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrAstCallStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstCallStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional uint32 state = 2;
      case 2: {
        if (tag == 16) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ringing_time;
        break;
      }

      // optional uint32 ringing_time = 3;
      case 3: {
        if (tag == 24) {
         parse_ringing_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ringing_time_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cdr_id;
        break;
      }

      // optional string cdr_id = 4;
      case 4: {
        if (tag == 34) {
         parse_cdr_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstCallStateReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (tag == 42) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrAstCallStateReq.reason"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstCallStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstCallStateReq)
  return false;
#undef DO_
}

void RoomsvrAstCallStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstCallStateReq)
  // optional uint32 role = 1;
  if (this->role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role(), output);
  }

  // optional uint32 state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // optional uint32 ringing_time = 3;
  if (this->ringing_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ringing_time(), output);
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStateReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->cdr_id(), output);
  }

  // optional string reason = 5;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStateReq.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstCallStateReq)
}

::google::protobuf::uint8* RoomsvrAstCallStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstCallStateReq)
  // optional uint32 role = 1;
  if (this->role() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role(), target);
  }

  // optional uint32 state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // optional uint32 ringing_time = 3;
  if (this->ringing_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ringing_time(), target);
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStateReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cdr_id(), target);
  }

  // optional string reason = 5;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrAstCallStateReq.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstCallStateReq)
  return target;
}

int RoomsvrAstCallStateReq::ByteSize() const {
  int total_size = 0;

  // optional uint32 role = 1;
  if (this->role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->role());
  }

  // optional uint32 state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // optional uint32 ringing_time = 3;
  if (this->ringing_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ringing_time());
  }

  // optional string cdr_id = 4;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  // optional string reason = 5;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstCallStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstCallStateReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstCallStateReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstCallStateReq::MergeFrom(const RoomsvrAstCallStateReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.role() != 0) {
    set_role(from.role());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.ringing_time() != 0) {
    set_ringing_time(from.ringing_time());
  }
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void RoomsvrAstCallStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstCallStateReq::CopyFrom(const RoomsvrAstCallStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstCallStateReq::IsInitialized() const {

  return true;
}

void RoomsvrAstCallStateReq::Swap(RoomsvrAstCallStateReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstCallStateReq::InternalSwap(RoomsvrAstCallStateReq* other) {
  std::swap(role_, other->role_);
  std::swap(state_, other->state_);
  std::swap(ringing_time_, other->ringing_time_);
  cdr_id_.Swap(&other->cdr_id_);
  reason_.Swap(&other->reason_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstCallStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstCallStateReq_descriptor_;
  metadata.reflection = RoomsvrAstCallStateReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstCallStateReq

// optional uint32 role = 1;
void RoomsvrAstCallStateReq::clear_role() {
  role_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrAstCallStateReq::role() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateReq.role)
  return role_;
}
 void RoomsvrAstCallStateReq::set_role(::google::protobuf::uint32 value) {
  
  role_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStateReq.role)
}

// optional uint32 state = 2;
void RoomsvrAstCallStateReq::clear_state() {
  state_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrAstCallStateReq::state() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateReq.state)
  return state_;
}
 void RoomsvrAstCallStateReq::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStateReq.state)
}

// optional uint32 ringing_time = 3;
void RoomsvrAstCallStateReq::clear_ringing_time() {
  ringing_time_ = 0u;
}
 ::google::protobuf::uint32 RoomsvrAstCallStateReq::ringing_time() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateReq.ringing_time)
  return ringing_time_;
}
 void RoomsvrAstCallStateReq::set_ringing_time(::google::protobuf::uint32 value) {
  
  ringing_time_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStateReq.ringing_time)
}

// optional string cdr_id = 4;
void RoomsvrAstCallStateReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstCallStateReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStateReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStateReq.cdr_id)
}
 void RoomsvrAstCallStateReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstCallStateReq.cdr_id)
}
 void RoomsvrAstCallStateReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstCallStateReq.cdr_id)
}
 ::std::string* RoomsvrAstCallStateReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStateReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstCallStateReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStateReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStateReq.cdr_id)
}

// optional string reason = 5;
void RoomsvrAstCallStateReq::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrAstCallStateReq::reason() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateReq.reason)
  return reason_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStateReq::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrAstCallStateReq.reason)
}
 void RoomsvrAstCallStateReq::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrAstCallStateReq.reason)
}
 void RoomsvrAstCallStateReq::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrAstCallStateReq.reason)
}
 ::std::string* RoomsvrAstCallStateReq::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStateReq.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrAstCallStateReq::release_reason() {
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrAstCallStateReq::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStateReq.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrAstCallStateRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrAstCallStateRsp::RoomsvrAstCallStateRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrAstCallStateRsp)
}

void RoomsvrAstCallStateRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrAstCallStateRsp::RoomsvrAstCallStateRsp(const RoomsvrAstCallStateRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrAstCallStateRsp)
}

void RoomsvrAstCallStateRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrAstCallStateRsp::~RoomsvrAstCallStateRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrAstCallStateRsp)
  SharedDtor();
}

void RoomsvrAstCallStateRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrAstCallStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrAstCallStateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrAstCallStateRsp_descriptor_;
}

const RoomsvrAstCallStateRsp& RoomsvrAstCallStateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrAstCallStateRsp* RoomsvrAstCallStateRsp::default_instance_ = NULL;

RoomsvrAstCallStateRsp* RoomsvrAstCallStateRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrAstCallStateRsp* n = new RoomsvrAstCallStateRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrAstCallStateRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrAstCallStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrAstCallStateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrAstCallStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrAstCallStateRsp)
  return false;
#undef DO_
}

void RoomsvrAstCallStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrAstCallStateRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrAstCallStateRsp)
}

::google::protobuf::uint8* RoomsvrAstCallStateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrAstCallStateRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrAstCallStateRsp)
  return target;
}

int RoomsvrAstCallStateRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrAstCallStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrAstCallStateRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrAstCallStateRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrAstCallStateRsp::MergeFrom(const RoomsvrAstCallStateRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrAstCallStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrAstCallStateRsp::CopyFrom(const RoomsvrAstCallStateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrAstCallStateRsp::IsInitialized() const {

  return true;
}

void RoomsvrAstCallStateRsp::Swap(RoomsvrAstCallStateRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrAstCallStateRsp::InternalSwap(RoomsvrAstCallStateRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrAstCallStateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrAstCallStateRsp_descriptor_;
  metadata.reflection = RoomsvrAstCallStateRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrAstCallStateRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrAstCallStateRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrAstCallStateRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrAstCallStateRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrAstCallStateRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstCallStateRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrAstCallStateRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrAstCallStateRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrAstCallStateRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrAstCallStateRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrInsufficientReq::kCdrIdFieldNumber;
const int RoomsvrInsufficientReq::kCallerChannelFieldNumber;
const int RoomsvrInsufficientReq::kCallerIdFieldNumber;
const int RoomsvrInsufficientReq::kPartnerIdFieldNumber;
#endif  // !_MSC_VER

RoomsvrInsufficientReq::RoomsvrInsufficientReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrInsufficientReq)
}

void RoomsvrInsufficientReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

RoomsvrInsufficientReq::RoomsvrInsufficientReq(const RoomsvrInsufficientReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrInsufficientReq)
}

void RoomsvrInsufficientReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_id_ = GOOGLE_ULONGLONG(0);
  partner_id_ = GOOGLE_ULONGLONG(0);
}

RoomsvrInsufficientReq::~RoomsvrInsufficientReq() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrInsufficientReq)
  SharedDtor();
}

void RoomsvrInsufficientReq::SharedDtor() {
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RoomsvrInsufficientReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrInsufficientReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrInsufficientReq_descriptor_;
}

const RoomsvrInsufficientReq& RoomsvrInsufficientReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrInsufficientReq* RoomsvrInsufficientReq::default_instance_ = NULL;

RoomsvrInsufficientReq* RoomsvrInsufficientReq::New(::google::protobuf::Arena* arena) const {
  RoomsvrInsufficientReq* n = new RoomsvrInsufficientReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrInsufficientReq::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RoomsvrInsufficientReq*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(caller_id_, partner_id_);
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool RoomsvrInsufficientReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrInsufficientReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cdr_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrInsufficientReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_caller_channel;
        break;
      }

      // optional string caller_channel = 2;
      case 2: {
        if (tag == 18) {
         parse_caller_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->caller_channel().data(), this->caller_channel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.RoomsvrInsufficientReq.caller_channel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_caller_id;
        break;
      }

      // optional uint64 caller_id = 3;
      case 3: {
        if (tag == 24) {
         parse_caller_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &caller_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_partner_id;
        break;
      }

      // optional uint64 partner_id = 4;
      case 4: {
        if (tag == 32) {
         parse_partner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &partner_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrInsufficientReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrInsufficientReq)
  return false;
#undef DO_
}

void RoomsvrInsufficientReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrInsufficientReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrInsufficientReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdr_id(), output);
  }

  // optional string caller_channel = 2;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrInsufficientReq.caller_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->caller_channel(), output);
  }

  // optional uint64 caller_id = 3;
  if (this->caller_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->caller_id(), output);
  }

  // optional uint64 partner_id = 4;
  if (this->partner_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->partner_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrInsufficientReq)
}

::google::protobuf::uint8* RoomsvrInsufficientReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrInsufficientReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrInsufficientReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdr_id(), target);
  }

  // optional string caller_channel = 2;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.RoomsvrInsufficientReq.caller_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->caller_channel(), target);
  }

  // optional uint64 caller_id = 3;
  if (this->caller_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->caller_id(), target);
  }

  // optional uint64 partner_id = 4;
  if (this->partner_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->partner_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrInsufficientReq)
  return target;
}

int RoomsvrInsufficientReq::ByteSize() const {
  int total_size = 0;

  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  // optional string caller_channel = 2;
  if (this->caller_channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller_channel());
  }

  // optional uint64 caller_id = 3;
  if (this->caller_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->caller_id());
  }

  // optional uint64 partner_id = 4;
  if (this->partner_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->partner_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrInsufficientReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrInsufficientReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrInsufficientReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrInsufficientReq::MergeFrom(const RoomsvrInsufficientReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
  if (from.caller_channel().size() > 0) {

    caller_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_channel_);
  }
  if (from.caller_id() != 0) {
    set_caller_id(from.caller_id());
  }
  if (from.partner_id() != 0) {
    set_partner_id(from.partner_id());
  }
}

void RoomsvrInsufficientReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrInsufficientReq::CopyFrom(const RoomsvrInsufficientReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrInsufficientReq::IsInitialized() const {

  return true;
}

void RoomsvrInsufficientReq::Swap(RoomsvrInsufficientReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrInsufficientReq::InternalSwap(RoomsvrInsufficientReq* other) {
  cdr_id_.Swap(&other->cdr_id_);
  caller_channel_.Swap(&other->caller_channel_);
  std::swap(caller_id_, other->caller_id_);
  std::swap(partner_id_, other->partner_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrInsufficientReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrInsufficientReq_descriptor_;
  metadata.reflection = RoomsvrInsufficientReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrInsufficientReq

// optional string cdr_id = 1;
void RoomsvrInsufficientReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrInsufficientReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrInsufficientReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrInsufficientReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrInsufficientReq.cdr_id)
}
 void RoomsvrInsufficientReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrInsufficientReq.cdr_id)
}
 void RoomsvrInsufficientReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrInsufficientReq.cdr_id)
}
 ::std::string* RoomsvrInsufficientReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrInsufficientReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrInsufficientReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrInsufficientReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrInsufficientReq.cdr_id)
}

// optional string caller_channel = 2;
void RoomsvrInsufficientReq::clear_caller_channel() {
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& RoomsvrInsufficientReq::caller_channel() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrInsufficientReq.caller_channel)
  return caller_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrInsufficientReq::set_caller_channel(const ::std::string& value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.RoomsvrInsufficientReq.caller_channel)
}
 void RoomsvrInsufficientReq::set_caller_channel(const char* value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.RoomsvrInsufficientReq.caller_channel)
}
 void RoomsvrInsufficientReq::set_caller_channel(const char* value, size_t size) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.RoomsvrInsufficientReq.caller_channel)
}
 ::std::string* RoomsvrInsufficientReq::mutable_caller_channel() {
  
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrInsufficientReq.caller_channel)
  return caller_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RoomsvrInsufficientReq::release_caller_channel() {
  
  return caller_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RoomsvrInsufficientReq::set_allocated_caller_channel(::std::string* caller_channel) {
  if (caller_channel != NULL) {
    
  } else {
    
  }
  caller_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller_channel);
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrInsufficientReq.caller_channel)
}

// optional uint64 caller_id = 3;
void RoomsvrInsufficientReq::clear_caller_id() {
  caller_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrInsufficientReq::caller_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrInsufficientReq.caller_id)
  return caller_id_;
}
 void RoomsvrInsufficientReq::set_caller_id(::google::protobuf::uint64 value) {
  
  caller_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrInsufficientReq.caller_id)
}

// optional uint64 partner_id = 4;
void RoomsvrInsufficientReq::clear_partner_id() {
  partner_id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 RoomsvrInsufficientReq::partner_id() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrInsufficientReq.partner_id)
  return partner_id_;
}
 void RoomsvrInsufficientReq::set_partner_id(::google::protobuf::uint64 value) {
  
  partner_id_ = value;
  // @@protoc_insertion_point(field_set:yespo.RoomsvrInsufficientReq.partner_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int RoomsvrInsufficientRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

RoomsvrInsufficientRsp::RoomsvrInsufficientRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.RoomsvrInsufficientRsp)
}

void RoomsvrInsufficientRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

RoomsvrInsufficientRsp::RoomsvrInsufficientRsp(const RoomsvrInsufficientRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.RoomsvrInsufficientRsp)
}

void RoomsvrInsufficientRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

RoomsvrInsufficientRsp::~RoomsvrInsufficientRsp() {
  // @@protoc_insertion_point(destructor:yespo.RoomsvrInsufficientRsp)
  SharedDtor();
}

void RoomsvrInsufficientRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void RoomsvrInsufficientRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomsvrInsufficientRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomsvrInsufficientRsp_descriptor_;
}

const RoomsvrInsufficientRsp& RoomsvrInsufficientRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

RoomsvrInsufficientRsp* RoomsvrInsufficientRsp::default_instance_ = NULL;

RoomsvrInsufficientRsp* RoomsvrInsufficientRsp::New(::google::protobuf::Arena* arena) const {
  RoomsvrInsufficientRsp* n = new RoomsvrInsufficientRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoomsvrInsufficientRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool RoomsvrInsufficientRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.RoomsvrInsufficientRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.RoomsvrInsufficientRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.RoomsvrInsufficientRsp)
  return false;
#undef DO_
}

void RoomsvrInsufficientRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.RoomsvrInsufficientRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.RoomsvrInsufficientRsp)
}

::google::protobuf::uint8* RoomsvrInsufficientRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.RoomsvrInsufficientRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.RoomsvrInsufficientRsp)
  return target;
}

int RoomsvrInsufficientRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomsvrInsufficientRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RoomsvrInsufficientRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RoomsvrInsufficientRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomsvrInsufficientRsp::MergeFrom(const RoomsvrInsufficientRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void RoomsvrInsufficientRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomsvrInsufficientRsp::CopyFrom(const RoomsvrInsufficientRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomsvrInsufficientRsp::IsInitialized() const {

  return true;
}

void RoomsvrInsufficientRsp::Swap(RoomsvrInsufficientRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoomsvrInsufficientRsp::InternalSwap(RoomsvrInsufficientRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RoomsvrInsufficientRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomsvrInsufficientRsp_descriptor_;
  metadata.reflection = RoomsvrInsufficientRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoomsvrInsufficientRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool RoomsvrInsufficientRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void RoomsvrInsufficientRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& RoomsvrInsufficientRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.RoomsvrInsufficientRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* RoomsvrInsufficientRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.RoomsvrInsufficientRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* RoomsvrInsufficientRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void RoomsvrInsufficientRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.RoomsvrInsufficientRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BillingSvrTimerBillingReq::BillingSvrTimerBillingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.BillingSvrTimerBillingReq)
}

void BillingSvrTimerBillingReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BillingSvrTimerBillingReq::BillingSvrTimerBillingReq(const BillingSvrTimerBillingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.BillingSvrTimerBillingReq)
}

void BillingSvrTimerBillingReq::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

BillingSvrTimerBillingReq::~BillingSvrTimerBillingReq() {
  // @@protoc_insertion_point(destructor:yespo.BillingSvrTimerBillingReq)
  SharedDtor();
}

void BillingSvrTimerBillingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BillingSvrTimerBillingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingSvrTimerBillingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingSvrTimerBillingReq_descriptor_;
}

const BillingSvrTimerBillingReq& BillingSvrTimerBillingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

BillingSvrTimerBillingReq* BillingSvrTimerBillingReq::default_instance_ = NULL;

BillingSvrTimerBillingReq* BillingSvrTimerBillingReq::New(::google::protobuf::Arena* arena) const {
  BillingSvrTimerBillingReq* n = new BillingSvrTimerBillingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BillingSvrTimerBillingReq::Clear() {
}

bool BillingSvrTimerBillingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.BillingSvrTimerBillingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.BillingSvrTimerBillingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.BillingSvrTimerBillingReq)
  return false;
#undef DO_
}

void BillingSvrTimerBillingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.BillingSvrTimerBillingReq)
  // @@protoc_insertion_point(serialize_end:yespo.BillingSvrTimerBillingReq)
}

::google::protobuf::uint8* BillingSvrTimerBillingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.BillingSvrTimerBillingReq)
  // @@protoc_insertion_point(serialize_to_array_end:yespo.BillingSvrTimerBillingReq)
  return target;
}

int BillingSvrTimerBillingReq::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingSvrTimerBillingReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BillingSvrTimerBillingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BillingSvrTimerBillingReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingSvrTimerBillingReq::MergeFrom(const BillingSvrTimerBillingReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void BillingSvrTimerBillingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingSvrTimerBillingReq::CopyFrom(const BillingSvrTimerBillingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingSvrTimerBillingReq::IsInitialized() const {

  return true;
}

void BillingSvrTimerBillingReq::Swap(BillingSvrTimerBillingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BillingSvrTimerBillingReq::InternalSwap(BillingSvrTimerBillingReq* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillingSvrTimerBillingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingSvrTimerBillingReq_descriptor_;
  metadata.reflection = BillingSvrTimerBillingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillingSvrTimerBillingReq

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BillingSvrStartBillingReq::kCdrIdFieldNumber;
#endif  // !_MSC_VER

BillingSvrStartBillingReq::BillingSvrStartBillingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.BillingSvrStartBillingReq)
}

void BillingSvrStartBillingReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BillingSvrStartBillingReq::BillingSvrStartBillingReq(const BillingSvrStartBillingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.BillingSvrStartBillingReq)
}

void BillingSvrStartBillingReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BillingSvrStartBillingReq::~BillingSvrStartBillingReq() {
  // @@protoc_insertion_point(destructor:yespo.BillingSvrStartBillingReq)
  SharedDtor();
}

void BillingSvrStartBillingReq::SharedDtor() {
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BillingSvrStartBillingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingSvrStartBillingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingSvrStartBillingReq_descriptor_;
}

const BillingSvrStartBillingReq& BillingSvrStartBillingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

BillingSvrStartBillingReq* BillingSvrStartBillingReq::default_instance_ = NULL;

BillingSvrStartBillingReq* BillingSvrStartBillingReq::New(::google::protobuf::Arena* arena) const {
  BillingSvrStartBillingReq* n = new BillingSvrStartBillingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BillingSvrStartBillingReq::Clear() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BillingSvrStartBillingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.BillingSvrStartBillingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cdr_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.BillingSvrStartBillingReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.BillingSvrStartBillingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.BillingSvrStartBillingReq)
  return false;
#undef DO_
}

void BillingSvrStartBillingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.BillingSvrStartBillingReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.BillingSvrStartBillingReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdr_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.BillingSvrStartBillingReq)
}

::google::protobuf::uint8* BillingSvrStartBillingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.BillingSvrStartBillingReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.BillingSvrStartBillingReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdr_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.BillingSvrStartBillingReq)
  return target;
}

int BillingSvrStartBillingReq::ByteSize() const {
  int total_size = 0;

  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingSvrStartBillingReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BillingSvrStartBillingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BillingSvrStartBillingReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingSvrStartBillingReq::MergeFrom(const BillingSvrStartBillingReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
}

void BillingSvrStartBillingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingSvrStartBillingReq::CopyFrom(const BillingSvrStartBillingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingSvrStartBillingReq::IsInitialized() const {

  return true;
}

void BillingSvrStartBillingReq::Swap(BillingSvrStartBillingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BillingSvrStartBillingReq::InternalSwap(BillingSvrStartBillingReq* other) {
  cdr_id_.Swap(&other->cdr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillingSvrStartBillingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingSvrStartBillingReq_descriptor_;
  metadata.reflection = BillingSvrStartBillingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillingSvrStartBillingReq

// optional string cdr_id = 1;
void BillingSvrStartBillingReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BillingSvrStartBillingReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.BillingSvrStartBillingReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BillingSvrStartBillingReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.BillingSvrStartBillingReq.cdr_id)
}
 void BillingSvrStartBillingReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.BillingSvrStartBillingReq.cdr_id)
}
 void BillingSvrStartBillingReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.BillingSvrStartBillingReq.cdr_id)
}
 ::std::string* BillingSvrStartBillingReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.BillingSvrStartBillingReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BillingSvrStartBillingReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BillingSvrStartBillingReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.BillingSvrStartBillingReq.cdr_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BillingSvrStartBillingRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

BillingSvrStartBillingRsp::BillingSvrStartBillingRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.BillingSvrStartBillingRsp)
}

void BillingSvrStartBillingRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

BillingSvrStartBillingRsp::BillingSvrStartBillingRsp(const BillingSvrStartBillingRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.BillingSvrStartBillingRsp)
}

void BillingSvrStartBillingRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

BillingSvrStartBillingRsp::~BillingSvrStartBillingRsp() {
  // @@protoc_insertion_point(destructor:yespo.BillingSvrStartBillingRsp)
  SharedDtor();
}

void BillingSvrStartBillingRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void BillingSvrStartBillingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingSvrStartBillingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingSvrStartBillingRsp_descriptor_;
}

const BillingSvrStartBillingRsp& BillingSvrStartBillingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

BillingSvrStartBillingRsp* BillingSvrStartBillingRsp::default_instance_ = NULL;

BillingSvrStartBillingRsp* BillingSvrStartBillingRsp::New(::google::protobuf::Arena* arena) const {
  BillingSvrStartBillingRsp* n = new BillingSvrStartBillingRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BillingSvrStartBillingRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool BillingSvrStartBillingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.BillingSvrStartBillingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.BillingSvrStartBillingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.BillingSvrStartBillingRsp)
  return false;
#undef DO_
}

void BillingSvrStartBillingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.BillingSvrStartBillingRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.BillingSvrStartBillingRsp)
}

::google::protobuf::uint8* BillingSvrStartBillingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.BillingSvrStartBillingRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.BillingSvrStartBillingRsp)
  return target;
}

int BillingSvrStartBillingRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingSvrStartBillingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BillingSvrStartBillingRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BillingSvrStartBillingRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingSvrStartBillingRsp::MergeFrom(const BillingSvrStartBillingRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void BillingSvrStartBillingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingSvrStartBillingRsp::CopyFrom(const BillingSvrStartBillingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingSvrStartBillingRsp::IsInitialized() const {

  return true;
}

void BillingSvrStartBillingRsp::Swap(BillingSvrStartBillingRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BillingSvrStartBillingRsp::InternalSwap(BillingSvrStartBillingRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillingSvrStartBillingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingSvrStartBillingRsp_descriptor_;
  metadata.reflection = BillingSvrStartBillingRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillingSvrStartBillingRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool BillingSvrStartBillingRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void BillingSvrStartBillingRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& BillingSvrStartBillingRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.BillingSvrStartBillingRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* BillingSvrStartBillingRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.BillingSvrStartBillingRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* BillingSvrStartBillingRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void BillingSvrStartBillingRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.BillingSvrStartBillingRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BillingSvrFinishBillingReq::kCdrIdFieldNumber;
#endif  // !_MSC_VER

BillingSvrFinishBillingReq::BillingSvrFinishBillingReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.BillingSvrFinishBillingReq)
}

void BillingSvrFinishBillingReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BillingSvrFinishBillingReq::BillingSvrFinishBillingReq(const BillingSvrFinishBillingReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.BillingSvrFinishBillingReq)
}

void BillingSvrFinishBillingReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cdr_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BillingSvrFinishBillingReq::~BillingSvrFinishBillingReq() {
  // @@protoc_insertion_point(destructor:yespo.BillingSvrFinishBillingReq)
  SharedDtor();
}

void BillingSvrFinishBillingReq::SharedDtor() {
  cdr_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BillingSvrFinishBillingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingSvrFinishBillingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingSvrFinishBillingReq_descriptor_;
}

const BillingSvrFinishBillingReq& BillingSvrFinishBillingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

BillingSvrFinishBillingReq* BillingSvrFinishBillingReq::default_instance_ = NULL;

BillingSvrFinishBillingReq* BillingSvrFinishBillingReq::New(::google::protobuf::Arena* arena) const {
  BillingSvrFinishBillingReq* n = new BillingSvrFinishBillingReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BillingSvrFinishBillingReq::Clear() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool BillingSvrFinishBillingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.BillingSvrFinishBillingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cdr_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdr_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cdr_id().data(), this->cdr_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.BillingSvrFinishBillingReq.cdr_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.BillingSvrFinishBillingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.BillingSvrFinishBillingReq)
  return false;
#undef DO_
}

void BillingSvrFinishBillingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.BillingSvrFinishBillingReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.BillingSvrFinishBillingReq.cdr_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cdr_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.BillingSvrFinishBillingReq)
}

::google::protobuf::uint8* BillingSvrFinishBillingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.BillingSvrFinishBillingReq)
  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cdr_id().data(), this->cdr_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.BillingSvrFinishBillingReq.cdr_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cdr_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.BillingSvrFinishBillingReq)
  return target;
}

int BillingSvrFinishBillingReq::ByteSize() const {
  int total_size = 0;

  // optional string cdr_id = 1;
  if (this->cdr_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cdr_id());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingSvrFinishBillingReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BillingSvrFinishBillingReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BillingSvrFinishBillingReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingSvrFinishBillingReq::MergeFrom(const BillingSvrFinishBillingReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.cdr_id().size() > 0) {

    cdr_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cdr_id_);
  }
}

void BillingSvrFinishBillingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingSvrFinishBillingReq::CopyFrom(const BillingSvrFinishBillingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingSvrFinishBillingReq::IsInitialized() const {

  return true;
}

void BillingSvrFinishBillingReq::Swap(BillingSvrFinishBillingReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BillingSvrFinishBillingReq::InternalSwap(BillingSvrFinishBillingReq* other) {
  cdr_id_.Swap(&other->cdr_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillingSvrFinishBillingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingSvrFinishBillingReq_descriptor_;
  metadata.reflection = BillingSvrFinishBillingReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillingSvrFinishBillingReq

// optional string cdr_id = 1;
void BillingSvrFinishBillingReq::clear_cdr_id() {
  cdr_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BillingSvrFinishBillingReq::cdr_id() const {
  // @@protoc_insertion_point(field_get:yespo.BillingSvrFinishBillingReq.cdr_id)
  return cdr_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BillingSvrFinishBillingReq::set_cdr_id(const ::std::string& value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.BillingSvrFinishBillingReq.cdr_id)
}
 void BillingSvrFinishBillingReq::set_cdr_id(const char* value) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.BillingSvrFinishBillingReq.cdr_id)
}
 void BillingSvrFinishBillingReq::set_cdr_id(const char* value, size_t size) {
  
  cdr_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.BillingSvrFinishBillingReq.cdr_id)
}
 ::std::string* BillingSvrFinishBillingReq::mutable_cdr_id() {
  
  // @@protoc_insertion_point(field_mutable:yespo.BillingSvrFinishBillingReq.cdr_id)
  return cdr_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BillingSvrFinishBillingReq::release_cdr_id() {
  
  return cdr_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BillingSvrFinishBillingReq::set_allocated_cdr_id(::std::string* cdr_id) {
  if (cdr_id != NULL) {
    
  } else {
    
  }
  cdr_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cdr_id);
  // @@protoc_insertion_point(field_set_allocated:yespo.BillingSvrFinishBillingReq.cdr_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BillingSvrFinishBillingRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

BillingSvrFinishBillingRsp::BillingSvrFinishBillingRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.BillingSvrFinishBillingRsp)
}

void BillingSvrFinishBillingRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

BillingSvrFinishBillingRsp::BillingSvrFinishBillingRsp(const BillingSvrFinishBillingRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.BillingSvrFinishBillingRsp)
}

void BillingSvrFinishBillingRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

BillingSvrFinishBillingRsp::~BillingSvrFinishBillingRsp() {
  // @@protoc_insertion_point(destructor:yespo.BillingSvrFinishBillingRsp)
  SharedDtor();
}

void BillingSvrFinishBillingRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void BillingSvrFinishBillingRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BillingSvrFinishBillingRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillingSvrFinishBillingRsp_descriptor_;
}

const BillingSvrFinishBillingRsp& BillingSvrFinishBillingRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

BillingSvrFinishBillingRsp* BillingSvrFinishBillingRsp::default_instance_ = NULL;

BillingSvrFinishBillingRsp* BillingSvrFinishBillingRsp::New(::google::protobuf::Arena* arena) const {
  BillingSvrFinishBillingRsp* n = new BillingSvrFinishBillingRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BillingSvrFinishBillingRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool BillingSvrFinishBillingRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.BillingSvrFinishBillingRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.BillingSvrFinishBillingRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.BillingSvrFinishBillingRsp)
  return false;
#undef DO_
}

void BillingSvrFinishBillingRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.BillingSvrFinishBillingRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.BillingSvrFinishBillingRsp)
}

::google::protobuf::uint8* BillingSvrFinishBillingRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.BillingSvrFinishBillingRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.BillingSvrFinishBillingRsp)
  return target;
}

int BillingSvrFinishBillingRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BillingSvrFinishBillingRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BillingSvrFinishBillingRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BillingSvrFinishBillingRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BillingSvrFinishBillingRsp::MergeFrom(const BillingSvrFinishBillingRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void BillingSvrFinishBillingRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BillingSvrFinishBillingRsp::CopyFrom(const BillingSvrFinishBillingRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BillingSvrFinishBillingRsp::IsInitialized() const {

  return true;
}

void BillingSvrFinishBillingRsp::Swap(BillingSvrFinishBillingRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BillingSvrFinishBillingRsp::InternalSwap(BillingSvrFinishBillingRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BillingSvrFinishBillingRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BillingSvrFinishBillingRsp_descriptor_;
  metadata.reflection = BillingSvrFinishBillingRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BillingSvrFinishBillingRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool BillingSvrFinishBillingRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void BillingSvrFinishBillingRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& BillingSvrFinishBillingRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.BillingSvrFinishBillingRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* BillingSvrFinishBillingRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.BillingSvrFinishBillingRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* BillingSvrFinishBillingRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void BillingSvrFinishBillingRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.BillingSvrFinishBillingRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AmiSvrHangupReq::kCallerChannelFieldNumber;
#endif  // !_MSC_VER

AmiSvrHangupReq::AmiSvrHangupReq()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AmiSvrHangupReq)
}

void AmiSvrHangupReq::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AmiSvrHangupReq::AmiSvrHangupReq(const AmiSvrHangupReq& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AmiSvrHangupReq)
}

void AmiSvrHangupReq::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  caller_channel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AmiSvrHangupReq::~AmiSvrHangupReq() {
  // @@protoc_insertion_point(destructor:yespo.AmiSvrHangupReq)
  SharedDtor();
}

void AmiSvrHangupReq::SharedDtor() {
  caller_channel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AmiSvrHangupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmiSvrHangupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmiSvrHangupReq_descriptor_;
}

const AmiSvrHangupReq& AmiSvrHangupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AmiSvrHangupReq* AmiSvrHangupReq::default_instance_ = NULL;

AmiSvrHangupReq* AmiSvrHangupReq::New(::google::protobuf::Arena* arena) const {
  AmiSvrHangupReq* n = new AmiSvrHangupReq;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmiSvrHangupReq::Clear() {
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AmiSvrHangupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AmiSvrHangupReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string caller_channel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_caller_channel()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->caller_channel().data(), this->caller_channel().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "yespo.AmiSvrHangupReq.caller_channel"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AmiSvrHangupReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AmiSvrHangupReq)
  return false;
#undef DO_
}

void AmiSvrHangupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AmiSvrHangupReq)
  // optional string caller_channel = 1;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AmiSvrHangupReq.caller_channel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->caller_channel(), output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AmiSvrHangupReq)
}

::google::protobuf::uint8* AmiSvrHangupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AmiSvrHangupReq)
  // optional string caller_channel = 1;
  if (this->caller_channel().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->caller_channel().data(), this->caller_channel().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "yespo.AmiSvrHangupReq.caller_channel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->caller_channel(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AmiSvrHangupReq)
  return target;
}

int AmiSvrHangupReq::ByteSize() const {
  int total_size = 0;

  // optional string caller_channel = 1;
  if (this->caller_channel().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->caller_channel());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmiSvrHangupReq::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AmiSvrHangupReq* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AmiSvrHangupReq>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmiSvrHangupReq::MergeFrom(const AmiSvrHangupReq& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.caller_channel().size() > 0) {

    caller_channel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.caller_channel_);
  }
}

void AmiSvrHangupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmiSvrHangupReq::CopyFrom(const AmiSvrHangupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmiSvrHangupReq::IsInitialized() const {

  return true;
}

void AmiSvrHangupReq::Swap(AmiSvrHangupReq* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmiSvrHangupReq::InternalSwap(AmiSvrHangupReq* other) {
  caller_channel_.Swap(&other->caller_channel_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmiSvrHangupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmiSvrHangupReq_descriptor_;
  metadata.reflection = AmiSvrHangupReq_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AmiSvrHangupReq

// optional string caller_channel = 1;
void AmiSvrHangupReq::clear_caller_channel() {
  caller_channel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AmiSvrHangupReq::caller_channel() const {
  // @@protoc_insertion_point(field_get:yespo.AmiSvrHangupReq.caller_channel)
  return caller_channel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AmiSvrHangupReq::set_caller_channel(const ::std::string& value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yespo.AmiSvrHangupReq.caller_channel)
}
 void AmiSvrHangupReq::set_caller_channel(const char* value) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yespo.AmiSvrHangupReq.caller_channel)
}
 void AmiSvrHangupReq::set_caller_channel(const char* value, size_t size) {
  
  caller_channel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yespo.AmiSvrHangupReq.caller_channel)
}
 ::std::string* AmiSvrHangupReq::mutable_caller_channel() {
  
  // @@protoc_insertion_point(field_mutable:yespo.AmiSvrHangupReq.caller_channel)
  return caller_channel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AmiSvrHangupReq::release_caller_channel() {
  
  return caller_channel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AmiSvrHangupReq::set_allocated_caller_channel(::std::string* caller_channel) {
  if (caller_channel != NULL) {
    
  } else {
    
  }
  caller_channel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), caller_channel);
  // @@protoc_insertion_point(field_set_allocated:yespo.AmiSvrHangupReq.caller_channel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int AmiSvrHangupRsp::kRspMsgFieldNumber;
#endif  // !_MSC_VER

AmiSvrHangupRsp::AmiSvrHangupRsp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:yespo.AmiSvrHangupRsp)
}

void AmiSvrHangupRsp::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  rsp_msg_ = const_cast< ::yespo::RspMsg*>(&::yespo::RspMsg::default_instance());
}

AmiSvrHangupRsp::AmiSvrHangupRsp(const AmiSvrHangupRsp& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:yespo.AmiSvrHangupRsp)
}

void AmiSvrHangupRsp::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  rsp_msg_ = NULL;
}

AmiSvrHangupRsp::~AmiSvrHangupRsp() {
  // @@protoc_insertion_point(destructor:yespo.AmiSvrHangupRsp)
  SharedDtor();
}

void AmiSvrHangupRsp::SharedDtor() {
  if (this != default_instance_) {
    delete rsp_msg_;
  }
}

void AmiSvrHangupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AmiSvrHangupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AmiSvrHangupRsp_descriptor_;
}

const AmiSvrHangupRsp& AmiSvrHangupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_yespo_5fprotocol_2eproto();
  return *default_instance_;
}

AmiSvrHangupRsp* AmiSvrHangupRsp::default_instance_ = NULL;

AmiSvrHangupRsp* AmiSvrHangupRsp::New(::google::protobuf::Arena* arena) const {
  AmiSvrHangupRsp* n = new AmiSvrHangupRsp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AmiSvrHangupRsp::Clear() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}

bool AmiSvrHangupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:yespo.AmiSvrHangupRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .yespo.RspMsg rsp_msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rsp_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:yespo.AmiSvrHangupRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:yespo.AmiSvrHangupRsp)
  return false;
#undef DO_
}

void AmiSvrHangupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:yespo.AmiSvrHangupRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->rsp_msg_, output);
  }

  // @@protoc_insertion_point(serialize_end:yespo.AmiSvrHangupRsp)
}

::google::protobuf::uint8* AmiSvrHangupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:yespo.AmiSvrHangupRsp)
  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->rsp_msg_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:yespo.AmiSvrHangupRsp)
  return target;
}

int AmiSvrHangupRsp::ByteSize() const {
  int total_size = 0;

  // optional .yespo.RspMsg rsp_msg = 1;
  if (this->has_rsp_msg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rsp_msg_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AmiSvrHangupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AmiSvrHangupRsp* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AmiSvrHangupRsp>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AmiSvrHangupRsp::MergeFrom(const AmiSvrHangupRsp& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_rsp_msg()) {
    mutable_rsp_msg()->::yespo::RspMsg::MergeFrom(from.rsp_msg());
  }
}

void AmiSvrHangupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AmiSvrHangupRsp::CopyFrom(const AmiSvrHangupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmiSvrHangupRsp::IsInitialized() const {

  return true;
}

void AmiSvrHangupRsp::Swap(AmiSvrHangupRsp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AmiSvrHangupRsp::InternalSwap(AmiSvrHangupRsp* other) {
  std::swap(rsp_msg_, other->rsp_msg_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AmiSvrHangupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AmiSvrHangupRsp_descriptor_;
  metadata.reflection = AmiSvrHangupRsp_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AmiSvrHangupRsp

// optional .yespo.RspMsg rsp_msg = 1;
bool AmiSvrHangupRsp::has_rsp_msg() const {
  return !_is_default_instance_ && rsp_msg_ != NULL;
}
void AmiSvrHangupRsp::clear_rsp_msg() {
  if (GetArenaNoVirtual() == NULL && rsp_msg_ != NULL) delete rsp_msg_;
  rsp_msg_ = NULL;
}
const ::yespo::RspMsg& AmiSvrHangupRsp::rsp_msg() const {
  // @@protoc_insertion_point(field_get:yespo.AmiSvrHangupRsp.rsp_msg)
  return rsp_msg_ != NULL ? *rsp_msg_ : *default_instance_->rsp_msg_;
}
::yespo::RspMsg* AmiSvrHangupRsp::mutable_rsp_msg() {
  
  if (rsp_msg_ == NULL) {
    rsp_msg_ = new ::yespo::RspMsg;
  }
  // @@protoc_insertion_point(field_mutable:yespo.AmiSvrHangupRsp.rsp_msg)
  return rsp_msg_;
}
::yespo::RspMsg* AmiSvrHangupRsp::release_rsp_msg() {
  
  ::yespo::RspMsg* temp = rsp_msg_;
  rsp_msg_ = NULL;
  return temp;
}
void AmiSvrHangupRsp::set_allocated_rsp_msg(::yespo::RspMsg* rsp_msg) {
  delete rsp_msg_;
  rsp_msg_ = rsp_msg;
  if (rsp_msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:yespo.AmiSvrHangupRsp.rsp_msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace yespo

// @@protoc_insertion_point(global_scope)
